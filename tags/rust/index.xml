<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on csMACnz&#39;s Blog</title>
    <link>https://blog.csmac.nz/tags/rust/</link>
    <description>Recent content in Rust on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blog.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blog.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 14 May 2018 07:00:00 +0000</lastBuildDate><atom:link href="https://blog.csmac.nz/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Develop your Rust in Docker</title>
      <link>https://blog.csmac.nz/post/develop-your-rust-in-docker/</link>
      <pubDate>Mon, 14 May 2018 07:00:00 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/develop-your-rust-in-docker/</guid>
      <description>&lt;p&gt;I decided a while ago that the next language I would try to learn is Rust.  I don&amp;rsquo;t want to go too much into Rust other than to repeat its own summary:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.
&amp;ndash; &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;https://www.rust-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But like all things, there are bits that need to be installed. I want to get started, I don&amp;rsquo;t want to muck around with installers.&lt;/p&gt;
&lt;h3 id=&#34;online-playground&#34;&gt;Online playground&lt;/h3&gt;
&lt;p&gt;The Rust docs online include &lt;a href=&#34;https://doc.rust-lang.org/rust-by-example/&#34;&gt;Rust By Example&lt;/a&gt;, which is interactive documentation that you can edit and execute from inside the browser.&lt;/p&gt;
&lt;p&gt;There is also the &lt;a href=&#34;https://play.rust-lang.org/&#34;&gt;Rust Playground&lt;/a&gt; which lets you write, compile, run, decompile Rust, and even generate intermediate representations of it in several formats.&lt;/p&gt;
&lt;p&gt;Many modern languages now have playgrounds like this including C# (&lt;a href=&#34;https://dotnetfiddle.net/&#34;&gt;.Net Fiddle&lt;/a&gt; or &lt;a href=&#34;https://csharppad.com/&#34;&gt;C# Pad&lt;/a&gt;), JavaScript (&lt;a href=&#34;https://jsbin.com/&#34;&gt;JS Bin&lt;/a&gt;, &lt;a href=&#34;https://jsfiddle.net/&#34;&gt;JS Fiddle&lt;/a&gt; or &lt;a href=&#34;https://javascriptplayground.com/&#34;&gt;The Javascript Playground&lt;/a&gt;) and F# (&lt;a href=&#34;http://www.tryfsharp.org/&#34;&gt;Try F#&lt;/a&gt;) (as well as many others).&lt;/p&gt;
&lt;p&gt;Ok for playing around, but not sufficient, especially if you want to write custom &lt;a href=&#34;https://en.wikipedia.org/wiki/Intellectual_property&#34;&gt;IP&lt;/a&gt;, or start doing IO for instance.&lt;/p&gt;
&lt;h3 id=&#34;why-not-docker&#34;&gt;Why not docker?&lt;/h3&gt;
&lt;p&gt;On windows, I can build and run Rust on Docker, without installing Rust. Since I already have Docker installed, this is the fastest way to get going.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;docker run -it -v &amp;quot;$(pwd):/usr/src/myapp&amp;quot; -w /usr/src/myapp --rm rust:latest cargo test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This PowerShell-compatible command launches and tests my application in docker. Breaking it down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; says we are executing a container from an image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt; specifies we want it to be an interactive session (show me the console logs)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v &amp;quot;$(pwd):/usr/src/myapp&amp;quot;&lt;/code&gt; I want to map (share) my current local folder inside the container at the path &amp;ldquo;/usr/src/myapp&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w /usr/src/myapp&lt;/code&gt; start the session inside the working directory as the one we just mapped from our local system&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; clean up the instance when we exit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rust:latest&lt;/code&gt; use the latest rust container image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo test&lt;/code&gt; run the rust command cargo test (a bit like dotnet test)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;an-example&#34;&gt;An Example&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s work this a step at a time. I want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new rust project&lt;/li&gt;
&lt;li&gt;Build it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We had a look at the rust command to build in detail, so we can now quickly look at the commands to create a new rust project and then build it.&lt;/p&gt;
&lt;h4 id=&#34;file-new-project&#34;&gt;File New Project&lt;/h4&gt;
&lt;p&gt;In Rust, there is a tool called Cargo, which works a lot like &lt;code&gt;dotnet&lt;/code&gt; for C#.  There is also a compiler &lt;code&gt;rustc&lt;/code&gt; that will compile a single file. You could just run the above command with &lt;code&gt;rustc main.rs&lt;/code&gt; instead of &lt;code&gt;cargo test&lt;/code&gt; and it will build the &lt;code&gt;main.rs&lt;/code&gt; file from inside the container.&lt;/p&gt;
&lt;p&gt;Instead, we will use cargo.&lt;/p&gt;
&lt;p&gt;(As a caveat, we need to declare a &lt;code&gt;$USER&lt;/code&gt; environment variable for cargo new since this appears to be unset on this Docker container image.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;mkdir rustroot
cd rustroot
docker run -e USER=MyUser -it -v &amp;quot;$(pwd):/usr/src&amp;quot; -w /usr/src --rm rust:latest cargo new --bin myApp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything went well, you should now have a local file structure on your machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustroot
+-- myApp
    |-- Cargo.toml
    +-- src
        \-- main.rs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s move into the newly created directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd myApp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-and-test&#34;&gt;build and test&lt;/h4&gt;
&lt;p&gt;From inside the &lt;code&gt;myApp&lt;/code&gt; folder, we can once again launch a docker instance to perform our build and test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;docker run -it -v &amp;quot;$(pwd):/usr/src/myapp&amp;quot; -w /usr/src/myapp --rm rust:latest cargo test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now see the following successful output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run -it -v &amp;quot;$(pwd):/usr/src/myapp&amp;quot; -w /usr/src/myapp --rm rust:latest cargo test
   Compiling myApp v0.1.0 (file:///usr/src/myapp)
warning: crate `myApp` should have a snake case name such as `my_app`
  |
  = note: #[warn(non_snake_case)] on by default

    Finished dev [unoptimized + debuginfo] target(s) in 1.4 secs
     Running target/debug/deps/myApp-f7629208065f5316

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At some point, I had an error trying to run this a second time. I used &lt;code&gt;rm -r ./target&lt;/code&gt; to fix it, possibly because of some sort of locking? I&amp;rsquo;m not sure. All I knew at the time was that if I didn&amp;rsquo;t remove it, it didn&amp;rsquo;t build a second time. It seems to work fine now though. &lt;em&gt;shrug&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-end&#34;&gt;The End&lt;/h3&gt;
&lt;p&gt;Long term I will still want to install a development environment for Rust, but to get going fast and for just learning the syntax and libraries, this is a nice quick way to get started. (And if you want to run a Rust workshop/lesson, it may be easier to get certain groups up and running if you know they already have docker - like your team at work, perhaps.)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>