<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coveralls.net on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/tags/coveralls.net/</link>
    <description>Recent content in coveralls.net on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 04 Jun 2018 07:00:00 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/tags/coveralls.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coveralls.Net 1.0.0 Release</title>
      <link>https://csmacnzblog.github.io/post/coveralls-net-1-0-0-release/</link>
      <pubDate>Mon, 04 Jun 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/coveralls-net-1-0-0-release/</guid>
      <description>&lt;p&gt;Christmas 2014. I was building out projects on GitHub in open source. The obsession with open source even went on to spawn a &lt;a href=&#34;https://blog.csmac.nz/-net-os-1-source-control/&#34;&gt;Series of Blog Posts&lt;/a&gt;. Each tool or library I was building lead onto another tool or library to make the build pipeline, or development process better. Often putting down one project while I sorted out another one first.  This has continued at a slow pace for the last 3 years.&lt;/p&gt;
&lt;p&gt;Back in January 2015 I &lt;a href=&#34;https://blog.csmac.nz/introducing-coveralls-net/&#34;&gt;Announced Coveralls.Net&lt;/a&gt;. This is a code coverage publisher for publishing your coverage results to the coveralls.io API. Coveralls.io is a coverage tracking service, which is free for open source projects, with a paid service for private use, and now an Enterprise version as well. There was a bunch of python and ruby versions, but I wanted fewer dependencies on those runtimes so built my own.  I even managed to get it listed as one of the two &lt;a href=&#34;https://docs.coveralls.io/dot-net&#34;&gt;recommended .Net coverage integrations&lt;/a&gt; on the coveralls.io docs.&lt;/p&gt;
&lt;p&gt;While development has been a slow work of labour over the last three years, the announcement of dotnet CLI tools (proper npm-style tools, not the weird interim dotnet-tool stuff&amp;hellip;) with dotnet SDK 2.1, I had to jump in and get on board.&lt;/p&gt;
&lt;h3 id=&#34;announcing-100&#34;&gt;Announcing 1.0.0&lt;/h3&gt;
&lt;p&gt;Which brings me to announcing Coveralls.Net 1.0.0. This is a dotnet CLI tools compatible version of &lt;code&gt;csmacnz.Coveralls&lt;/code&gt;. Easier to install. Easier to update. And a whole bunch new features, including more coverage options, and better autodetection processes in AppVeyor.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# install globally
dotnet tool install -g coveralls.net --version 1.0.0

# if installed globally, this should just be available on your path
csmacnz.coveralls &amp;lt;args&amp;gt;

# install into a local folder
dotnet tool install coveralls.net --version 1.0.0 --tools-path tools

# if installed into a tools path, you can run it from there.
.\tools\csmacnz.Coveralls &amp;lt;args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I&amp;rsquo;ve been struggling a bit with beta 0.8.0. It hasn&amp;rsquo;t been easy to find time to test the new stuff I added, get others to test, and be happy to call it a stable release. But there was a bunch of new stuff and fixes in there. These have all rolled forward into the 1.0.0 Release now. (I might go back and call 0.8.0 stable now since it still works the old way. But for now the old way still works with stable &lt;code&gt;0.7.0&lt;/code&gt; and &lt;code&gt;0.8.0-beta003&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Still not happy/comfortable with using CLI tools? Not using 2.1? That&amp;rsquo;s ok. I&amp;rsquo;ve used the power of the &lt;a href=&#34;https://blog.csmac.nz/dotnetcore2-self-contained-applications/&#34;&gt;self-contained app&lt;/a&gt; to provide a &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt; and &lt;code&gt;osx&lt;/code&gt; native version (Linux targets the cross-compat Linux target) in a zip file under &lt;a href=&#34;https://github.com/csMACnz/coveralls.net/releases/tag/1.0.0&#34;&gt;the Releases folder on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For windows in PowerShell you would use it something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# The TLS change was necessary on my development machine
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

$zipDownloadPath=&amp;quot;https://github.com/csMACnz/coveralls.net/releases/download/1.0.0/coveralls.net.1.0.0-windows.zip&amp;quot;
Invoke-WebRequest -UseBasicParsing $zipDownloadPath -OutFile coveralls-windows.zip
mkdir coveralls-windows
Expand-Archive .\coveralls-windows.zip coveralls-windows

.\coveralls-windows\csmacnz.Coveralls.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope to get more details added on the GitHub Wiki for linux and mac usage of the self-contained app, as well as updating all the samples over at &lt;a href=&#34;https://github.com/csMACnz/Coveralls.net-Samples/&#34;&gt;Coveralls.net-Samples&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;more-targets&#34;&gt;More targets&lt;/h3&gt;
&lt;p&gt;Since the first release, targeting OpenCover coverage files (the most popular at the time), this has been expanded to include Visual Studio Coverage, monocov, Report Generator, Chutzpah javascript coverage, lcov, NCover and &lt;a href=&#34;https://github.com/tonerdo/coverlet&#34;&gt;Coverlet&lt;/a&gt; cross-platform .Net coverage (via its opencover file format).&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve already started working on 1.1.0 while the dotnet 2.1 tools have been working towards stable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better autodetection functionality (including Travis and TeamCity)&lt;/li&gt;
&lt;li&gt;dotcover support&lt;/li&gt;
&lt;li&gt;parallel build support&lt;/li&gt;
&lt;li&gt;add native coverlet support&lt;/li&gt;
&lt;li&gt;Bug fixes that didn&amp;rsquo;t make it to 1.0.0&lt;/li&gt;
&lt;li&gt;Complete and test Enterprise support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully, it won&amp;rsquo;t be soon before long that you will see an Announcing 1.1.0 Post.&lt;/p&gt;
&lt;p&gt;Interested in following progress on this? I have a twitter account &lt;a href=&#34;https://twitter.com/coverallsdotnet&#34;&gt;@coverallsdotnet&lt;/a&gt; That I am trying to be more proactive with.  You can also track progress on the &lt;a href=&#34;https://github.com/csMACnz/coveralls.net&#34;&gt;GitHub Project&lt;/a&gt;.  Contributions welcome, though I hear I&amp;rsquo;m a bit of a stickler for quality and such. C&amp;rsquo;est la vie.&lt;/p&gt;
&lt;p&gt;The irony of a coverage publishing tool only having 42% coverage wasn&amp;rsquo;t lost on me, so I got it up to 74%. Soon enough I should get that to 100%. Probably just in time for a version 2.0.0.&lt;/p&gt;
&lt;h3 id=&#34;need-more&#34;&gt;Need more?&lt;/h3&gt;
&lt;p&gt;Issues, feature requests or feedback? Just write up an issue on GitHub. I would love to hear your experience of using the tool, and I would love to expand the supported coverage formats to include your favourite tool.&lt;/p&gt;
&lt;p&gt;Thanks for using it! It makes me more inclined to make it awesome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>monocov &#43; Travis-CI = WINNING</title>
      <link>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</link>
      <pubDate>Sun, 08 Feb 2015 15:29:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</guid>
      <description>&lt;p&gt;After much frustration, I now have &lt;a href=&#34;https://github.com/mono/monocov&#34;&gt;monocov&lt;/a&gt; running on my Travis-CI build, and I&amp;rsquo;m going to share with you how I did it.&lt;/p&gt;
&lt;p&gt;TL;DR
The coverage results don&amp;rsquo;t seem accurate just yet, but jump to the end to see the full script to get it going on your build.&lt;/p&gt;
&lt;p&gt;As I mentioned in a &lt;a href=&#34;http://blog.csmac.nz/introducing-coveralls-net&#34;&gt;previous post&lt;/a&gt;, I am building a &lt;a href=&#34;https://coveralls.io&#34;&gt;coveralls.io&lt;/a&gt; publisher for .Net code coverage.  This means (to me any way) that I need to support mono coverage as well.  The best suggested coverage tool &lt;a href=&#34;http://www.mono-project.com/docs/debug+profile/profile/code-coverage/&#34;&gt;mentioned online&lt;/a&gt; for mono is monocov, despite being officially unmaintained since May 2011.  But I stuck with it.&lt;/p&gt;
&lt;p&gt;So I started building a &lt;a href=&#34;https://github.com/csMACnz/Coveralls.net-Samples&#34;&gt;sample library&lt;/a&gt; with CI on github and very easily got examples working for AppVeyor on windows.  But I wanted to get monocov working as a sample with Travis-CI before I built support for it.  I found pretty quickly that monocov is not installed on Travis-ci, and in fact there is no package available to install it either that I could find.&lt;/p&gt;
&lt;p&gt;Thanks to github forks, I found someone else had forked and updated the source for monocov to work with a newer Xamarin version of the mono installation.  So naturally I forked this fork so I could make my own changes if necessary.&lt;/p&gt;
&lt;p&gt;Using a few tricks I was able to get my Travis-CI build to clone down the git fork, build it and install it on the build server.  I did have to change a compile setting and set a variable based on &lt;a href=&#34;http://keithnordstrom.com/getting-the-monocov-profiler-to-link-on-ubuntu-13&#34;&gt;this blog post&lt;/a&gt;, and I had to pull down the &lt;a href=&#34;https://www.nuget.org/packages/Mono.Cecil/&#34;&gt;mono.cecil nuget package&lt;/a&gt; so I had the Mono.Cecil.dll file required by the C# side of monocov. I also made to install gtk-sharp2 for the GUI library to build with make, although I don&amp;rsquo;t use it. After all these steps I finally got it to a point where it was installed.  The Travis-CI code ended up using these instructions in the install section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- sudo apt-get install gtk-sharp2
- curl -sS https://api.nuget.org/packages/mono.cecil.0.9.5.4.nupkg &amp;gt; /tmp/mono.cecil.0.9.5.4.nupkg.zip
- unzip /tmp/mono.cecil.0.9.5.4.nupkg.zip -d /tmp/cecil
- cp /tmp/cecil/lib/net40/Mono.Cecil.dll .
- cp /tmp/cecil/lib/net40/Mono.Cecil.dll /tmp/cecil/
- git clone --depth=50 git://github.com/csMACnz/monocov.git ../../csMACnz/monocov
- cd ../../csMACnz/monocov
- cp /tmp/cecil/Mono.Cecil.dll .
- ./configure
- make
- sudo make install
- cd ../../csMACnz/Coveralls.net-Samples 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note I changed directories a few times, and pulled monocov into a directory beside my actual repo build folder.&lt;/p&gt;
&lt;p&gt;To get it to run over my tests, I had to use a couple of options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set the load library path as seen in the &lt;a href=&#34;http://keithnordstrom.com/getting-the-monocov-profiler-to-link-on-ubuntu-13&#34;&gt;blog post&lt;/a&gt; I mentioned earlier.&lt;/li&gt;
&lt;li&gt;&amp;ndash;profile=monocov:outfile=monocovCoverage.cov to get monocov to run and output to a specified file&lt;/li&gt;
&lt;li&gt;,+[GameOfLife],+[GameOfLife.xUnit.Tests] as part of the coverage to specify which assemblies to record coverage for&lt;/li&gt;
&lt;li&gt;/noshadow so it didn&amp;rsquo;t use a temp directory for the results, since it has to locate the dll in step 2&lt;/li&gt;
&lt;li&gt;run a second step afterwards to convert the *.cov file into a folder of detailed xml files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting code for this looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- export LD_LIBRARY_PATH=/usr/local/lib
- mono --debug --profile=monocov:outfile=monocovCoverage.cov,+[GameOfLife],+[GameOfLife.xUnit.Tests] ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./src/GameOfLife.xUnit.Tests/bin/Release/GameOfLife.xUnit.Tests.dll  /noshadow
- monocov --export-xml=monocovCoverage monocovCoverage.cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So whats the next steps? Well now I have actual results I will get &lt;a href=&#34;https://github.com/csMACnz/coveralls.net&#34;&gt;coveralls.net&lt;/a&gt; support written and get it published to nuget and usable on my Travis-CI build, so it is passing.  After that I will look at the accuracy of the existing code, since my initial results haven&amp;rsquo;t really looked that accurate.&lt;/p&gt;
&lt;p&gt;In summary, and If you just skipped to the end, my full &lt;code&gt;travis.yml&lt;/code&gt; file running monocov over my .net project on Travis-CI looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: csharp
solution: ./src/GameOfLife.sln
install:
  - nuget restore ./src/GameOfLife.sln
  - chmod +x ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe
  - sudo apt-get install nunit-console
  - sudo apt-get install gtk-sharp2
  - curl -sS https://api.nuget.org/packages/mono.cecil.0.9.5.4.nupkg &amp;gt; /tmp/mono.cecil.0.9.5.4.nupkg.zip
  - unzip /tmp/mono.cecil.0.9.5.4.nupkg.zip -d /tmp/cecil
  - cp /tmp/cecil/lib/net40/Mono.Cecil.dll .
  - cp /tmp/cecil/lib/net40/Mono.Cecil.dll /tmp/cecil/
  - git clone --depth=50 git://github.com/csMACnz/monocov.git ../../csMACnz/monocov
  - cd ../../csMACnz/monocov
  - cp /tmp/cecil/Mono.Cecil.dll .
  - ./configure
  - make
  - sudo make install
  - cd ../../csMACnz/Coveralls.net-Samples
script:
  - xbuild /p:Configuration=Release ./src/GameOfLife.sln
  - export LD_LIBRARY_PATH=/usr/local/lib
  - mono --debug --profile=monocov:outfile=monocovCoverage.cov,+[GameOfLife],+[GameOfLife.xUnit.Tests] ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./src/GameOfLife.xUnit.Tests/bin/Release/GameOfLife.xUnit.Tests.dll  /noshadow
  - monocov --export-xml=monocovCoverage monocovCoverage.cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope someone finds this useful, and stay tuned for the coveralls.io update.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Coveralls.net</title>
      <link>https://csmacnzblog.github.io/post/introducing-coveralls-net/</link>
      <pubDate>Sat, 24 Jan 2015 14:33:48 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/introducing-coveralls-net/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve built an (almost MVP) code coverage publisher for &lt;a href=&#34;http://coveralls.io&#34;&gt;coveralls.io&lt;/a&gt; from C# code, using opencover coverage results.  Checkout the &lt;a href=&#34;https://github.com/csmacnz/coveralls.net&#34;&gt;github repo&lt;/a&gt; and &lt;a href=&#34;https://www.nuget.org/packages/coveralls.net/&#34;&gt;nuget packages&lt;/a&gt; if you want to use it.  I&amp;rsquo;m even dogfooding it on appveyor as part of my &lt;a href=&#34;https://github.com/csmacnz/coveralls.net/blob/master/build.tasks.ps1#L81&#34;&gt;psake build tasks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So how do you use it?  Well luckily I used &lt;a href=&#34;https://github.com/docopt/docopt.net&#34;&gt;docopts.net&lt;/a&gt; to give you a bit of a command line experience while you use it, but the gist is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;csmacnz.Coveralls.exe --opencover -i opencovertests.xml --repoToken &amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot; --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_JOB_ID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will locate the xml file opencovertests.xml as a result from running opencover on your c# project, and publish it to your coveralls project based on the repoToken &amp;ldquo;abcdefghijklmnopqrstuvwxyz&amp;rdquo; (using your repo token found on your coveralls.io project page) along with the git commit and branch details pulled out of appveyor.&lt;/p&gt;
&lt;p&gt;So what does this mean to you? How will you use it? Well you can replace the appveyor environment variables above with the actual values found in your build server, get your repo token from coveralls.io, and plus this in on top of your existing opencover coverage CI.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t currently have opencover hooked up, there are tutorials all over the place for your specific build server, I&amp;rsquo;ll leave you to figure out the best way to get this running.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t use/want to use opencover? The next steps for me is to get other coverage reports working with coveralls.net so stay tuned, or go +1 some of my features listed in the &lt;a href=&#34;https://github.com/csmacnz/coveralls.net/issues&#34;&gt;repository issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For me, the next steps is to test this works on my other projects so that I will be in the same situation as anyone else who wants to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hey, I found this thing called Coveralls.io</title>
      <link>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</link>
      <pubDate>Sun, 14 Dec 2014 19:50:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</guid>
      <description>&lt;p&gt;In my pursuit to &lt;a href=&#34;//blog.csmac.nz/gulp-vs-net/&#34;&gt;find a build task runner for my code coverage&lt;/a&gt; I stumbled on this whole other side of the internet I didn&amp;rsquo;t know about (from a .Net developer&amp;rsquo;s perspective). I&amp;rsquo;ve been using &lt;a href=&#34;http://www.appveyor.com/&#34;&gt;AppVeyor.com&lt;/a&gt; for my open-source CI build, which is a great option for anyone with a project on the Microsoft Stack. The cool thing about this (and other similar services) is that if you have an open source project on GitHub, you can use these services with your project for free!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m aware this isn&amp;rsquo;t new, and there are others like &lt;a href=&#34;http://travis-ci.org/&#34;&gt;Travis-CI.org&lt;/a&gt; which run all the other platforms, but I didn&amp;rsquo;t realise how prolific it really was! Especially how exclusive of microsoft languages they all are. Travis-CI for instance, doesn&amp;rsquo;t seem to support .Net by looking on their &lt;a href=&#34;http://docs.travis-ci.com/&#34;&gt;docs page&lt;/a&gt;, though there does seem to be &lt;a href=&#34;http://docs.travis-ci.com/user/languages/csharp/&#34;&gt;mono support in beta&lt;/a&gt; (and that didnt exist when i looked a week ago, so will keep an eye on this).&lt;/p&gt;
&lt;p&gt;But my main reason for this post, is that I found this cool new (to me any way) Continuous Code Coverage host called &lt;a href=&#34;https://coveralls.io/&#34;&gt;coveralls.io&lt;/a&gt;. With a cool name like that, and a badge for my project, I&amp;rsquo;m sold. But wait, lets check &lt;a href=&#34;https://coveralls.zendesk.com/hc/en-us&#34;&gt;those docs&lt;/a&gt; again.  Yip as I thought, no C# support.  They even have C/C++, this is wrong!&lt;/p&gt;
&lt;p&gt;Ah but whats this? They have an api? And they want you to add missing support? I think I have to help with this. So now I have looked at the java and python implementations, a little bit of the api documentation, and I now have a project placeholder to support C# from various Code Coverage xml output formats to post that data up to coveralls, at &lt;a href=&#34;https://github.com/csmacnz/coveralls.net&#34;&gt;coveralls.net on github&lt;/a&gt;.  I&amp;rsquo;ve even got my badges, for coveralls.io ready to go.&lt;/p&gt;
&lt;p&gt;So fastforward another week and I have a working prototype done. It&amp;rsquo;s even showing &lt;a href=&#34;https://coveralls.io/r/csMACnz/coveralls.net&#34;&gt;coverage on coveralls.io&lt;/a&gt;, supporting opencover xml format.&lt;/p&gt;
&lt;p&gt;So whats left now? finish building it to be reusable by my other projects, publish it to nuget and chocolately and wherever else I need to, and start getting people integrating it into their .Net builds. Probably build out other C# coverage report formats as well, so your not forced to use opencover. Wish me luck!&lt;/p&gt;
&lt;h6 id=&#34;small-side-note&#34;&gt;small side note&lt;/h6&gt;
&lt;p&gt;So I also found this other continuous code quality metrics thing for python called &lt;a href=&#34;https://landscape.io/&#34;&gt;landscape.io&lt;/a&gt;. When will we see this type of thing available for .Net as well? Turns out right now. Check out
&lt;a href=&#34;https://scan.coverity.com/projects/3696&#34;&gt;Coverity Scan Static Analysis&lt;/a&gt; (&lt;a href=&#34;https://scan.coverity.com/projects/3696&#34;&gt;mine&lt;/a&gt; needs you to create an account to use, but no permissions to view.)&lt;/p&gt;
&lt;p&gt;And two more for fun: &lt;a href=&#34;https://waffle.io/&#34;&gt;waffle.io&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://readthedocs.org/&#34;&gt;readthedocs.org&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>