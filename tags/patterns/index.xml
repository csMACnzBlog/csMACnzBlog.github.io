<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patterns on csMACnz&#39;s Blog</title>
    <link>https://blog.csmac.nz/tags/patterns/</link>
    <description>Recent content in Patterns on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blog.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blog.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 08 Jul 2019 06:00:00 +0000</lastBuildDate><atom:link href="https://blog.csmac.nz/tags/patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Snuffleupagus-Oriented Programming</title>
      <link>https://blog.csmac.nz/post/snuffleupagus-oriented-programming/</link>
      <pubDate>Mon, 08 Jul 2019 06:00:00 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/snuffleupagus-oriented-programming/</guid>
      <description>&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;An impromptu introduction to Snuffleupagus-Oriented Programming (SOP): &lt;a href=&#34;https://t.co/jPkjPRgqQr&#34;&gt;https://t.co/jPkjPRgqQr&lt;/a&gt;&lt;/p&gt;&amp;mdash; Casey Muratori (@cmuratori) &lt;a href=&#34;https://twitter.com/cmuratori/status/623332420855541764?ref_src=twsrc%5Etfw&#34;&gt;July 21, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Sometimes naming something is the best way to start talking about a topic that lots of people do but don&amp;rsquo;t realise or haven&amp;rsquo;t pulled together as a concept. This is one of those ideas that finally has a good (?) name.&lt;/p&gt;
&lt;p&gt;How do you build out a new API? Here we are meaning programming contracts effectively.  You can hack away until you have something functional, and then start consuming it. Better yet, build it out as code to do a job and then ship it to someone else to try and use.&lt;/p&gt;
&lt;p&gt;Most developers get to a point where they see the value in having contract design up front across team boundaries, layer boundaries, reusable components, HTTP/Soap boundaries etc. An evolved design for these will never be as good as an intentional one. And on the flip side, we have all used clunky library APIs in various languages, BCL or otherwise.&lt;/p&gt;
&lt;h3 id=&#34;what-is-mr-snuffleupagus&#34;&gt;What is Mr Snuffleupagus&lt;/h3&gt;
&lt;p&gt;The name comes from Sesame Street. Muppets basically. Big Bird and Bert and Ernie, Elmo etc. There was a storyline decades ago where Big Bird kept seeing Mr Snuffleupagus and talking about him, but no one else ever saw him. They concluded it was an imaginary creature for a long time. In the show, it was very ambiguous what the truth was. Eventually, they actually saw the Snuffleupagus too and concluded it wasn&amp;rsquo;t imaginary after all. &lt;a href=&#34;https://www.smithsonianmag.com/smart-news/brief-history-sesame-streets-snuffleupagus-iidentity-crisis-180957351/&#34;&gt;More here.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;enter-sop&#34;&gt;Enter SOP&lt;/h3&gt;
&lt;p&gt;The ideas from this story match an approach to building your API.&lt;/p&gt;
&lt;p&gt;First, we are going to imagine that what we want to use exists. Then we are going to write code against the API, crafting our usage case, without implementing anything.  Once we are happy that our API is usable, we implement it and make it actually exist, make it real. There may be a few tweaks once the realities and limitations of the implementation are taken into account, but the idea is to try and keep it as usable as the original usage cases as possible, usability intact.&lt;/p&gt;
&lt;div style=&#34;padding-top:72.800%;position:relative;&#34;&gt;&lt;iframe src=&#34;https://gifer.com/embed/9YHg&#34; width=&#34;100%&#34; height=&#34;100%&#34; style=&#39;position:absolute;top:0;left:0;&#39; frameBorder=&#34;0&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gifer.com&#34;&gt;via GIFER&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;tdd&#34;&gt;TDD&lt;/h3&gt;
&lt;p&gt;This is a great candidate approach to work with TDD as well, just with more implementation code along the way to produce passing tests. Like Mr Snuffleupagus, this implementation code is imaginary until you have enough test cases to make it real, and refactor.&lt;/p&gt;
&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;Go forth and start sharing SOP, Snuffleupagus-Oriented Programming. Imagine, Build Usage, Make it Real.  Thanks &lt;a href=&#34;https://twitter.com/cmuratori&#34;&gt;Casey Muratori&lt;/a&gt; for coining the term and making it stick. See more of his programming on &lt;a href=&#34;https://handmadehero.org/&#34;&gt;HandMade Hero&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/handmadehero&#34;&gt;YouTube&lt;/a&gt;), and his company &lt;a href=&#34;https://mollyrocket.com/nexus&#34;&gt;Molly Rocket&lt;/a&gt; for games and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Service Locator base class anti-pattern</title>
      <link>https://blog.csmac.nz/post/the-service-locator-base-class-antipattern/</link>
      <pubDate>Sun, 05 Jul 2015 18:04:40 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/the-service-locator-base-class-antipattern/</guid>
      <description>&lt;p&gt;Something I have seen a lot of over the last few years is a lot of service location, particularly in base classes, particularly in Controllers. But not limited to there, it can happen anywhere we see base classes.&lt;/p&gt;
&lt;h2 id=&#34;short-rant-about-inheritance&#34;&gt;Short rant about inheritance&lt;/h2&gt;
&lt;p&gt;The longer I do this, the more I find that base classes are not meant to be overused. I find that if we are pumping base classes full of code, we should probably be breaking them out into smaller classes, and including them in the derived versions that actually use that functionality. If it is a cross-cutting concern, probably using attributes would be a cleaner solution.  Composition over Inheritance makes testing much simpler IMHO.&lt;/p&gt;
&lt;h2 id=&#34;short-rant-about-service-location&#34;&gt;Short rant about service location&lt;/h2&gt;
&lt;p&gt;Containers have no place in Unit Tests. Let me clarify. The application&amp;rsquo;s IOC container has no place in the unit tests. (AutoFixture can be a helpful tool, but is also a smell). The fact that you use a service locator couples your code to &lt;em&gt;that&lt;/em&gt; service locator, and now it is required in your tests to get things to run. Using a service locator hides from you, the consumer of that object, the dependencies that your object requires. If these are hidden in a base class or extension method, you have no way to discover that the dependency is there until your tests (or worst case, your application) comes crashing down around you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;em&gt;/Rant&lt;/em&gt;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-antipattern&#34;&gt;The antipattern&lt;/h2&gt;
&lt;p&gt;So the antipattern goes like this: We have N classes, with N types of functionality. They derive from a base class, which contains many services that are used across all N derived classes. These services are &lt;strong&gt;Service Located&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class BaseController : Controller
{
    public ICustomerService CustomerService
    {
        get
        {
            return Service.Locate&amp;lt;ICustomerService&amp;gt;();
        }
    }
    
    public IOrderService OrderService
    {
        get
        {
            return Service.Locate&amp;lt;IOrderService&amp;gt;();
        }
    }
}

public class OrderController : BaseController 
{
    public Order Get(int orderId)
    {
        return OrderService.GetOrderById(orderId);
    }
}

public class CustomerController : BaseController 
{
    public Customer Get(int customerId)
    {
        return CustomerService.GetOrderById(orderId);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a representative sample of services and controllers. You can imagine that the real number of services in the base class could be anywhere between 5 and 20 services, or more, and that there could be 5 to 20, or more, controllers as well.&lt;/p&gt;
&lt;p&gt;Also, I have intentionally used Service.Locate because there are many ways to do this approach. You could use some generic &lt;em&gt;Global Static Method&lt;/em&gt; or some container specific &lt;em&gt;Global Static variable&lt;/em&gt;. It doesn&amp;rsquo;t matter which, both are just as bad as each other.&lt;/p&gt;
&lt;p&gt;So Why is this so bad? Well, when It comes to testing, your Controller now has hidden dependencies. We can no longer tell from the constructor what it requires to be provided to get work done.  But they aren&amp;rsquo;t required right, it is able to resolve them itself?  No, not really.&lt;/p&gt;
&lt;p&gt;There is a dependency on the Service Locator class &lt;code&gt;Service&lt;/code&gt; that has to be configured just right for the actual dependencies to show up. And what&amp;rsquo;s worse than hidden dependencies? Singleton dependencies that break your ability to run your tests in parallel.  If you try and run two tests against two controller instances (or any other type that shares the singleton dependency) then your test may periodically fail, from a race condition with the other test. It is never fun to have false negatives in your test suite, you lose all trust and won&amp;rsquo;t see a true negative as a real problem.&lt;/p&gt;
&lt;h3 id=&#34;incorrect-solution-1&#34;&gt;(Incorrect) Solution 1&lt;/h3&gt;
&lt;p&gt;Ok, so we see the problems, how should we solve them? Let&amp;rsquo;s try fixing the singleton problem with dependency injection through the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class BaseController : Controller
{
    private ICustomerService _customerService;
    public ICustomerService CustomerService
    {
        get
        {
            return _customerService;
        }
    }
    
    private IOrderService _orderService;
    public IOrderService OrderService
    {
        get
        {
            return _orderService;
        }
    }
    
    protected BaseController(
        ICustomerService customerService,
        IOrderService orderService)
    {
        _customerService = customerService;
        _orderService = orderService;
    }
}

public class OrderController : BaseController 
{
    public OrderController(
        ICustomerService customerService,
        IOrderService orderService)
        : base(customerService, orderService)
    {
    }
    
    public Order Get(int orderId)
    {
        return OrderService.GetOrderById(orderId);
    }
}

public class CustomerController : BaseController 
{
    public CustomerController(
        ICustomerService customerService,
        IOrderService orderService)
        : base(customerService, orderService)
    {
    }
    
    public Customer Get(int customerId)
    {
        return CustomerService.GetOrderById(orderId);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By my rough estimate, we doubled the code, but we did expose our dependencies through the constructor right? Again, not really.&lt;/p&gt;
&lt;p&gt;If we take a closer look, we have a dependency on the BaseController for the &lt;code&gt;IOrderService&lt;/code&gt;, but we never actually use it on the derived CustomerController. With more and more services loaded up on the base class, the worse this gets. The more likely we are that more of the dependencies the base class requires are not used by any particular controller.&lt;/p&gt;
&lt;p&gt;If you are using a DI Container, you won&amp;rsquo;t feel the pain of creating one of these either, but the pain is still there. This is one of my Pet Peeves with Containers, they hide a lot of the pain from bad usages that only get worse over time, instead of annoying you enough to fix the problem fast.&lt;/p&gt;
&lt;p&gt;And what if we need to add a new dependency?  Well, if we add it to the base class, we have to add it to all (5, or maybe 20) Controllers&#39; constructors so that it will compile.  You might not see this as an issue, you just add it to the one that uses the dependency right? Not so. The base class has become a gravity well, all services go there, whether needed by all, or not. It&amp;rsquo;s only logical that the next person along will put their new service there as well.  If there is code in the base class, it may be the only place to add it to surface the functionality to that code.&lt;/p&gt;
&lt;p&gt;This brings me to the next reason base class dependencies are bad.  Not every derived class will use it. So why do they all have it available at all, in the first instance, and have a dependency in their constructor for it in the second instance, if it is not actually a dependency?&lt;/p&gt;
&lt;p&gt;This leads into a huge con for this approach over the previous one: &lt;a href=&#34;http://stackoverflow.com/questions/1299374/what-is-eager-loading&#34;&gt;Over-eager loading&lt;/a&gt;.  At least with the service locator, the instance and all of its dependencies are only loaded when you ask for the service.  With this approach, all dependencies are loaded before they are injected in, which could add a large amount of overhead to creating your controller. And like we said, not every instance is actually even used in this controller at all!  No, don&amp;rsquo;t do this approach if you can help it. (by that I usually mean as a stop-gap solution to a larger refactoring effort. See &lt;a href=&#34;#reality&#34;&gt;Reality&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;the-way-things-should-have-been&#34;&gt;The way things should have been&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s try to implement this solution again, with all of this in mind.  We want our classes to only take dependencies on what they actually use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class OrderController : Controller 
{
    private IOrderService _orderService;

    public OrderController(IOrderService orderService)
    {
        _orderService = orderService;
    }
    
    public Order Get(int orderId)
    {
        return _orderService.GetOrderById(orderId);
    }
}

public class CustomerController : Controller 
{
    private ICustomerService _customerService;

    public CustomerController(ICustomerService customerService)
    {
         _customerService = customerService;
    }
    
    public Customer Get(int customerId)
    {
        return _customerService.GetOrderById(orderId);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can&amp;rsquo;t get away from inheritance completely because of MVC, but we now have one less class to worry about. And in this trivial example, we have the same amount of code. Of course, that bit doesn&amp;rsquo;t necessarily scale, but that&amp;rsquo;s not a problem, really. Have we fixed all our problems? I think so.&lt;/p&gt;
&lt;p&gt;Our controller now takes only the dependencies it needs. We don&amp;rsquo;t need to pass so many things to any particular controller, and It is clear what it actually depends on.  In reality, we might have had to pass the same services to multiple controllers, but that&amp;rsquo;s what composition is all about.&lt;/p&gt;
&lt;p&gt;We no longer have hidden dependencies. Everything a controller needs is passed in. Much easier for testing. You can even run your tests concurrently without the shared static singleton service locator.&lt;/p&gt;
&lt;p&gt;Now since we got rid of the base class, what about any cross-cutting concerns or common code?  Well, it should now become clear that some of that code might need to be a dependency passed into the subset of all controllers that actually use it.  And it that code still needs context-specific knowledge that you can&amp;rsquo;t or don&amp;rsquo;t want to pass in? I suggest looking into Aspect Oriented approaches such as the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.web.mvc.filterattribute(v=vs.118).aspx&#34;&gt;MVC FilterAttribute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But we still have far too many dependencies per controller with this approach right? Well, that depends. I&amp;rsquo;ll hopefully cover this off from the next two sections, but at a high level, you may have mixed concerns in your controller if it still requires many different services. Or perhaps you need to encapsulate some of your business logic out into a new service instead of having it in amongst your MVC logic.  The other option, which is hard to achieve in the existing MVC framework but worth mentioning, is the idea of service injection into methods, as discussed under &lt;a href=&#34;#advancedtopics&#34;&gt;advanced topics&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reality&#34;&gt;Reality&lt;/h2&gt;
&lt;p&gt;In reality, this type of code is probably already in your legacy applications, and It isn&amp;rsquo;t simple to unravel them. It could take several attempts to transform your code to resemble this type of approach.&lt;/p&gt;
&lt;p&gt;If you do want to tackle this type of refactoring, you would first want to pick one controller, and transform that one first.  This will require code duplication to move your dependencies in, but you should find that not all of them need to be copied over.&lt;/p&gt;
&lt;p&gt;As you refactor out code into attributes and new service classes, think about adding usages from your base class and other controllers at the same time, if the change is small enough to do so.&lt;/p&gt;
&lt;p&gt;Another real-world solution to the Service Location problem, especially for testing is to pass these dependencies in a second constructor and use &lt;em&gt;service location&lt;/em&gt; from the default constructor instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class BaseController : Controller
{
    ...
    
    protected BaseController()
    : this(Service.Locate&amp;lt;ICustomerService&amp;gt;(),Service.Locate&amp;lt;IOrderService&amp;gt;())
    {
    }
    
    protected BaseController(
        ICustomerService customerService,
        IOrderService orderService)
    {
        _customerService = customerService;
        _orderService = orderService;
    }
}

public class OrderController : BaseController 
{
    public OrderController(
        ICustomerService customerService,
        IOrderService orderService)
        : base(customerService, orderService)
    {
    }
    
    public OrderController() : base()
    {
    }
    
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach allows you to fix your concurrent testing issues, even if you can&amp;rsquo;t fix all of your problems straight away.&lt;/p&gt;
&lt;p&gt;If you can&amp;rsquo;t get rid of the base class at all, look for candidates that are only used in some places, and pull these down, so at least new dependencies added will see this approach, and you have a new gravity well approach for others to follow.&lt;/p&gt;
&lt;h2 id=&#34;advanced-topics&#34;&gt;Advanced Topics&lt;/h2&gt;
&lt;p&gt;I said I would mention is service injection into methods.  This is something that containers won&amp;rsquo;t do for you, but there are approaches available in other frameworks and libraries that could allow you to follow a similar pattern. Worst-case an &lt;a href=&#34;https://en.wikipedia.org/wiki/Adapter_pattern&#34;&gt;Adapter&lt;/a&gt; could be used to achieve this as another layer in your MVC, or use Lazy objects to at least simulate the run-time benefits this creates.&lt;/p&gt;
&lt;p&gt;The implementation of the method looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;
public class CustomerController : Controller 
{   
    public Customer Get(int customerId, ICustomerService customerService)
    {
        return CustomerService.GetOrderById(orderId);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As well as our parameters, we pass the services along here as well. This way, our controller method only requires the services it really uses, not all the services for all methods in this controller. As I said, you &lt;em&gt;should&lt;/em&gt; only have services that most of your actions need anyway, of you have a solid single responsibility in this controller.&lt;/p&gt;
&lt;p&gt;The way to simulate some of these benefits, as mentioned before, would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class CustomerController : Controller 
{
    private Lazy&amp;lt;ICustomerService&amp;gt; _customerService;

    public CustomerController(Lazy&amp;lt;ICustomerService&amp;gt; customerService)
    {
         _customerService = customerService;
    }
    
    public Customer Get(int customerId)
    {
        return _customerService.Value.GetOrderById(orderId);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given we have a container, we now we only actually create a service and all of its dependencies in the method where we actually use it, and not anywhere else.  Slight gain, but if you are trying to tidy up your controllers, this little trick could come in useful.&lt;/p&gt;
&lt;h3 id=&#34;parting-words&#34;&gt;Parting words&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ve made it this far, thanks for sticking with me, I know it has been a long one.  What might render this discussion moot, or highly important is this small piece of advice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Separate your rendering/routing/MVC style concerns from your implementation details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Try to keep your controllers void of logic and stick with transforming user data to a payload, passing the payload to a service, and rendering the results from the service. Authorisation and validation might fit better here as well, but not your actual business logic.  This will serve you well for simplifying testing, and less fighting with the framework to make it handle injection, dependencies, inheritance and HTTP concerns within your business rules.&lt;/p&gt;
&lt;p&gt;There are no silver bullets, but if your system is complex, this approach does make testing easier, overall.&lt;/p&gt;
&lt;p&gt;I would like to code up a bigger solution showing all three approaches to stick up on GitHub. We will see if time permits later in the month.&lt;/p&gt;
&lt;h2 id=&#34;update&#34;&gt;Update&lt;/h2&gt;
&lt;p&gt;The mentioned GitHub solution is now available: &lt;a href=&#34;https://github.com/csMacnzBlog/BaseClassAntiPattern&#34;&gt;https://github.com/csMacnzBlog/BaseClassAntiPattern&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More small classes</title>
      <link>https://blog.csmac.nz/post/more-small-classes/</link>
      <pubDate>Sun, 21 Jun 2015 08:49:59 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/more-small-classes/</guid>
      <description>&lt;p&gt;Its a pretty common rule of thumb to avoid monoliths and write more small classes. Think about the solid principles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single responsibility per class. This implies less in it. Smaller.&lt;/li&gt;
&lt;li&gt;Open for extension closed for modification. Take out the things that will change. Smaller.&lt;/li&gt;
&lt;li&gt;Liskov substitution principle says substitutability is the way to go. Easier to ensure when your class is smaller.&lt;/li&gt;
&lt;li&gt;Interface segregation. Smaller interfaces.&lt;/li&gt;
&lt;li&gt;Dependencies being passed in means less surface area accessible or exposed. Smaller.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, some of that might be a stretch, but as a stand-alone rule of thumb, &lt;strong&gt;more small classes&lt;/strong&gt; is a key tenant that helps you meet most if not all of the above principles.&lt;/p&gt;
&lt;p&gt;Here is an example from work today that I think shows the simplicity of this principle, that is often missed or overlooked.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;
&lt;p&gt;We have a class FooService. Now this class is responsible for getting us some Foo. (really need to find a picture of what a Foo actually looks like, the internet thinks it looks like &lt;a href=&#34;http://images.google.com/search?tbm=isch&amp;amp;q=Foo&#34;&gt;a Dave Grohl&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class FooService : IFooService
{
    public Foo GetFoo(CustomerId id)
    {
        Foo foo;
        ... //Actual implementation logic
        return foo
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implementation is not important. It might be a database call, or a restful call, a reading from a hardware device, whatever.&lt;/p&gt;
&lt;p&gt;Now we have this requirement that we are calling the Service from several places (properly injected and scoped of course) but we realise that we are calling it several times per request scope (lets assume this is MVC). We want to be able to reuse the result across the request scope, but not any wider.&lt;/p&gt;
&lt;h3 id=&#34;solution-decision&#34;&gt;Solution Decision&lt;/h3&gt;
&lt;p&gt;One thing we could do, is make a call at the start of the scope, and pass the result along to where it is needed. The problem there would be that we are a modular system and we have 4-5 calls between us and the place we need the value. Also they are down two different use case paths, and everything is constructor injected.  Lets try another approach. Caching.&lt;/p&gt;
&lt;p&gt;Caching is a great way to reuse a result temporarily. In fact I would argue that&amp;rsquo;s exactly what its for. So let&amp;rsquo;s start with the naive version.&lt;/p&gt;
&lt;h3 id=&#34;solution-implementation-the-wrong-way&#34;&gt;Solution Implementation: the wrong way&lt;/h3&gt;
&lt;p&gt;Lets add caching to our class. Should be fairly simple, something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class FooService : IFooService
{
    Dictionary&amp;lt;CustomerId, Foo&amp;gt; _cache = new Dictionary&amp;lt;CustomerId, Foo&amp;gt;();
    public Foo GetFoo(CustomerId id)
    {
        Foo foo;

        if(_cache.ContainsKey(id){
            return _cache[id];
        }

        ... //Actual implementation logic

        _cache[id] = foo;

        return foo
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks fine right? Sure thing, but we should take care of the scope in our container so it gets correctly set to request scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Bind&amp;lt;IFooService&amp;gt;().To&amp;lt;FooService&amp;gt;().InRequestScope();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something resembling a container setup. Cool.&lt;/p&gt;
&lt;p&gt;Why is this the wrong approach?  I have two specific issues with this code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have two concerns to our class now. &lt;em&gt;Retrieving&lt;/em&gt; and &lt;em&gt;Caching&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We separated two parts of our cache configuration, the &lt;em&gt;Where&lt;/em&gt; from the &lt;em&gt;Scope&lt;/em&gt;, across the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first concern is the main point of the article. Subtle violations occur without even realising it (I&amp;rsquo;m guilty of this as much as anyone). We need to constantly ask ourselves what the concerns of a class are, to slowing build up a knowledge of known cases to be on the lookout for. This class has two concerns. We &lt;em&gt;can&lt;/em&gt; separate them, and Ill show how easy that is to do next.&lt;/p&gt;
&lt;p&gt;The second is almost more subtle though. Here, we are separating the same concern, caching, into different places. because the cache logic is internal, you can&amp;rsquo;t see it from where it is used. That is fine, since that is not your concern where you use it. But to configure it, you rely on the container for your IOC framework to be configured correctly. It is not clear from the cache code what the lifetime is, and not clear from the lifetime that it relates to caching.  We need to bring these two pieces of information closer together. Luckily, by pulling out the cache concern from the service, we almost get that for fee. Lets see how.&lt;/p&gt;
&lt;h3 id=&#34;solution-implementation-the-right-way&#34;&gt;Solution Implementation: the right way&lt;/h3&gt;
&lt;p&gt;We start by going back to our original implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class FooService : IFooService
{
    public Foo GetFoo(CustomerId id)
    {
        Foo foo;
        ... //Actual implementation logic
        return foo
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of writing the caching inside the existing class, we create a new &lt;em&gt;wrapper&lt;/em&gt; class instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class FooServiceCacheWrapper : IFooService
{
    private IFooService _actual;

    public FooServiceCacheWrapper(IFooService actual)
    {
    	_actual = actual;
    }

    public Foo GetFoo(CustomerId id)
    {
        Foo foo;

        if(_cache.ContainsKey(id){
            return _cache[id];
        }

        foo = _actual.GetFoo(id);

        _cache[id] = foo;

        return foo
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three key parts to point out in this implementation. It adds almost exactly the same code as we were going to add (no extra work was required to go this alternate root). We didn&amp;rsquo;t have to change the existing code to do it. And third, we are implementing the same interface as the original, and wrapping around it a sort of caching layer. This is almost &lt;a href=&#34;https://en.wikipedia.org/wiki/Aspect-oriented_programming&#34;&gt;AOP&lt;/a&gt;, and is making use of the &lt;a href=&#34;https://en.wikipedia.org/?title=Proxy_pattern&#34;&gt;Proxy Pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second part is in our IOC config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Bind&amp;lt;IFooService&amp;gt;()
    .To&amp;lt;FooServiceCacheWrapper&amp;gt;()
    .UsingConstructorParameter&amp;lt;FooService&amp;gt;()
    .InRequestScope();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Bind&amp;lt;IFooService&amp;gt;()
    .To(c=&amp;gt; new FooServiceCacheWrapper(c.Resolve&amp;lt;FooService&amp;gt;))
    .InRequestScope();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The syntaxes are made up, but the concept is there, and hopefully one looks familiar enough for you to implement in your IOC of choice. We Resolve our existing interface to our new Wrapper class instead. And part of resolving our wrapper class, is to use the concrete version of the service that will do the actual work. This is a simplistic approach similar to the idea of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern&#34;&gt;Chain of responsibility pattern&lt;/a&gt;. We are now composing together our classes to achieve the desired result.&lt;/p&gt;
&lt;p&gt;As a bonus, we see now that the place where we configure our caching around the service, we also define the scope of the cache class. Much nicer to see these two concepts in the same place now, don&amp;rsquo;t you think?&lt;/p&gt;
&lt;p&gt;Hopefully this opens your eyes and starts you thinking. Keep looking out for places where you have been ignoring the single responsibility pattern, and make &lt;strong&gt;more small classes&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ports and Adapters</title>
      <link>https://blog.csmac.nz/post/ports-and-adapters/</link>
      <pubDate>Sun, 03 May 2015 09:45:09 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/ports-and-adapters/</guid>
      <description>&lt;p&gt;It feels like everywhere I turn (in my circles anyway), people are talking about Ports and Adapters, and I thought I would jump on the bandwagon. You may have also heard this architecture called Onion Architecture, or Hexagonal Architecture. All of these are essentially the same idea, under a different name.&lt;/p&gt;
&lt;h3 id=&#34;brief-history&#34;&gt;Brief History&lt;/h3&gt;
&lt;p&gt;When we started solving our problems with a 3 tier architecture, we were trying to solve the problem of isolating our business logic from our persistence and from our presentation. But it wasn&amp;rsquo;t a silver bullet, due to coupling back up the stack of implementation concerns, and the idea has been refined over the last decade or so. The TDD/BDD movement lead us down a more prescriptive approach, as well as &lt;a href=&#34;http://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS&lt;/a&gt; patterns, and basically more and more abstractions. But those who were implementing TDD/BDD had lost the core of the messaging. Specifically, isolate your tests from each other, not your methods from their required dependencies.&lt;/p&gt;
&lt;h3 id=&#34;isolation&#34;&gt;Isolation&lt;/h3&gt;
&lt;p&gt;Mocking frameworks allowed us to test our code with heavy white-box testing, but by coupling our tests to our implementation and making them volatile to change. The intention of TDD was to isolate tests from each other, and be implementation agnostic, not to test isolated chunks of code. We might want to test that our system spits something out into a persistence layer, but we should be more concerned that given valid input, we get the correct success response, and a subsequent request returns the expected values back to us. We also want to focus on business logic, complex rules and interactions, and not presentation or persistence concerns.&lt;/p&gt;
&lt;p&gt;What we ended up with was - at worst-case - a test that checked the tested 2 lines of code did what the two lines of code did (often though duplication of the logic in the test itself) or a test with 90% of it&amp;rsquo;s code there to mock out all 8 (or 20) dependencies. Worse, we would be mocking &lt;code&gt;FooFactory&lt;/code&gt; and &lt;code&gt;BarBuilder&lt;/code&gt;, &lt;code&gt;BazService&lt;/code&gt;, &lt;code&gt;FizzMapper&lt;/code&gt;, and other core parts of the behaviour we are looking at testing. The net result is we test the plumbing and mock the implementation details out. Your experience may vary, but I have seen more than one code base heading into or already in a state similar to this.&lt;/p&gt;
&lt;h3 id=&#34;the-silver-bullet&#34;&gt;The Silver Bullet&lt;/h3&gt;
&lt;p&gt;Ok, there is no such thing, but there is certainly the reverse, a Blunt Knife if you will. Some techniques, once other techniques are learned, often fall into the bad idea category, the &amp;lsquo;doing it this way is almost always the wrong way&amp;rsquo; type of approaches, and I&amp;rsquo;m thinking the mock everything approach falls into this category. But until you see another way, it is hard to see the light.&lt;/p&gt;
&lt;p&gt;This is where Ports and Adapters comes in. The idea here is that we define our system and its behaviours at the centre of our architecture. We then expose ports (think DTOs and interfaces, in a loose shared .DLL sense of the terms) that are the places where we can build user experience on top of the system functionality. We define adapters that fit into these ports, such as our UI. We can even have multiple versions of the adapters we plug in, such as an MVC front-end, and a WPF Desktop or Windows Store application adapter, or perhaps a developer Rest API adapter.&lt;/p&gt;
&lt;p&gt;These ports and the only place we plug anything(as adapters) into our system, so we only need to write our unit tests to test our system for specific behaviours by calling into these ports. Our test methods now become adapters themselves.&lt;/p&gt;
&lt;p&gt;The other side of the Ports and Adapters conversation is the persistence, or outgoing communications, such as logging, external service calls and your database repositories. Where these services plug in are also defined as ports, but instead of your adapter calling into a specified interface, your adapter is an implementation of it. These ports now become the ones you need to &lt;a href=&#34;http://blog.8thlight.com/uncle-bob/2014/05/14/TheLittleMocker.html&#34;&gt;Fake ,Stub or Mock&lt;/a&gt; in your tests, not internal components used by a specific class, such as mappers or builders. Think about how this approach actually isolates your persistence layer implementation details from your domain specific logic?&lt;/p&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;
&lt;p&gt;So how do we test? Well, lets redefine what we mean by Unit Test, and write Unit Tests for our architecture. Unit Test, means testing a Unit of Behaviour in isolation from other tests. This means we need to not use the real implementations of your database adapters and logging frameworks and third party APIs, we can stub or fake these as required. We also won&amp;rsquo;t include our presentation adapters since our test is acting as this type of adapter and calling the ports where the behaviour lives.&lt;/p&gt;
&lt;p&gt;You can still do your traditional black-box testing on internal components, especially some of your purely functional ones, the same way you have been. Ill call these developer tests. In theory these can be useful for TDD, but can be easily deleted later on once unit tests have been written.&lt;/p&gt;
&lt;p&gt;You will also want to make sure you are testing your adapters. You know what your system expects from your adapter, what their interface is for use, so test that when your application calls out to functionality, that it works as expected.&lt;/p&gt;
&lt;p&gt;You will also want to continue with your existing Integration and Automated UI testing as you do now, although hopefully you can see that since you will have more confidence in the business logic being tested, the breadth of these two types of tests can be simpler and more generalised. Think about &lt;a href=&#34;http://martinfowler.com/bliki/TestPyramid.html&#34;&gt;Martin Fowler&amp;rsquo;s Test Pyramid&lt;/a&gt; and avoiding the &lt;a href=&#34;http://watirmelon.com/2012/01/31/introducing-the-software-testing-ice-cream-cone/&#34;&gt;Ice Cream Cone anti-pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is a more detailed write-up on the &lt;a href=&#34;http://alistair.cockburn.us/Hexagonal+architecture&#34;&gt;Hexagonal Architecture Pattern&lt;/a&gt; by Alistair Cockburn for you to read, and searching around for Ports and Adapters, Hexagonal Architecture or Onion Architecture will find a multitude of resources out there.&lt;/p&gt;
&lt;p&gt;Lastly, for a good introduction to this pattern in an iterative example, and very funny talk, check out the video &lt;a href=&#34;https://www.youtube.com/watch?v=WpkDN78P884&#34;&gt;Architecture the Lost Years&lt;/a&gt; by Robert Martin (Uncle Bob), and also his &lt;a href=&#34;http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;Clean Architecture&lt;/a&gt; article for more details across this pattern.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantics vs implementation detail</title>
      <link>https://blog.csmac.nz/post/semantics-vs-implementation-detail/</link>
      <pubDate>Sun, 11 Jan 2015 16:36:29 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/semantics-vs-implementation-detail/</guid>
      <description>&lt;p&gt;When we write out classes and variables, we are pretty good at naming them for what they represent. What I mean by this, is that when we declare a customer first name variable, we don&amp;rsquo;t call it &lt;code&gt;firstNameString&lt;/code&gt;, or &lt;code&gt;cfnString&lt;/code&gt;, and we have also lost the bad habit of &lt;code&gt;firstNameStr&lt;/code&gt; or &lt;code&gt;strFirstName&lt;/code&gt;.  The implementation detail simply doesn&amp;rsquo;t matter. Semantically, it represents the customer&amp;rsquo;s first name, so we use &lt;code&gt;customerFirstName&lt;/code&gt;. Or if we are clearly in the context of the customer we can simply use &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;customer.FirstName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By describing things by what they represent and not how they are represented, we make them more resistant to implementation changes, and we also make it clearer what it is we expect from their use. Why then do we not treat types the same way?&lt;/p&gt;
&lt;p&gt;Well we do, you might say. Sure we name our classes well. We have &lt;code&gt;Customer&lt;/code&gt;, which is an class which has a name that matches it&amp;rsquo;s semantic meaning. But why does it have a constructor signature like this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public Customer(string firstName, string surname, string preferredName, int age, decimal weight, decimal height) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can you tell from this constructor what each positional parameter represents? What if we did the following, is it still obvious?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public Customer(string a, string b, string c, int d, decimal e, decimal f) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok so my example is contrived, but my point is simple. Positional parameters of value types are indistinguishable to the compiler, which neither knows nor cares what they mean, just that the types match so it can compile.  If you called this method using &lt;code&gt;new Customer(&amp;quot;Jones&amp;quot;, &amp;quot;Bobby&amp;quot;, &amp;quot;Robert&amp;quot;, 24, 1.68m, 91.3m)&lt;/code&gt; the compiler doesn&amp;rsquo;t care that you created the lightest giant in the world called Jones Bobby with a nickname of Robert, how is it to know that&amp;rsquo;s not what you meant?  What we need is a way to add semantic meaning to the positional parameters, which adds extra meaning to the data being passed around, and helps us avoid this transposition of errors, among other things.&lt;/p&gt;
&lt;p&gt;I have come across several names for this technique, &lt;em&gt;Tiny Types&lt;/em&gt;, &lt;em&gt;Value Types&lt;/em&gt;, &lt;em&gt;Micro Types&lt;/em&gt; and &lt;em&gt;Semantic Types&lt;/em&gt;.  I think my favourite is Semantic Types personally, but in discussion with others you may come across all of these and more.  The point is that we create new types in our system that might be domain specific, or may be valid across various disparate systems.  These types encapsulate the implementation types used to represent the data and stand in their place as an immutable value object.&lt;/p&gt;
&lt;p&gt;It is worth noting that Enumerations are a kind of tiny type, but you do get some interesting behaviour with these sometimes when the int implementation leaks out, especially when casting and serialisation is involved.&lt;/p&gt;
&lt;p&gt;Lets go back to our example and see what the end result looks like, and work backwards with an implementation. Here is our constructor in more detail this time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public Customer
{
    ... [Auto properties probably here]
    
    public Customer(FirstName firstName, FamilyName familyName, PreferredName preferredName, 
                    Age age, Weight weight, Height height)
    {
    ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok now lets look at what we have here.  The types of the parameters are objects that encapsulate the data they represent. Now whether you split your names like this or have a &lt;em&gt;Name&lt;/em&gt; type that represents this as a whole is up to you, but the point is that you can&amp;rsquo;t mix us the height with the weight since the types won&amp;rsquo;t match, and it won&amp;rsquo;t compile.&lt;/p&gt;
&lt;p&gt;There are other benefits other then transposing parameters.  Overloads that expect different types of data can be created instead of having unique names just for overloading what string represents. If you use calculations on the data, you won&amp;rsquo;t add or subtract things that are not compatible accidentally, like our height and our weight.  Even something as simple as wrapping your entity keys in semantic types means you can&amp;rsquo;t pass a &lt;code&gt;CustomerKey&lt;/code&gt; into a method like &lt;code&gt;public Document[] GetForms(AccountKey key)&lt;/code&gt; because the compiler will catch it for you.  If you need to change your representation, this is also easy, without having to update all references to the implementation type everywhere, say if you need to add precision to your int by using decimal.&lt;/p&gt;
&lt;p&gt;Lets take a look now at what implementing a tiny type might look like.  Basically its an object. It will have a property to expose the primitive implementation, since at some point this will have to interface with something outside your control (see suggested exercises for more on this).  You will also need to overload the equality operations to ensure you can compare these objects without any issue.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Height: IEquatable&amp;lt;Height&amp;gt;
{
    private readonly decimal _value;

    public Height(decimal dataValue)
    {
        _value = dataValue;
    }

    public decimal Value { get { return _value; } }

    public override bool Equals(System.Object obj)
    {
        // If parameter is null return false.
        if (obj == null)
        {
            return false;
        }

        // If parameter cannot be cast to Height return false.
        Height h = obj as Height;
        if ((System.Object)h == null)
        {
            return false;
        }

        // Return true if the fields match:
        return Value == h.Value;
    }

    public bool Equals(Height h)
    {
        // If parameter is null return false:
        if ((object)h == null)
        {
            return false;
        }

        // Return true if the fields match:
        return Value == h.Value;
    }

    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }

    public static bool operator ==(Height a, Height b)
    {
        // If both are null, or both are same instance, return true.
        if (System.Object.ReferenceEquals(a, b))
        {
            return true;
        }

        // If one is null, but not both, return false.
        if (((object)a == null) || ((object)b == null))
        {
            return false;
        }

        // Return true if the fields match:
        return a.Value == b.Value;
    }

    public static bool operator !=(Height a, Height b)
    {
        return !(a == b);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(If your interest, my implementation is based on &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms173147%28v=vs.80%29.aspx&#34;&gt;this msdn guide&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot of code here, so lets look at it in pieces. First its a class with a property value that we can set in the constructor.  We make it a getter only with a read only backing field, making it immutable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Height: IEquatable&amp;lt;Height&amp;gt;
{
    private readonly decimal _value;

    public Height(decimal dataValue)
    {
        _value = dataValue;
    }

    public decimal Value { get { return _value; } }
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make sure we can compare our tiny types in a standard way, we implement a bunch of the comparable implementation details. Specifically we override GetHashCode and Equals.  We also overload the == and != operator to make it even easier to use correctly, and lastly we implement IEquatable&amp;lt;Height&amp;gt; so we can compare two instances of the same type without all the object reference stuff all the time.&lt;/p&gt;
&lt;p&gt;Obviously you could take this approach and build out a generic base class with most of the common logic.  Here is a list of things you might want to try out to get your head around the approach of building these types of objects on your own.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement a generic base class representing a single primitive value wrapped in a Semantic Type.&lt;/li&gt;
&lt;li&gt;Create a T4 template that can read in settings about the name and type and produce classes like these without generics.&lt;/li&gt;
&lt;li&gt;Implement domain specific validations, so your semantic types only support a sub-set of the valid value types (think about email addresses and the string type for instance)&lt;/li&gt;
&lt;li&gt;Make a more complex Semantic Type that has more than one backing field (represent a fraction, or a Point in 3d space for instance)&lt;/li&gt;
&lt;li&gt;Can you get your object to automatically expose it&amp;rsquo;s internal value for you using custom cast operators, instead of using a Value property?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I may look at creating demos on these points, but for now enjoy playing with how these things come together and I hope to see more people using these in projects in the future.&lt;/p&gt;
&lt;p&gt;(See it compare &lt;a href=&#34;https://dotnetfiddle.net/wvpxGJ&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>