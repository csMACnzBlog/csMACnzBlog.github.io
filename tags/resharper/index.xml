<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resharper on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/tags/resharper/</link>
    <description>Recent content in Resharper on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 16 Aug 2015 08:14:28 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/tags/resharper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resharper Shortcuts</title>
      <link>https://csmacnzblog.github.io/post/resharper-shortcuts/</link>
      <pubDate>Sun, 16 Aug 2015 08:14:28 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/resharper-shortcuts/</guid>
      <description><p>Shortcut keys are a huge productivity tool. The longer you can keep your fingers on the keyboard typing without reaching for the mouse, the faster you will get things done.  Using Resharper with Visual Studio is no different.</p>
<h3 id="the-core-concepts">The core concepts</h3>
<h3 id="choices-choices">Choices, Choices&hellip;</h3>
<p>As with most things in live, you have a choice to make.</p>
<p>To make the most of the productivity boost of shortcuts, use an out of the box set, and make sure it is the same set that everyone on your team uses. This way you can be productive on everyone else&rsquo;s machine, not just your own, and can teach the shortcuts to others on your team, without having to know multiple configurations.</p>
<h3 id="resources">Resources</h3>
<p>Jetbrains create these great cheatsheets that you can find and print off, for each of their default mappings.</p>
<p><a href="https://www.jetbrains.com/resharper/help/Reference__Keyboard_Shortcuts.html">https://www.jetbrains.com/resharper/help/Reference__Keyboard_Shortcuts.html</a></p>
<p>latest shortcut cheatsheet link here: <a href="https://www.jetbrains.com/resharper/documentation/documentation.html">https://www.jetbrains.com/resharper/documentation/documentation.html</a></p>
<p><a href="https://www.jetbrains.com/resharper/docs/ReSharper90DefaultKeymap_VS_scheme.pdf">ReSharper 9 Default Keymap: Visual Studio scheme </a>
<a href="https://www.jetbrains.com/resharper/docs/ReSharper90DefaultKeymap_IDEA_scheme.pdf">ReSharper 9 Default Keymap: ReSharper 2.x / IntelliJ IDEA scheme</a></p>
</description>
    </item>
    
    <item>
      <title>Resharper on AppVeyor</title>
      <link>https://csmacnzblog.github.io/post/resharper-on-appveyor/</link>
      <pubDate>Sat, 15 Aug 2015 17:16:08 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/resharper-on-appveyor/</guid>
      <description><p>JetBrains have some great tools. One I am particularly fond of is <a href="https://www.jetbrains.com/resharper/">Resharper</a>. Resharper is a Code Analysis, Refactoring, formatting and all round productivity boosting tool. It falls into the same camp as <a href="https://www.devexpress.com/products/coderush/">CodeRush</a> and <a href="http://www.telerik.com/products/justcode.aspx">JustCode</a>.</p>
<p>If you are using <a href="https://www.jetbrains.com/teamcity/">TeamCity</a>, which is the Continuous Integration server from JetBrains, then you will find build tasks available to run ReSharper&rsquo;s duplicate finder and inspection tools across your solution. This is really helpful, and can even do things like high-water marks on error counts, and failing builds on errors.</p>
<p>But my open source projects don&rsquo;t run on TeamCity, they run on AppVeyor. I get all the benefit out of my ReSharper License on my PC with Visual Studio, but the build server sees none of that. Enter the <a href="https://www.jetbrains.com/resharper/features/command-line.html">Resharper Command Line Tools</a>.</p>
<p>I mentioned the command line tools <a href="/-net-os-6-metrics/#resharpercli">during my open source CI tools series</a> and so thought I would outline how it can be used, and how I&rsquo;ve come to use it with <a href="http://appveyor.com/">AppVeyor</a>, my CI server of choice.</p>
<p>Gotchas</p>
<p>I get this fascinating error intermitently : <a href="https://youtrack.jetbrains.com/issue/RSRP-429298">issue RSRP-429298</a></p>
</description>
    </item>
    
    <item>
      <title>ExternalAnnotations, or how to not depend on jetbrains.annotations.dll</title>
      <link>https://csmacnzblog.github.io/post/externalannotations-or-how-to-not-depend-on-jetbrains-annotations-dll/</link>
      <pubDate>Sun, 02 Aug 2015 08:37:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/externalannotations-or-how-to-not-depend-on-jetbrains-annotations-dll/</guid>
      <description><p>There is some great static analysis stuff that ReSharper does for you.  Specifically around nullability, purity and usage of your code.
From their <em>Code Annotations</em> page in Visual Studio:</p>
<blockquote>
<p>ReSharper Annotations help reduce false positive warnings, explicitly declare purity and nullability in your code, deal with implicit usages of member, support special semantics of APIs in ASP.NET and XAML frameworks and otherwise increase accuracy of ReSharper code inspections.</p>
</blockquote>
<p>Right, what I said. This can be seen whenever you get shown a squiggle under a variable or statement telling you that an expression is always true, or when the signature IntelliSense shows you a <code>[NotNull]</code> annotation beside a parameter or return value.</p>
<p><img src="http://res.cloudinary.com/csmacnz/image/upload/v1437808035/NotNullAnnotation_p97mr2.png" alt="NotNull Annotation Shown by Visual Studio help."></p>
<p><img src="http://res.cloudinary.com/csmacnz/image/upload/v1437807947/NotNullAlwaysTrue_mektau.png" alt="NotNull allows ReSharper to determine a condition is never false."></p>
<p>The obvious (and recommended)  way is to take a dependency on jetbrains.annotations.dll. They have made this simple by making it <a href="https://www.nuget.org/packages/JetBrains.Annotations/">a NuGet package</a>. If you are adding annotations to your own applications, this is really easy. The problem if you are writing a library for public consumption you don&rsquo;t want to be providing extra dependencies that the end user might not actually want or need. Also, if you don&rsquo;t own the code, then you can&rsquo;t change the source in the first place.</p>
<p>Luckily there is another way: *<strong>.ExternalAnnotations.xml</strong>.</p>
<p>Say you have a library that you distribute on NuGet. Your package can include a file beside your DLL that contains all the annotations that you would usually apply using attributes. When Visual Studio loads your DLL, ReSharper is able to recognise the XML file beside it, and load that into the system with all your custom annotation there to give a better experience.</p>
<p>Say you have a library DLL called <code>Beefeater.dll</code>. You would simply create <a href="https://github.com/csMACnz/Beefeater/blob/master/src/Beefeater/Beefeater.ExternalAnnotations.xml">a file</a> called <code>Beefeater.ExternalAnnotations.xml</code> that gets packaged into your NuGet file, in the same folder as the DLL. The naming convention is simply <code>*.ExternalAnnotations.xml</code> where <code>*</code> matches the name of your library without the <code>.dll</code> extension. (Notice the not so subtle plug for my library <a href="https://www.nuget.org/packages/Beefeater">Beefeater</a>. More on that in another post.)</p>
<p>So what do we put in this file?  Well it&rsquo;s based on the <a href="https://msdn.microsoft.com/en-us/library/b2s063f7.aspx">XML Documentation</a> format. You know, the one you use in your comments, that can be exported to produce documentation? If you didn&rsquo;t know, watch out for more on that in a later post as well.  All you really need to know is that it describes the signature of a method and allows you do define attributes against the method, or it&rsquo;s parameters. Wherever you would put the attribute in code, you put it in that place in the file.</p>
<p>Let&rsquo;s look at a specific example:</p>
<pre><code class="language-cs">
public struct NotNull&lt;T&gt;
{
    ...
    public NotNull(T value) : this()
    {
        ...
    }
}

public static class OptionExtensions
{
    ...
    public static void Match&lt;TValue&gt;(
      this Option&lt;TValue&gt; option, 
      Action&lt;TValue&gt; some, 
      Action none)
    {
        ...
    }
}

</code></pre>
<pre><code class="language-xml">&lt;assembly name=&quot;Beefeater&quot;&gt;
    &lt;member name=&quot;M:Beefeater.NotNull`1.#ctor(`0)&quot;&gt;
        &lt;parameter name=&quot;value&quot;&gt;
            &lt;attribute ctor=&quot;M:JetBrains.Annotations.NotNullAttribute.#ctor&quot; /&gt;
        &lt;/parameter&gt;
    &lt;/member&gt;
    &lt;member name=&quot;M:Beefeater.OptionExtensions.Match``1(Beefeater.Option{``0},System.Action{``0},System.Action)&quot;&gt;
        &lt;parameter name=&quot;some&quot;&gt;
            &lt;attribute ctor=&quot;M:JetBrains.Annotations.NotNullAttribute.#ctor&quot; /&gt;
        &lt;/parameter&gt;
        &lt;parameter name=&quot;none&quot;&gt;
            &lt;attribute ctor=&quot;M:JetBrains.Annotations.NotNullAttribute.#ctor&quot; /&gt;
        &lt;/parameter&gt;
    &lt;/member&gt;
    &lt;member name=&quot;P:Beefeater.Result`2.Error&quot;&gt;
        &lt;attribute ctor=&quot;M:JetBrains.Annotations.NotNullAttribute.#ctor&quot; /&gt;
    &lt;/member&gt;
&lt;/assembly&gt;
</code></pre>
<p>We have good examples of a few different features so I will step through them with a bit of an explanation for each.  We start with the assembly, giving its name. Then we list many members inside this tag, one for each method we want to annotate.</p>
<p>To annotate a constructor, We use the <code>M:</code> prefix, to define that this is for a method. We add the full namespace to the type, in this case, our class is <code>Beefeater.NotNull&lt;T&gt;</code>.  Our type is generic, so we use the <code> `1</code> syntax to declare that the type has a single generic type parameter. If we had 2 parameters we would have used <code> `2</code>. Because it is a constructor, we use the #ctor to represent its name.  Our constructor takes one parameter, and it is of type <code>T</code> from the generic, so we use <code> `0</code> to declare the first (zero-based indexing, of course) of the generic types.</p>
<p>Next we have a nested parameter tag. This one declares the name of the parameter and contains any attributes applied to that parameter. The attribute has a <code>ctor</code> attribute where we put the fully qualified name of the constructor we use on that attribute. This is a repeat of the above syntax described for the member name.</p>
<p>Our second method has a few extra bits of information to know.  Firstly, we are using the name .<code>Match``1</code> which is the actually method name since it isn&rsquo;t a constructor, and is generic since the method is generic, like the class was last time. Secondly, with parameters that are known types, we use their fully qualified name. We see the last parameter is a <code>System.Action</code>. The other two are generic types. This took me a while to figure out, but if your method is generic, your parameters are generic, and you need to match these together, you use the <code>{``0}</code> syntax, to say it has a generic argument, of type <code>`0</code>, where <code>`0</code> matches the first argument of the generics from the method (or class).</p>
<p>The last method shows an attribute on the member. This uses the same attribute tag and works the same way as the other attribute tags previous. We just nest it directly under the member, instead of inside a parameter tag.</p>
<p>It was helpful to refer to <a href="https://msdn.microsoft.com/en-us/library/fsbx0t7x%28v=vs.140%29.aspx?f=255&amp;MSPPError=-2147217396">Processing the XML File</a> on MSDN to get a feel for what the type and method signatures look like.</p>
<p>For a list of all the attributes you can use, check out the <a href="https://www.jetbrains.com/resharper/help/Reference__Code_Annotation_Attributes.html">ReSharper Reference on Code Annotation Attributes</a> for a full detailed reference, or the <a href="https://www.jetbrains.com/resharper/features/code_analysis.html#Annotated_Framework">ReSharper features</a> page for a more marketing driven overview description and list of the most significant of the attributes available.</p>
<p>A more detailed article (without the generic help though) can be found on <a href="https://www.jetbrains.com/resharper/help/Code_Analysis__External_Annotations.html">JetBrains help</a>, which is what got me off the ground with most of what I needed to do.</p>
<p>I mentioned there are three ways to use ReSharper static analysis. So what it the third? Well, You can write your own attribute classes, and tell ReSharper about them. You need access to the source code to use this approach as well, but it does remove a dependency on ReSharper specifically. I&rsquo;ll leave it to you to decide if this makes sense over the preferred approach of using the DLL provided.</p>
</description>
    </item>
    
  </channel>
</rss>