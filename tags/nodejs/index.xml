<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on csMACnz&#39;s Blog</title>
    <link>https://blog.csmac.nz/tags/nodejs/</link>
    <description>Recent content in nodejs on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blog.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blog.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 07 Dec 2014 17:41:40 +0000</lastBuildDate><atom:link href="https://blog.csmac.nz/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gulp vs .net</title>
      <link>https://blog.csmac.nz/post/gulp-vs-net/</link>
      <pubDate>Sun, 07 Dec 2014 17:41:40 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/gulp-vs-net/</guid>
      <description>&lt;p&gt;I wanted to add continuous code coverage to my &lt;a href=&#34;https://github.com/csmacnz/BCLExtensions&#34;&gt;little extension library project&lt;/a&gt;, and so realised i would need to run one of nCover, dotCover or openCover from the command line on my build server. This calls for a task based build automation library!&lt;/p&gt;
&lt;p&gt;Because I&amp;rsquo;m started to learn more about this nodejs thing as a .Net developer, I figured I should give one of the build automation projects from there a go, even though my project is a .Net library and I dont need node (even if it is a PCL).&lt;/p&gt;
&lt;h4 id=&#34;a-few-hurdles&#34;&gt;A Few Hurdles&lt;/h4&gt;
&lt;p&gt;So the first major problem is node itself. not a current dependancy from any of the project, so that needed to be installed. Not a big deal, i did have to hack around with powershell to set up node so that npm was recognised, but thats a once off per machine. Then I had to add a package.json file, that was that.&lt;/p&gt;
&lt;p&gt;Next up was gulp, again, not too bad except that I did have issues getting gulp recognised as a command, but a few powershell restarts and some new PATH variables and that was fine too.&lt;/p&gt;
&lt;p&gt;Now to get gulp to build and run my tests. Luckily there is a &lt;a href=&#34;https://www.npmjs.org/package/gulp-msbuild&#34;&gt;gulp-msbuild&lt;/a&gt; task that I could install, which works without much trouble. Unfortunately, there was no gulp-mstest. after much trial and error, I found and used the node package &lt;a href=&#34;https://www.npmjs.org/package/mstest&#34;&gt;mstest&lt;/a&gt;, and jumped some extra hoops to do a manual gulp task for that. I notice that there is a &lt;a href=&#34;https://www.npmjs.org/package/grunt-mstest&#34;&gt;grunt-mstest&lt;/a&gt; available, and a &lt;a href=&#34;https://www.npmjs.org/package/gulp-nunit&#34;&gt;gulp-nunit&lt;/a&gt;, so not too big a deal for others that might be following a similar path.&lt;/p&gt;
&lt;p&gt;I even managed to get a AssemblyInfo rewritter build step as well, which was a nice, but unnecessary bonus at this stage.&lt;/p&gt;
&lt;p&gt;About now, after several hours mucking about, I realised that I had achieved the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduced an unnecessary dependancy on nodeJS&lt;/li&gt;
&lt;li&gt;Added new node-module dependancies to the setup of my build tasks that need downloading&lt;/li&gt;
&lt;li&gt;Require you to spin up an entire node environment, just to shell out to command line applications to build and test my .Net project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I haven&amp;rsquo;t even got to code coverage and already feel I&amp;rsquo;m breaking ground, and will need to build my own node libraries for gulp to run my tests and code coverage.  At this point I also realise since ive been doing the whole thing in powershell, I should just install psake and be done with it.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;If you&amp;rsquo;ve got a web application in .Net and you will need a pipeline for less/sass/typescript/coffeescript/javascript , gulp is a nice way to go, and can even do the build, run the test, package to a zip and/or deploy to your environments for you.  But if all you have is a .Net library with no web requirements whatsoever, I recommend psake, with a little chocolatey for environment dependancies thrown in.&lt;/p&gt;
&lt;h4 id=&#34;for-your-interest&#34;&gt;For your interest&lt;/h4&gt;
&lt;p&gt;You can check out the changes in the following &lt;a href=&#34;https://github.com/csmacnz/BCLExtensions/tree/d04a6a311f78f0fd52b8900af375ee1a15746eee&#34;&gt;Commit&lt;/a&gt; (I&amp;rsquo;m pretty sure it&amp;rsquo;s going to become psake pretty soon.)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>