<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TeamCity on csMACnz&#39;s Blog</title>
    <link>https://blogmigration.csmac.nz/tags/teamcity/</link>
    <description>Recent content in TeamCity on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blogmigration.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blogmigration.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Tue, 25 Oct 2016 00:54:19 +0000</lastBuildDate><atom:link href="https://blogmigration.csmac.nz/tags/teamcity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dotnet &#43; nunit3 &#43; TeamCity success</title>
      <link>https://blogmigration.csmac.nz/post/dotnet/</link>
      <pubDate>Tue, 25 Oct 2016 00:54:19 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/dotnet/</guid>
      <description>&lt;p&gt;The new .Net Core CLI has the ability to use &lt;a href=&#34;http://xunit.github.io/docs/getting-started-dotnet-core.html&#34;&gt;xunit&lt;/a&gt; or &lt;a href=&#34;https://github.com/nunit/dotnet-test-nunit&#34;&gt;nunit&lt;/a&gt;. Which is great. For running tests locally.&lt;/p&gt;
&lt;p&gt;I use TeamCity, so I like to see test results showing up, track testing count over time etc. There is a built in way to &lt;a href=&#34;https://confluence.jetbrains.com/display/TCD10/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ImportingXMLReports&#34;&gt;import xml reports&lt;/a&gt; which supports &lt;code&gt;junit&lt;/code&gt; (which is xunit-compatible) and &lt;code&gt;nunit&lt;/code&gt;. But choosing &lt;code&gt;nunit&lt;/code&gt; means support for the nunit2 xml format. And guess what? The new .Net Core test runner for nunit &lt;a href=&#34;https://github.com/nunit/dotnet-test-nunit/issues/75&#34;&gt;only outputs in nunit3 format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the decision makes perfect sense to me. The new format is more expressive, gives more information and is the future. And vendors need to start using it and move away from the old format. But as you can imagine, JetBrains just hasn&amp;rsquo;t gotten around to &lt;a href=&#34;https://youtrack.jetbrains.com/issue/TW-46195&#34;&gt;getting it right yet&lt;/a&gt;. (There is some support in TC 10.0.2 but it seems there might be some teething issues and many of us are still on TC 9.X anyway.)&lt;/p&gt;
&lt;p&gt;So what do I do about this? Solve it with code of course! And the solution is xslt (Hey! it gets the job done ok?)&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://issues.jenkins-ci.org/browse/JENKINS-32999&#34;&gt;some notes on this related Jenkins issue&lt;/a&gt; from &lt;a href=&#34;https://issues.jenkins-ci.org/secure/ViewProfile.jspa?name=tenwit&#34;&gt;Paul Hicks&lt;/a&gt;, I have this xslt page (with a small tweak to fix a value casing issue):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;xsl:stylesheet version=&amp;quot;2.0&amp;quot; xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&amp;gt;
  &amp;lt;xsl:output method=&amp;quot;xml&amp;quot; indent=&amp;quot;yes&amp;quot;/&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;/test-run&amp;quot;&amp;gt;
    &amp;lt;testsuites tests=&amp;quot;{@testcasecount}&amp;quot; failures=&amp;quot;{@failed}&amp;quot; disabled=&amp;quot;{@skipped}&amp;quot; time=&amp;quot;{@duration}&amp;quot;&amp;gt;
      &amp;lt;xsl:apply-templates/&amp;gt;
    &amp;lt;/testsuites&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;test-suite&amp;quot;&amp;gt;
    &amp;lt;xsl:if test=&amp;quot;test-case&amp;quot;&amp;gt;
      &amp;lt;testsuite tests=&amp;quot;{@testcasecount}&amp;quot; time=&amp;quot;{@duration}&amp;quot; errors=&amp;quot;{@testcasecount - @passed - @skipped - @failed}&amp;quot; failures=&amp;quot;{@failed}&amp;quot; skipped=&amp;quot;{@skipped}&amp;quot; timestamp=&amp;quot;{@start-time}&amp;quot;&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;name&amp;quot;&amp;gt;
          &amp;lt;xsl:for-each select=&amp;quot;ancestor-or-self::test-suite/@name&amp;quot;&amp;gt;
            &amp;lt;xsl:value-of select=&amp;quot;concat(., &#39;.&#39;)&amp;quot;/&amp;gt;
          &amp;lt;/xsl:for-each&amp;gt;
        &amp;lt;/xsl:attribute&amp;gt;
        &amp;lt;xsl:apply-templates select=&amp;quot;test-case&amp;quot;/&amp;gt;
      &amp;lt;/testsuite&amp;gt;
      &amp;lt;xsl:apply-templates select=&amp;quot;test-suite&amp;quot;/&amp;gt;
    &amp;lt;/xsl:if&amp;gt;
    &amp;lt;xsl:if test=&amp;quot;not(test-case)&amp;quot;&amp;gt;
      &amp;lt;xsl:apply-templates/&amp;gt;
    &amp;lt;/xsl:if&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;test-case&amp;quot;&amp;gt;
    &amp;lt;xsl:variable name=&amp;quot;lowerResult&amp;quot; select=&amp;quot;translate(@result,&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;, &#39;abcdefghijklmnopqrstuvwxyz&#39;)&amp;quot;/&amp;gt;
    &amp;lt;testcase name=&amp;quot;{@name}&amp;quot; assertions=&amp;quot;{@asserts}&amp;quot; time=&amp;quot;{@duration}&amp;quot; status=&amp;quot;{$lowerResult}&amp;quot; classname=&amp;quot;{@classname}&amp;quot;&amp;gt;
      &amp;lt;xsl:if test=&amp;quot;@runstate = &#39;Skipped&#39; or @runstate = &#39;Ignored&#39;&amp;quot;&amp;gt;
        &amp;lt;skipped/&amp;gt;
      &amp;lt;/xsl:if&amp;gt;
      
      &amp;lt;xsl:apply-templates/&amp;gt;
    &amp;lt;/testcase&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;command-line&amp;quot;/&amp;gt;
  &amp;lt;xsl:template match=&amp;quot;settings&amp;quot;/&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;output&amp;quot;&amp;gt;
    &amp;lt;system-out&amp;gt;
      &amp;lt;xsl:value-of select=&amp;quot;output&amp;quot;/&amp;gt;
    &amp;lt;/system-out&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;stack-trace&amp;quot;&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;test-case/failure&amp;quot;&amp;gt;
    &amp;lt;failure message=&amp;quot;{./message}&amp;quot;&amp;gt;
      &amp;lt;xsl:value-of select=&amp;quot;./stack-trace&amp;quot;/&amp;gt;
    &amp;lt;/failure&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;test-suite/failure&amp;quot;/&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;test-case/reason&amp;quot;&amp;gt;
    &amp;lt;skipped message=&amp;quot;{./message}&amp;quot;/&amp;gt;
  &amp;lt;/xsl:template&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;test-suite/reason&amp;quot;/&amp;gt;

  &amp;lt;xsl:template match=&amp;quot;properties&amp;quot;/&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can use this in a TeamCity runner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$xslt = new-object system.xml.xsl.xslcompiledtransform
$xslt.load(&#39;%system.teamcity.build.workingDir%\nunit3-junit.xslt&#39;)
$xslt.Transform(&#39;%system.teamcity.build.workingDir%\TestResult.xml&#39;, &#39;%system.teamcity.build.workingDir%\TransformedTestResult.xml&#39;)
Write-Host &amp;quot;##teamcity[importData type=&#39;junit&#39; path=&#39;TransformedTestResult.xml&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is PowerShell, and so this works well under windows.&lt;/p&gt;
&lt;p&gt;But our latest thing is .Net Core in Docker containers on Linux, right? (right?) So we don&amp;rsquo;t have PowerShell available. And it also seems that &lt;a href=&#34;https://github.com/dotnet/corefx/issues/5593&#34;&gt;there is currently no xslt support in .Net Core&lt;/a&gt;, so that option is out. But there is another way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install libsaxon-java
saxon-xslt -o TransformedTestResult.xml TestResult.xml nunit3-junit.xslt
echo &amp;quot;##teamcity[importData type=&#39;junit&#39; path=&#39;TransformedTestResult.xml&#39;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may want to just run the &lt;code&gt;apt-get&lt;/code&gt; command on all your agents, rather than putting it into your build step.&lt;/p&gt;
&lt;p&gt;And with that, we can publish our test results to TeamCity on Windows and on Linux build agents.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TeamCity, GitHub and Pull Requests</title>
      <link>https://blogmigration.csmac.nz/post/teamcity-github-and-pull-requests/</link>
      <pubDate>Mon, 06 Apr 2015 12:29:27 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/teamcity-github-and-pull-requests/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been having fun setting up TeamCity builds, specifically trying to run a static analysis build that shows it&amp;rsquo;s results on a pull request. This lead me to discover some issues with the built-in TeamCity support.&lt;/p&gt;
&lt;p&gt;It is really easy to set up a build task that runs PowerShell as its build step. With this I can arbitrarily run code and get static analysis checking. It is even easy to push the results back to GitHub using the api (see the &lt;a href=&#34;https://developer.github.com/v3/repos/statuses/&#34;&gt;Statuses api on GitHub&lt;/a&gt; for just how easy). Again it is easy to trigger a build off of the &amp;lsquo;special&amp;rsquo; pull request branch github uses. A guide to getting all of these links working is &lt;a href=&#34;http://blog.jetbrains.com/teamcity/2013/02/automatically-building-pull-requests-from-github-with-teamcity/&#34;&gt;available on the teamcity blog&lt;/a&gt;. But triggering the git source control checking on TeamCity turned out the be the hard bit.&lt;/p&gt;
&lt;p&gt;There are Webhooks in GitHub. There are also Service Hooks. There is a &lt;a href=&#34;https://github.com/github/github-services/blob/master/lib/services/teamcity.rb&#34;&gt;TeamCity Service Hook&lt;/a&gt;. Unfortunately there are issues with both that requires some third set of code to actually make it work. Here is why.&lt;/p&gt;
&lt;p&gt;You would think that the existing team city hook would be exactly what you need. In the settings of your repository, you can configure this, with credentials, to either start a build, or just check for changes on the associated VCS Root. This check may actually trigger a build, depending on how your build triggers are set up.  The problem is that only the &lt;strong&gt;&amp;ldquo;push&amp;rdquo;&lt;/strong&gt; event will trigger this service hook to fire off.  Why is this an issue for Pull Requests? Because creating a Pull Request creates the &lt;strong&gt;&amp;ldquo;pull request&amp;rdquo;&lt;/strong&gt; event. This means that creating a pull request does not trigger a git check for changes, and so doesn&amp;rsquo;t trigger the Pull Request to run the build, which won&amp;rsquo;t publish the results back to the Pull Request.&lt;/p&gt;
&lt;p&gt;Ok, lets try the custom Web Hooks. Still a no-go. GitHub Web Hooks are ultra flexible. There is &lt;a href=&#34;https://developer.github.com/enterprise/2.1/webhooks/&#34;&gt;great documentation&lt;/a&gt; on setting up a Webhook. It event supports Secrets for signing, specifying specific events, and which format you want it to give you the information in.  But its a &lt;strong&gt;PUSH&lt;/strong&gt;.  This means you need a particular endpoint that receives that push, and processes it&amp;rsquo;s payload. There is nothing on TeamCity that matches that description.  You will have to write something to catch that response and trigger the behaviour you want to see happen.&lt;/p&gt;
&lt;p&gt;Now don&amp;rsquo;t get me wrong, this is exactly what you would expect. You need to determine what the business logic to respond to the event should be. But it means to solve my Pull Request problem, I now need to actually build and host this thing to make it all work.&lt;/p&gt;
&lt;p&gt;So for anyone else wondering why the existing tutorials don&amp;rsquo;t trigger your PR builds automatically, now you know why.  Enjoy building a middleman to make TeamCity do what you want as a result of what GitHub sends you :)  I suggest you read &lt;a href=&#34;https://github.com/github/github-services/blob/master/lib/services/teamcity.rb&#34;&gt;the implementation of the existing service&lt;/a&gt; for some ideas of what your middleman might look like.  This was highlighted for us even more glaringly, since we only trigger a forced fetch on TeamCity every 24 hours, so it would only run my build on a PR if I manually triggered it (or someone else happened to accept a merge or push something directly to GitHub). I&amp;rsquo;m sure this was also made worse by us always doing our Pull Requests between forks and trunk, so only on merging a PR would it trigger an update on TeamCity. And then there are the multiple VCS Roots, that updating one doesn&amp;rsquo;t actually trigger all the related builds. Meh.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>