<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Delivery on csMacnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/tags/continuous-delivery/</link>
    <description>Recent content in Continuous Delivery on csMacnz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 22 Nov 2015 15:05:14 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/tags/continuous-delivery/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On gitversioning subdirectories</title>
      <link>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</link>
      <pubDate>Sun, 22 Nov 2015 15:05:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</guid>
      <description>We have lots of NuGet. Every time we build, we publish a new version. but every build does not change the source code of the code in that version. wouldn&amp;rsquo;t it be nice if we could detect that the subdirectory hasn&amp;rsquo;t changed and so has the same version it did last time we built it?
We use gitversion, so we already have a way to get the version for the current commit.</description>
    </item>
    
    <item>
      <title>Resharper on AppVeyor</title>
      <link>https://csmacnzblog.github.io/post/resharper-on-appveyor/</link>
      <pubDate>Sat, 15 Aug 2015 17:16:08 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/resharper-on-appveyor/</guid>
      <description>JetBrains have some great tools. One I am particularly fond of is Resharper. Resharper is a Code Analysis, Refactoring, formatting and all round productivity boosting tool. It falls into the same camp as CodeRushand JustCode.
If you are using TeamCity, which is the Continuous Integration server from JetBrains, then you will find build tasks available to run ReSharper&amp;rsquo;s duplicate finder and inspection tools across your solution. This is really helpful, and can even do things like high-water marks on error counts, and failing builds on errors.</description>
    </item>
    
    <item>
      <title>TeamCity, GitHub and Pull Requests</title>
      <link>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</link>
      <pubDate>Mon, 06 Apr 2015 12:29:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</guid>
      <description>I&amp;rsquo;ve been having fun setting up TeamCity builds, specifically trying to run a static analysis build that shows it&amp;rsquo;s results on a pull request. This lead me to discover some issues with the built-in TeamCity support.
It is really easy to set up a build task that runs PowerShell as its build step. With this I can arbitrarily run code and get static analysis checking. It is even easy to push the results back to GitHub using the api (see the Statuses api on GitHubfor just how easy).</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 7. Lifecycle Management</title>
      <link>https://csmacnzblog.github.io/post/net-os-7-lifecycle-management/</link>
      <pubDate>Tue, 03 Mar 2015 19:42:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-7-lifecycle-management/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 6. Metrics</title>
      <link>https://csmacnzblog.github.io/post/net-os-6-metrics/</link>
      <pubDate>Sun, 01 Mar 2015 18:37:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-6-metrics/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 5. Documentation</title>
      <link>https://csmacnzblog.github.io/post/net-os-5-documentation/</link>
      <pubDate>Sun, 01 Mar 2015 16:56:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-5-documentation/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 4. Publish &amp; Deploy</title>
      <link>https://csmacnzblog.github.io/post/net-os-4-publish-deploy/</link>
      <pubDate>Sat, 28 Feb 2015 21:43:34 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-4-publish-deploy/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 3. Test</title>
      <link>https://csmacnzblog.github.io/post/net-os-3-test/</link>
      <pubDate>Wed, 25 Feb 2015 20:55:52 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-3-test/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 2. Build</title>
      <link>https://csmacnzblog.github.io/post/net-os-2-build/</link>
      <pubDate>Tue, 24 Feb 2015 20:30:15 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-2-build/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 1. Source Control</title>
      <link>https://csmacnzblog.github.io/post/net-os-1-source-control/</link>
      <pubDate>Sun, 22 Feb 2015 21:13:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-1-source-control/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>monocov &#43; Travis-CI = WINNING</title>
      <link>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</link>
      <pubDate>Sun, 08 Feb 2015 15:29:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</guid>
      <description>After much frustration, I now have monocovrunning on my Travis-CI build, and I&amp;rsquo;m going to share with you how I did it.
TL;DR The coverage results don&amp;rsquo;t seem accurate just yet, but jump to the end to see the full script to get it going on your build.
As I mentioned in a previous post, I am building a coveralls.iopublisher for .Net code coverage. This means (to me any way) that I need to support mono coverage as well.</description>
    </item>
    
    <item>
      <title>Travis-ci, C# and PCL</title>
      <link>https://csmacnzblog.github.io/post/travis-ci-c-and-pcl/</link>
      <pubDate>Tue, 23 Dec 2014 10:10:46 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/travis-ci-c-and-pcl/</guid>
      <description>As any good library should do, I&amp;rsquo;m building my BCLExtensions project(extensions for the .net base class library) using PCL (Portable class library, Profile328 to be exact). It works great on my AppVeyor CI builds, which is a great .Net windows build server.
I recently discovered Travis-CI has added beta C# supportso I connected it up with my GitHub prooject, which is designed to eventually work with mono anyway, and gave it a go.</description>
    </item>
    
    <item>
      <title>Hey, I found this thing called Coveralls.io</title>
      <link>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</link>
      <pubDate>Sun, 14 Dec 2014 19:50:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</guid>
      <description>In my pursuit to find a build task runner for my code coverageI stumbled on this whole other side of the internet I didn&amp;rsquo;t know about (from a .Net developer&amp;rsquo;s perspective). I&amp;rsquo;ve been using AppVeyor.comfor my open-source CI build, which is a great option for anyone with a project on the Microsoft Stack. The cool thing about this (and other similar services) is that if you have an open source project on GitHub, you can use these services with your project for free!</description>
    </item>
    
  </channel>
</rss>
