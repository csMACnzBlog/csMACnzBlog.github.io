<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vscode on csMACnz&#39;s Blog</title>
    <link>https://blog.csmac.nz/tags/vscode/</link>
    <description>Recent content in vscode on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blog.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blog.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 30 Apr 2018 07:00:00 +0000</lastBuildDate><atom:link href="https://blog.csmac.nz/tags/vscode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automated OCD with Stylecop</title>
      <link>https://blog.csmac.nz/post/automated-ocd-with-stylecop/</link>
      <pubDate>Mon, 30 Apr 2018 07:00:00 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/automated-ocd-with-stylecop/</guid>
      <description>&lt;p&gt;I never really got into Stylecop or FXCop.  I did make use of some of the Resharper autoformatting configuration, and static analysis features, and have in the past automated and configured this.&lt;/p&gt;
&lt;p&gt;But since starting to use Visual Studio Code, I have been looking for more and more ways to get the benefits of the Visual Studio Gui tools, but as command-line alternatives.  This leads me to the Roslyn Analyzers.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m gonna preempt typo considerations here. The technology is Rosyln Analyzers, with a Zed (Z), which while hurts my spelling sensibilities, it is a name, so I am going to respect that spelling. Much like using libraries that use color instead of colour, most of us non-US English speakers are used to this anyway. But I digress.&lt;/p&gt;
&lt;h3 id=&#34;a-gentle-reminder&#34;&gt;A gentle reminder&lt;/h3&gt;
&lt;p&gt;This is the cool new latest-and-greatest technology of choice. This means two things: If you are not using the latest dotnet core project structure (1.1 or greater), this might not be for you; and you may come across bugs and errors that require bug reports to be posted, or custom rule configuration to disable some rules you don&amp;rsquo;t like.&lt;/p&gt;
&lt;h3 id=&#34;roslyn-analyzers&#34;&gt;Roslyn Analyzers&lt;/h3&gt;
&lt;p&gt;As of Visual Studio 2015, A new concept of Code Analyzers was introduced. 2017 has taken these further with analyzer APIs supporting automated code fixes as well.&lt;/p&gt;
&lt;p&gt;A great example of this coming to fruition is the latest version of the xUnit NuGet packages.  Since xUnit version 2.3.0 the xUnit.analyzers has been bundled as a dependency with xUnit. When you compile, you will see warnings and errors on how you use their library.  Basically, as well as the interfaces of what you can do with their library, you also get style guidance on how you use them.  For example, if you write a test with an Assert.Equal with boolean parameters, you get an Analyzer error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1524469666/xunitAssertRefactor_xfuulv.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The neat thing about this error is that it is actually a compiler error. You cannot compile and run your code unless you fix it! Amazing!&lt;/p&gt;
&lt;p&gt;(You can find documentation of xUnit&amp;rsquo;s rules here: &lt;a href=&#34;https://xunit.github.io/xunit.analyzers/rules/&#34;&gt;https://xunit.github.io/xunit.analyzers/rules/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;How does this work? Well, NuGet packages are required to be restored before building, or the build fails. Packages result in assembly references, as well as loading MSBuild target files, and also Rosyln Analyzers. All of this is fed into the Roslyn compiler. The compiler executes the Analyzers, and they come out with other Compiler Info/Warning/Error messages. If there are any errors, the build fails. No need for anything more than your compiler to make the most of these checks, which means they not only work with Visual Studio, but also works when using the dotnet cli only as well.&lt;/p&gt;
&lt;p&gt;As you can see above, the analyzers also get loaded by the IDE, and can give red underlining of errors, and, if available, automatic refactoring, too!&lt;/p&gt;
&lt;p&gt;The best bit, because they do not require any extra tools or processes to be run on your code, you fix the issues as you make them, not later on when you run a special manual post-processing script before checking in, or on your Pull Request Builds. No chance of creating code bugs from restyling your code, if you have to fix all before it compiles, and you have to compile before you test your work.&lt;/p&gt;
&lt;h3 id=&#34;the-packages&#34;&gt;The Packages&lt;/h3&gt;
&lt;p&gt;There are a ship-load of analyzers already out there, and more NuGet packages are likely to ship with Analyzers going forward. (As well as the xUnit Analyzers, I also found one distributed with FluentAssertions, and there are many other custom ones.)&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&#34;https://codehollow.com/2016/08/use-code-analyzers-csharp-improve-code-quality/&#34;&gt;an article that pulled out a few key ones&lt;/a&gt; from 18 months ago that are still going strong and have found they provide good coverage to tune your code by.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/code&gt; (an aggregate over several Rosyln Analyzers from Microsft)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;codecracker.CSharp&lt;/code&gt; (The first OpenSource Analyzer project I heard about)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SonarAnalyzer.CSharp&lt;/code&gt; (If you&amp;rsquo;ve used SonarCube in the past, this is their modern approach so analyzers)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StyleCop.Analyzers&lt;/code&gt; (StyleCop new and shiny using the .NET Compiler Platform)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve gone whole-hog and added all four to some of my projects, and so far so good.  Each project is individually tunable, so you can disable rules as needed, and some give better support for the automated refactorings that others do.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/code&gt; is in beta, and chasing the tails of the Roslyn Compiler&amp;rsquo;s newest features, so have a look at &lt;a href=&#34;https://github.com/dotnet/roslyn-analyzers#recommended-version-of-analyzer-packages&#34;&gt;https://github.com/dotnet/roslyn-analyzers#recommended-version-of-analyzer-packages&lt;/a&gt; to make sure you pick the version most compatible with your minimum compiler version your team/project is using.&lt;/p&gt;
&lt;p&gt;Because it is so cutting edge, there is an advanced compiler feature you have to enable to get the rules working with 2.3.0-beta1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;ItemGroup&amp;gt;
  &amp;lt;Features&amp;gt;IOperation&amp;lt;/Features&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The latest on this is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IOperation API shipped in Visual Studio 2017 15.5 Preview5, and we have released fully supported version 2.6.0 analyzer packages that should work on all future compiler/Visual Studio versions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;first-helpful-trick&#34;&gt;First Helpful Trick:&lt;/h4&gt;
&lt;p&gt;If you are producing NuGet packages, you might not want everyone using your project to be forced into using these all themselves.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PrivateAssets=&amp;quot;All&amp;quot;&lt;/code&gt; Solves this!&lt;/p&gt;
&lt;p&gt;If you use this on your Package Reference in the &lt;code&gt;csproj&lt;/code&gt; file, then it will not inherit these dependencies into your built package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.FxCopAnalyzers&amp;quot; Version=&amp;quot;2.3.0-beta1&amp;quot; PrivateAssets=&amp;quot;All&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;second-helpful-trick&#34;&gt;Second Helpful Trick:&lt;/h4&gt;
&lt;p&gt;You have a lot of projects. I don&amp;rsquo;t mean 2-3, I mean a lot.  You have so many &lt;code&gt;csproj&lt;/code&gt; files, that trying to add this to your projects is daunting.&lt;/p&gt;
&lt;p&gt;Enter MSBuild.  There is an under-utilised feature of MSBuild that allows you to add &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build&#34;&gt;Directory.Build.Props&lt;/a&gt; files to your parent directories, and share common settings across your projects. Now that man-handling &lt;code&gt;csproj&lt;/code&gt; files is much calmer and simpler, this is super useful for adding common settings to one place that should be the same across projects. (You can also replace/remove/override these in child folders and &lt;code&gt;csproj&lt;/code&gt; files as well.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Project&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;Authors&amp;gt;csMACnz&amp;lt;/Authors&amp;gt;
    &amp;lt;DebugType&amp;gt;full&amp;lt;/DebugType&amp;gt;
    &amp;lt;NeutralLanguage&amp;gt;en-NZ&amp;lt;/NeutralLanguage&amp;gt;
    &amp;lt;VersionPrefix&amp;gt;0.0.1&amp;lt;/VersionPrefix&amp;gt;
    &amp;lt;TreatWarningsAsErrors&amp;gt;true&amp;lt;/TreatWarningsAsErrors&amp;gt;
    &amp;lt;Company&amp;gt;csMACnz&amp;lt;/Company&amp;gt;
    &amp;lt;Product&amp;gt;MyWidgetFizzBuzz&amp;lt;/Product&amp;gt;
    &amp;lt;PackageTags&amp;gt;Fizz; Buzz&amp;lt;/PackageTags&amp;gt;
    &amp;lt;Copyright&amp;gt;Copyright Â© csMACnz 2018&amp;lt;/Copyright&amp;gt;
    &amp;lt;LangVersion&amp;gt;7.1&amp;lt;/LangVersion&amp;gt;
    &amp;lt;Features&amp;gt;IOperation&amp;lt;/Features&amp;gt;
    &amp;lt;CodeAnalysisRuleSet&amp;gt;$(MSBuildThisFileDirectory)/ruleset.ruleset&amp;lt;/CodeAnalysisRuleSet&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(Configuration)|$(Platform)&#39;==&#39;Debug|AnyCPU&#39;&amp;quot;&amp;gt;
    &amp;lt;DebugSymbols&amp;gt;True&amp;lt;/DebugSymbols&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
   
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.FxCopAnalyzers&amp;quot; Version=&amp;quot;2.3.0-beta1&amp;quot;  PrivateAssets=&amp;quot;All&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;SonarAnalyzer.CSharp&amp;quot; Version=&amp;quot;6.6.0.3969&amp;quot; PrivateAssets=&amp;quot;All&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;codecracker.CSharp&amp;quot; Version=&amp;quot;1.0.3&amp;quot; PrivateAssets=&amp;quot;All&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;StyleCop.Analyzers&amp;quot; Version=&amp;quot;1.1.0-beta004&amp;quot; PrivateAssets=&amp;quot;All&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As well as adding the selected analyzers to every project, this can handle common metadata like &lt;code&gt;Company&lt;/code&gt;, &lt;code&gt;Product&lt;/code&gt;, &lt;code&gt;Authors&lt;/code&gt;, &lt;code&gt;Copyright&lt;/code&gt; and compiler options such as &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt;, &lt;code&gt;DebugType&lt;/code&gt;, &lt;code&gt;LangVersion&lt;/code&gt; and &lt;code&gt;VersionPrefix&lt;/code&gt;.  You are actually removing more clutter from your &lt;code&gt;csproj&lt;/code&gt; files, making them super slimmed down.&lt;/p&gt;
&lt;h3 id=&#34;exception-to-the-rule&#34;&gt;Exception to the Rule&lt;/h3&gt;
&lt;p&gt;You have added the Analyzers, and you now have thousands of failing errors in your project. Some of these you will want to actually fix now, others fix later, and some just don&amp;rsquo;t matter and the rule needs to be turned off.&lt;/p&gt;
&lt;p&gt;You can use a &lt;code&gt;.ruleset&lt;/code&gt; xml file to configure rules. This is done using the &lt;code&gt;&amp;lt;CodeAnalysisRuleSet&amp;gt;&lt;/code&gt; section tag in your project file. Alternatively (as above) you can use &lt;code&gt;&amp;lt;CodeAnalysisRuleSet&amp;gt;$(MSBuildThisFileDirectory)/ruleset.ruleset&amp;lt;/CodeAnalysisRuleSet&amp;gt;&lt;/code&gt; in your &lt;code&gt;Directory.Build.Props&lt;/code&gt; file, and have a shared &lt;code&gt;ruleset.ruleset&lt;/code&gt; xml file next to it at the root of your repository.&lt;/p&gt;
&lt;p&gt;Ruleset files can also include other ruleset files so you can make these modular, or heirarchical. (This is useful if you want slightly different rules for one project. Override &lt;code&gt;&amp;lt;CodeAnalysisRuleSet&amp;gt;&lt;/code&gt; in your project to use it&amp;rsquo;s own file, and include the main &lt;code&gt;.ruleset&lt;/code&gt; file from the project&amp;rsquo;s own version.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn/blob/master/docs/compilers/Rule%20Set%20Format.md#sample&#34;&gt;https://github.com/dotnet/roslyn/blob/master/docs/compilers/Rule%20Set%20Format.md#sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great advice is to copy someone else&amp;rsquo;s configuration file as a starting point, then disable anything you still don&amp;rsquo;t like and then schedule time to review the existing exclusions possibly to turn them on again. (If the other project is yours, it probably doesn&amp;rsquo;t need much tweaking.)&lt;/p&gt;
&lt;p&gt;A large number of the errors you will see will be &amp;ldquo;Fix spacing&amp;rdquo;. The default rules seem perfectly reasonable so I recommend using the fix all across Solution auto-fix for these first, to find where the real problems lie. You could also go through and disable all the rules that are failing and come back one or two a sprint to slowly improve things, too.&lt;/p&gt;
&lt;p&gt;I guarantee that you will find at least one issue that will make you say &amp;ldquo;ooh, yip, that&amp;rsquo;s an exception waiting to happen&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Fixing some of these issues will break existing contracts. If this is a library that is shared with others, be sure to follow SemVer for breaking changes, or add exceptions around areas that could break existing contracts, with a comment explaining why you have violated the rule, so it can be fixed in your next lot of breaking changes. (You can do this by wrapping your code in &lt;code&gt;#pragma warning disable CA1034&lt;/code&gt; &lt;code&gt;#pragma warning enable CA1034&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve done a bunch of analysis on the Analyzers. I can tell you that they do not drastically increase your build times enough to not use them. Yes, there is an increase, but it is not enough in practice to slow down your build/test development cycle. It respects the existing build caching and only runs if you actually need to do a rebuild of a particular project.&lt;/p&gt;
&lt;p&gt;It might cause you to spend more time on the code formatting as you write it, but that is going to reduce errors you might have added if you came back later and tried to fix them out of context.&lt;/p&gt;
&lt;p&gt;Given the four Analyzers above, here are some rough results (on an application that takes &lt;strong&gt;about 1 minute to build&lt;/strong&gt; a project one of my projects.)&lt;/p&gt;
&lt;p&gt;Some quick stats: &lt;strong&gt;24019 lines of code, 497 C# code files, 33 projects, (incl. 6 application component projects, 7 Test projects)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Configuration&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Number of Analyzers&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Analyzer Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No Analyzers&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0/729&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;51/152&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;~9.2 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codecracker.CSharp&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;50/76&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;~17.2 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StyleCop.Analyzers&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;34/194&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;~16.3 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SonarAnalyzer.CSharp&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;142/307&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;~47.7 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All 4 Analyzers&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;277/729&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;~71.9 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Basically, if you are worried about performance, don&amp;rsquo;t use SonarAnalyzer. Another reason to not use SonarAnalyzer is that it was the one I had to disable the most analyzers from.  If you are really really worried, I recommend just using &lt;code&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/code&gt; and &lt;code&gt;StyleCop.Analyzers&lt;/code&gt; for the best coverage vs time ratio.&lt;/p&gt;
&lt;p&gt;You can also see from these stats that there are more Analyzers available in these packs than are enabled to run by default. It might be worth looking into what you are missing that you want to enforce.&lt;/p&gt;
&lt;h3 id=&#34;editor-config&#34;&gt;Editor Config&lt;/h3&gt;
&lt;p&gt;Do you use editor config? You should use editor config.&lt;/p&gt;
&lt;p&gt;Once you start using Code Analyzers, specifically the StyleCop Analyzer, you may find the default code generation rules in Visual Studio and VSCode (or even Resharper) might fight against you.  Luckily you can use EditorConfig to tell Visual Studio, VSCode, and even Resharper the specific way you want your code generation to be formatted as.  The &lt;code&gt;.editorconfig&lt;/code&gt; file checks into your repository, so you can make this configurable per repository.&lt;/p&gt;
&lt;p&gt;More details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference&#34;&gt;https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kent-boogaart.com/blog/editorconfig-reference-for-c-developers&#34;&gt;http://kent-boogaart.com/blog/editorconfig-reference-for-c-developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;getting-it-working-on-your-build-servers&#34;&gt;Getting it working on your Build Servers&lt;/h3&gt;
&lt;p&gt;This is short and sweet. Your build server will just fail to build on analyzer errors, with build errors. Because its all part of the compile pipeline in Roslyn now.&lt;/p&gt;
&lt;h3 id=&#34;some-stylecop-rules-that-i-turn-off&#34;&gt;Some StyleCop Rules that I turn off&lt;/h3&gt;
&lt;p&gt;This contains the opinions of Me, the Environment I&amp;rsquo;ve learned C# in, and possibly that of my Team. Possible controversy ahead.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001.md&#34;&gt;SA0001&lt;/a&gt; - Xml Comment Analysis Disabled
&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t use XML documentation, so this rule is disabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1101.md&#34;&gt;SA1101&lt;/a&gt; - Prefix Local Calls With This
&lt;ul&gt;
&lt;li&gt;This is unnecessary since I prefer the underscore prefix of private fields. Never use &lt;code&gt;this&lt;/code&gt;, it is redundant.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1118.md&#34;&gt;SA1118&lt;/a&gt; - Parameter Must Not Span Multiple Lines
&lt;ul&gt;
&lt;li&gt;You probably don&amp;rsquo;t need this, but for syntactic reasons, some fluent code building reads better allowing this and I use it a lot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1200.md&#34;&gt;SA1200&lt;/a&gt; - Using Directives Must Be Placed Correctly
&lt;ul&gt;
&lt;li&gt;Stylecop seems to want them inside namespaces, despite all tooling I&amp;rsquo;ve ever used has always placed them outside. Turning this on will confuse more than assist.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1201.md&#34;&gt;SA1201&lt;/a&gt; - Elements Must Appear In The Correct Order
&lt;ul&gt;
&lt;li&gt;If you are starting a new project, then this might appeal, but the code churn in git of turning this on is worse than the benefits. Also, automating to match this ordering is non-obvious&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1202.md&#34;&gt;SA1202&lt;/a&gt; - Elements Must Be Ordered By Access
&lt;ul&gt;
&lt;li&gt;Similar to the above, ordering is hard on an existing project, and I like private fields at the top for some reason (History). You might still find it gets in the way of your preferred ordering, anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1204.md&#34;&gt;SA1204&lt;/a&gt; - Static Elements Must Appear Before Instance Elements
&lt;ul&gt;
&lt;li&gt;As with SA1201 and SA1204 above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1309.md&#34;&gt;SA1309&lt;/a&gt; - Field Names Must Not Begin With Underscore
&lt;ul&gt;
&lt;li&gt;Related to SA1101, I have a preference for using underscores here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1413.md&#34;&gt;SA1413&lt;/a&gt; - Use Trailing Commas In Multi Line Initializers
&lt;ul&gt;
&lt;li&gt;o rly? I can see the appeal for merging actually, but the compiler will catch it, and that&amp;rsquo;s what Build servers and PRs are for. My pedantic nature wants to remove it, so I do, and this rule is off.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1600.md&#34;&gt;SA1600&lt;/a&gt; - Elements Must Be Documented
&lt;ul&gt;
&lt;li&gt;In an ideal world of a pristine reference code base, this must be amazing to have. For an application where comments get out of sync faster then the build can run, Nope.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1602.md&#34;&gt;SA1602&lt;/a&gt; - Enumeration Items Must Be Documented
&lt;ul&gt;
&lt;li&gt;Docs again, as above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1633.md&#34;&gt;SA1633&lt;/a&gt; - File Must Have Header
&lt;ul&gt;
&lt;li&gt;Same opinion as SA1600 above&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are probably other (related) rules, but I haven&amp;rsquo;t hit them yet, so haven&amp;rsquo;t turned them off.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Go forth and automate the improved quality of your Repository! You have the tools, instructions, and if you have read this far the inclination to make it happen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FiraCode, my new favorite VS Code dev font</title>
      <link>https://blog.csmac.nz/post/firacode-my-new-favorite-vscode-font/</link>
      <pubDate>Tue, 03 Jan 2017 21:26:42 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/firacode-my-new-favorite-vscode-font/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using Fira Code as my new dev font. And I&amp;rsquo;m sticking with it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;FiraCode&lt;/a&gt; is available on GitHub, and is a based on the concept of ligatures, targeting at programming symbols.&lt;/p&gt;
&lt;p&gt;In short, ligatures are where two or more actual characters are printed as a single printable character, originating in print where certain letters in certain orders would have a special stamp to use in the printing press to represent them. This gives a font a nicer flow and feel.&lt;/p&gt;
&lt;p&gt;Applying this concept to programming symbols, we get Fira Code. The name comes from the original font, Fira Mono. (A good mono font should be the basis of any programmers font based on today&amp;rsquo;s most popular languages).&lt;/p&gt;
&lt;p&gt;Probably the best way to see what I mean is through the picture shown on GitHub:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/tonsky/FiraCode/raw/master/showcases/all_ligatures.png&#34; alt=&#34;Fira Code vs Fire Mono&#34;&gt;&lt;/p&gt;
&lt;p&gt;And luckily installation into your favorite editor is simple. I will &lt;a href=&#34;https://github.com/tonsky/FiraCode/wiki&#34;&gt;link to all the installation instructions&lt;/a&gt; but give you the simple gist of getting it working in Visual Studio Code.&lt;/p&gt;
&lt;p&gt;First you need to download and install. The &lt;a href=&#34;https://github.com/tonsky/FiraCode/releases/download/1.204/FiraCode_1.204.zip&#34;&gt;download link (currently v1.204)&lt;/a&gt; is available on the &lt;a href=&#34;https://github.com/tonsky/FiraCode#solution&#34;&gt;&lt;code&gt;README.md&lt;/code&gt; page of the repository&lt;/a&gt; and installation on Windows is as easy as opening the zip file, open each &lt;code&gt;.ttf&lt;/code&gt; file in the &lt;code&gt;ttf&lt;/code&gt; folder and clicking install.&lt;/p&gt;
&lt;p&gt;For VS Code, you just need to open the editor settings (&lt;code&gt;File&lt;/code&gt;-&amp;gt;&lt;code&gt;Preferences&lt;/code&gt;-&amp;gt;&lt;code&gt;User Settings&lt;/code&gt; will open the settings file) and then add the following lines to the &lt;code&gt;json&lt;/code&gt; file (inside the curly braces) and save:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Fira Code&amp;quot;,
    &amp;quot;editor.fontSize&amp;quot;: 14,
    &amp;quot;editor.fontLigatures&amp;quot;: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If Code was already open when you installed the fonts, you might see everything change to a font that isn&amp;rsquo;t even mono-space. Just restart Code and the correct Fira Code font should take affect.&lt;/p&gt;
&lt;p&gt;The biggest difference is that you will notice as you add and remove symbols from symbol pairs the characters on screen will drift a little left and right to be closer, and in many cases the characters actually link up.&lt;/p&gt;
&lt;p&gt;These instructions are &lt;a href=&#34;https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions&#34;&gt;listed on GitHub as well&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are not as bold as me, I still recommend checking out &lt;a href=&#34;https://en.wikipedia.org/wiki/Consolas&#34;&gt;Consolas&lt;/a&gt; as a good mono-space developer font as standard. But I recommend trying Fira Code before ruling it out completely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio Code with C# and dotnet</title>
      <link>https://blog.csmac.nz/post/visual-studio-code-with-csharp-and-dotnet/</link>
      <pubDate>Sun, 03 Jul 2016 04:34:30 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/visual-studio-code-with-csharp-and-dotnet/</guid>
      <description>&lt;p&gt;Getting Started with Visual Studio Code? Me too. Let&amp;rsquo;s see what it takes to get going. This is a bit of a companion piece alongside my &lt;a href=&#34;https://blog.csmac.nz/dotnetcore-getting-started/&#34;&gt;.Net Core Series&lt;/a&gt; I am writing at the moment. Hopefully as well as .Net Core, I will have a play with writing TypeScript, Rust and maybe C++ inside Visual Studio Code. I might have to focus on the interface in another article as well.&lt;/p&gt;
&lt;p&gt;After downloading and installing Visual Studio Code from &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;code.visualstudio.com&lt;/a&gt;, or installing using &lt;code&gt;choco install visualstudiocode&lt;/code&gt; from the command line, there are few things missing.&lt;/p&gt;
&lt;p&gt;It seems that, by default, Code is &lt;a href=&#34;https://en.wikipedia.org/wiki/Out_of_the_box_(feature)&#34;&gt;OOTB&lt;/a&gt; ready for JavaScript. But .Net support needs to be installed.&lt;/p&gt;
&lt;h3 id=&#34;installing-c-support&#34;&gt;Installing C# Support&lt;/h3&gt;
&lt;p&gt;From inside Visual Studio Code, press &lt;code&gt;Ctrl + p&lt;/code&gt; to bring up the Quick Open bar, and type in &lt;code&gt;ext install csharp&lt;/code&gt;. This installs the extension
C# for Visual Studio Code (&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp&#34;&gt;Details for the extension here&lt;/a&gt;). This includes the OmniSharp tooling as well as support for .Net Core (as of version 1.2, RC1 and RC2 versions are no longer supported and this tooling Supports the 1.0.0 release build.), and support for &lt;code&gt;csproj&lt;/code&gt; files (which is probably highly in flux, and currently doesn&amp;rsquo;t work on Linux or OS X, apparently).&lt;/p&gt;
&lt;h3 id=&#34;build-and-run-a-project&#34;&gt;Build and Run a Project&lt;/h3&gt;
&lt;p&gt;Now that we have our environment set up, we can open a folder with a .Net Core Console Application project in it.  (If you haven&amp;rsquo;t already, check out my &lt;a href=&#34;https://blog.csmac.nz/dotnetcore-getting-started/&#34;&gt;Getting Started post&lt;/a&gt; on creating a new .Net Core application.)&lt;/p&gt;
&lt;p&gt;Choose &lt;code&gt;File -&amp;gt; Open Folder...&lt;/code&gt; and navigate into or select the folder for your project. This is the one you initialised with the &lt;code&gt;dotnet new&lt;/code&gt; command already (&lt;a href=&#34;https://blog.csmac.nz/dotnetcore-getting-started/&#34;&gt;didn&amp;rsquo;t you?&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you are lucky, you will see a banner at the top of the screen appear suggesting &lt;code&gt;Required assets to build and debug are missing from your project. Add them?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1467488141/RequiredBuildAssetsMissing_tawlgc.png&#34; alt=&#34;Required assets to build and debug are missing from your project. Add them?&#34;&gt;&lt;/p&gt;
&lt;p&gt;If so, click &lt;code&gt;Yes&lt;/code&gt; and skip to &lt;a href=&#34;#thenextstep&#34;&gt;the next step&lt;/a&gt;. If not, you will need to initialise this manually.&lt;/p&gt;
&lt;h4 id=&#34;initialise-manually&#34;&gt;Initialise manually&lt;/h4&gt;
&lt;p&gt;Press F1 to bring up the Command Palette. This is where you can exercise commands against Visual Studio Code. A helpful suggestion menu will pop up, but we want to type in &lt;code&gt;tasks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1467488343/CommandPaletteTasks_td24bk.png&#34; alt=&#34;Enter tasks into the Command Palette.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Highlight the &lt;code&gt;Tasks: Configure Task Runner&lt;/code&gt; option and press enter. The UI will change to display &lt;code&gt;Select a task runner&lt;/code&gt; in the prompt. Select the option &lt;code&gt;.Net Core&lt;/code&gt; from the options and press enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1467488344/CommandPaletteSelectTaskRunner_vymepv.png&#34; alt=&#34;Select .Net Core from the options.&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-next-step&#34;&gt;The next step&lt;/h4&gt;
&lt;p&gt;Now you should see that we have created a &lt;code&gt;tasks.json&lt;/code&gt; file inside a &lt;code&gt;.vscode&lt;/code&gt; folder.  This configures all the tasks that you can run inside VS code such as build, test, run etc.&lt;/p&gt;
&lt;p&gt;To run this task, press &lt;code&gt;Ctrl + p&lt;/code&gt; to bring up the &lt;code&gt;Quick Open&lt;/code&gt; menu, and type in &lt;code&gt;task &lt;/code&gt;.  As soon as you add that last space, the hint menu should now show our task &lt;code&gt;build&lt;/code&gt;. Either select this and press enter or type in &lt;code&gt;build&lt;/code&gt; so that the command bar now says &lt;code&gt;task build&lt;/code&gt; and press enter.&lt;/p&gt;
&lt;p&gt;Apart from a spinner at the bottom right, there isn&amp;rsquo;t much to see. We should open the Output window using either &lt;code&gt;Ctrl + Shift + U&lt;/code&gt; or from the menu &lt;code&gt;View -&amp;gt; Toggle Output&lt;/code&gt;. Now we can see the output produced from our build.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1467488343/dotnetCoreBuildOutput_p9wcnt.png&#34; alt=&#34;Output showing a successful build.&#34;&gt;&lt;/p&gt;
&lt;p&gt;To add a run command, we just need to modify our task runner. Add the following json below the &lt;code&gt;build&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;,
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;run&amp;quot;,
            &amp;quot;args&amp;quot;: [ ],
            &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now use &lt;code&gt;Ctrl + p&lt;/code&gt;, type &lt;code&gt;task run&lt;/code&gt; and press enter. You should now see the following output in the Output window:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Project MyNewApp (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified
Compiling MyNewApp for .NETCoreApp,Version=v1.0
Compilation succeeded.
    0 Warning(s)
    0 Error(s)
Time elapsed 00:00:01.4849643
 
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a .Net Core application successfully running inside Visual Studio Code.&lt;/p&gt;
&lt;h3 id=&#34;debug&#34;&gt;Debug&lt;/h3&gt;
&lt;p&gt;Of course, we probably want to be able to debug as well as run the application, so let&amp;rsquo;s look at that next.&lt;/p&gt;
&lt;p&gt;Switching to debug mode can be done using the Bug icon tab on the left-hand side, by using the menu &lt;code&gt;View -&amp;gt; Debug&lt;/code&gt; or by using the shortcut key &lt;code&gt;Ctrl + Shift + D&lt;/code&gt;. (&lt;code&gt;Ctrl + Shift + E&lt;/code&gt; gets you back to the &lt;strong&gt;E&lt;/strong&gt;xplorer View where the files are).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1467488343/VSCodeDebugView_cur5uc.png&#34; alt=&#34;Visual Studio Code Debug View.&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is a familiar debug play button in the top of this panel. There is a dropdown beside it that says &lt;code&gt;No Configurations&lt;/code&gt;. When we press play for the first time, we will see the Command Palette open again with a selection list. Select the &lt;code&gt;.Net Core&lt;/code&gt; option and press enter (or just click on it, both work). Now we will have a &lt;code&gt;launch.json&lt;/code&gt; file added into the .vscode folder as well.&lt;/p&gt;
&lt;p&gt;When we look back at the dropdown beside the green Debugger button we see it has 3 options in it: &lt;code&gt;.NET Core Launch (console)&lt;/code&gt;, &lt;code&gt;.NET Core Launch (web)&lt;/code&gt; and &lt;code&gt;.NET Core Attach&lt;/code&gt;. These match the names of the three Configurations in the &lt;code&gt;launch.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;One thing we need to change is the path in the program variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;program&amp;quot;: &amp;quot;${workspaceRoot}/bin/Debug/&amp;lt;target-framework&amp;gt;/&amp;lt;project-name.dll&amp;gt;&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Needs to be replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;program&amp;quot;: &amp;quot;${workspaceRoot}/bin/Debug/netcoreapp1.0/MyNewApp.dll&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the &lt;code&gt;.NET Core Launch (console)&lt;/code&gt; option selected in the Configurations dropdown, press the Debugger green play button.&lt;/p&gt;
&lt;p&gt;Two things might happen here, depending on If you used Visual studio to create your project, or if you used the &lt;code&gt;dotnet new&lt;/code&gt; command.&lt;/p&gt;
&lt;h4 id=&#34;because-i-used-an-xproj&#34;&gt;Because I used an xproj&amp;hellip;&lt;/h4&gt;
&lt;p&gt;When we pressed play, we might see it successfully produce output similar to the one below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Private.CoreLib.ni.dll&#39;. Cannot find or open the symbol file.
WARNING: Could not load symbols for &#39;MyNewApp.dll&#39;. &#39;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\bin\Debug\netcoreapp1.0\MyNewApp.pdb&#39; is a Windows PDB. These are not supported by the cross-platform .NET Core debugger.
Loaded &#39;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\bin\Debug\netcoreapp1.0\MyNewApp.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Runtime.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\mscorlib.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Console.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Threading.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.IO.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.IO.FileSystem.Primitives.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Text.Encoding.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Text.Encoding.Extensions.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Threading.Tasks.dll&#39;. Cannot find or open the symbol file.
Hello World!
The program &#39;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\bin\Debug\netcoreapp1.0\MyNewApp.dll&#39; has exited with code 0 (0x00000000).

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out that this is &lt;em&gt;WARNING&lt;/em&gt; near the start is important:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WARNING: Could not load symbols for &#39;MyNewApp.dll&#39;. &#39;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\bin\Debug\netcoreapp1.0\MyNewApp.pdb&#39; is a Windows PDB. These are not supported by the cross-platform .NET Core debugger.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&amp;rsquo;t actually see this warning in your output, just skip ahead to the next &lt;a href=&#34;#debugworking&#34;&gt;Debug Working&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;If we try to debug at the moment, the breakpoint doesn&amp;rsquo;t get hit. We are missing a setting in our &lt;code&gt;project.json&lt;/code&gt; file. The &lt;code&gt;buildOptions&lt;/code&gt; section needs a &lt;code&gt;debugType&lt;/code&gt; value of &lt;code&gt;portable&lt;/code&gt; added, to correctly produce the right kind of &lt;code&gt;pdb&lt;/code&gt; files for debugging with Visual Studio Code. Modify your &lt;code&gt;project.json&lt;/code&gt; file as below to add &lt;code&gt;&amp;quot;debugType&amp;quot;: &amp;quot;portable&amp;quot;&lt;/code&gt; to &lt;code&gt;buildOptions&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  ...
  &amp;quot;buildOptions&amp;quot;: {
    ...
    &amp;quot;debugType&amp;quot;: &amp;quot;portable&amp;quot;
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can continue and we should no longer see the warning.&lt;/p&gt;
&lt;h4 id=&#34;debug-working&#34;&gt;Debug Working&lt;/h4&gt;
&lt;p&gt;When we run the debugger now we should see the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Private.CoreLib.ni.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\bin\Debug\netcoreapp1.0\MyNewApp.dll&#39;. Symbols loaded.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Runtime.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\mscorlib.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Console.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Threading.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.IO.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.IO.FileSystem.Primitives.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Text.Encoding.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Text.Encoding.Extensions.dll&#39;. Cannot find or open the symbol file.
Loaded &#39;C:\Program Files\dotnet\shared\Microsoft.NETCore.App\1.0.0\System.Threading.Tasks.dll&#39;. Cannot find or open the symbol file.
Hello World!
The program &#39;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\bin\Debug\netcoreapp1.0\MyNewApp.dll&#39; has exited with code 0 (0x00000000).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, apart from some issues loading framework symbols, our app has run correctly.&lt;/p&gt;
&lt;p&gt;We can now go into our &lt;code&gt;Program.cs&lt;/code&gt; file, add a breakpoint, and successfully break inside our code. Yay!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1467551946/VSCodeDebuggerAttached_yoxcwb.png&#34; alt=&#34;Breakpoint hit during debugging on Visual Studio Code.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;http://codeclimber.net.nz/archive/2016/05/20/How-to-debug-NET-Core-RC2-app-with-Visual-Studio.aspx&#34;&gt;CodeClimber&lt;/a&gt; for getting me out when I got stuck in places, too.&lt;/p&gt;
&lt;h3 id=&#34;solution-level-configuration&#34;&gt;Solution Level Configuration&lt;/h3&gt;
&lt;p&gt;Now I want to try something harder. I want to find out if we can get something a bit more like what we are used to in Visual Studio instead, with a Solution-level build and run.&lt;/p&gt;
&lt;h4 id=&#34;caveat&#34;&gt;Caveat&lt;/h4&gt;
&lt;p&gt;I have no idea if this is possible or sensible, I have not had a chance to see what happens when I have multiple projects that depend on each other, and only one open in code. This is an experiment. What will happen?&lt;/p&gt;
&lt;h4 id=&#34;open-the-solution&#34;&gt;Open the solution&lt;/h4&gt;
&lt;p&gt;Choose &lt;code&gt;File -&amp;gt; Open Folder...&lt;/code&gt; and navigate into or select the folder for your solution. In my case I have a Visual Studio folder structure like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyNewApp
&lt;ul&gt;
&lt;li&gt;src
&lt;ul&gt;
&lt;li&gt;MyNewApp
&lt;ul&gt;
&lt;li&gt;Properties
&lt;ul&gt;
&lt;li&gt;AssemblyInfo.cs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MyNewApp.xproj&lt;/li&gt;
&lt;li&gt;Program.cs&lt;/li&gt;
&lt;li&gt;project.json&lt;/li&gt;
&lt;li&gt;project.lock.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;global.json&lt;/li&gt;
&lt;li&gt;MyNewApp.sln&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note: I have excluded some unimportant build artifact files and folders you might see in your directories, such as &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;.vs&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;On my machine, I have opened the MyNewApp folder containing the src folder and MyNewApp.sln. What happens next might vary for you if you choose a different location to open.&lt;/p&gt;
&lt;p&gt;The first thing that we need to do is set up build tasks. We can start with the default ones and then modify them as needed. As before:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;F1 launch Command Palette&lt;/li&gt;
&lt;li&gt;type tasks&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Tasks: Configure Task Runner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time from the options we will select &lt;code&gt;msbuild&lt;/code&gt;. We want to be able to build and run our solution, rather than use the dotnet CLI on a single project.&lt;/p&gt;
&lt;p&gt;As earlier, we should now have a &lt;code&gt;tasks.json&lt;/code&gt; file inside a &lt;code&gt;.vscode&lt;/code&gt; folder inside the top-level folder you Opened earlier. This time, however, it is set up to run MSBuild.&lt;/p&gt;
&lt;p&gt;Now we can run it again as we did last time with &lt;code&gt;Ctrl + p&lt;/code&gt;, type &lt;code&gt;task build&lt;/code&gt; and Enter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Failed to launch external program msbuild /property:GenerateFullPaths=true.
spawn msbuild ENOENT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On my machine, it looks like &lt;code&gt;msbuild.exe&lt;/code&gt; is not in the path. In my case I am going to add the MSBuild version 14.0 that came with Visual Studio 2015 into my %PATH% environment variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\MSBuild\14.0\Bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And restart Visual Studio Code. (It is nice that it remembers the last folder I had open, too.)&lt;/p&gt;
&lt;p&gt;One more &lt;code&gt;Ctrl + Shift + B&lt;/code&gt; (or &amp;lsquo;Ctrl + p&amp;rsquo;, &lt;code&gt;task build&lt;/code&gt;, Enter) and It looks successful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Microsoft (R) Build Engine version 14.0.25420.1
Copyright (C) Microsoft Corporation. All rights reserved.
Building the projects in this solution one at a time. To enable parallel build, please add the &amp;quot;/m&amp;quot; switch.
Build started 03/07/2016 16:44:02.
Project &amp;quot;c:\dev\temp\MyNewApp\MyNewApp\MyNewApp.sln&amp;quot; on node 1 (build target(s)).
ValidateSolutionConfiguration:
  Building solution configuration &amp;quot;Debug|Any CPU&amp;quot;.
Project &amp;quot;c:\dev\temp\MyNewApp\MyNewApp\MyNewApp.sln&amp;quot; (1) is building &amp;quot;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\MyNewApp.xproj&amp;quot; (2) on node 1 (default targets).
CoreCompile:
  C:\Program Files\dotnet\dotnet.exe build &amp;quot;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp&amp;quot; --configuration Debug --no-dependencies
  Project MyNewApp (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.
Done Building Project &amp;quot;c:\dev\temp\MyNewApp\MyNewApp\src\MyNewApp\MyNewApp.xproj&amp;quot; (default targets).
Done Building Project &amp;quot;c:\dev\temp\MyNewApp\MyNewApp\MyNewApp.sln&amp;quot; (build target(s)).
Build succeeded.
    0 Warning(s)
    0 Error(s)
Time Elapsed 00:00:02.08
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now I can build my Visual Studio &lt;code&gt;xproj&lt;/code&gt; using MSBuild inside Visual Studio Code.&lt;/p&gt;
&lt;h4 id=&#34;debug-1&#34;&gt;Debug&lt;/h4&gt;
&lt;p&gt;Just like before, we can set up Debugging with just a few changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press the Debugger play button&lt;/li&gt;
&lt;li&gt;The Command Palette will open again&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;.Net Core&lt;/code&gt; option and press enter&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;launch.json&lt;/code&gt; file will be created&lt;/li&gt;
&lt;li&gt;Change the path in the program variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time, though, we change the path to be a bit longer since we are in a different root directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;program&amp;quot;: &amp;quot;${workspaceRoot}/src/MyNewApp/bin/Debug/netcoreapp1.0/MyNewApp.dll&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be ready to place a breakpoint and debug our code.  If you already &lt;a href=&#34;#becauseiusedanxproj&#34;&gt;followed the earlier instructions&lt;/a&gt; with the same project, (or you created it using &lt;code&gt;dotnet new&lt;/code&gt;), the &lt;code&gt;&amp;quot;debugType&amp;quot;: &amp;quot;portable&amp;quot;&lt;/code&gt; fix should already be there, otherwise, you can apply that now.&lt;/p&gt;
&lt;p&gt;Place a breakpoint into &lt;code&gt;Program.cs&lt;/code&gt; and hit the green Debug play button. Alternatively, you can use the familiar &lt;code&gt;F5&lt;/code&gt; shortcut key to start debugging.  Success!&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;Whats Next?&lt;/h3&gt;
&lt;p&gt;So now we can build and debug our application using Visual Studio Code either at the Solution-level or at the project-level.  Going forward we will want to start thinking about tests and running those as well. But I want to go a bit further into how to test using .Net Core from the command-line for a bit before I double back and tackle it in Visual Studio Code.&lt;/p&gt;
&lt;p&gt;This has been fun, though probably the longest way to write a blog post. Yes it&amp;rsquo;s a long one too, so I think I&amp;rsquo;ll have to look at breaking things down into small achievable chunks if I do this again.  Thanks for sticking with me and getting to the end.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>