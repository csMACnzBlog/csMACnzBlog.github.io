<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Storyteller on csMACnz&#39;s Blog</title>
    <link>https://blog.csmac.nz/tags/storyteller/</link>
    <description>Recent content in Storyteller on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blog.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blog.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Thu, 28 Dec 2017 23:41:13 +0000</lastBuildDate><atom:link href="https://blog.csmac.nz/tags/storyteller/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Subcutaneous Testing against React &#43; .Net Applications with Storyteller - A Reply</title>
      <link>https://blog.csmac.nz/post/storytellerreduxsample/</link>
      <pubDate>Thu, 28 Dec 2017 23:41:13 +0000</pubDate>
      
      <guid>https://blog.csmac.nz/post/storytellerreduxsample/</guid>
      <description>&lt;p&gt;A week or two ago Jeremy Miller posted an article &lt;a href=&#34;https://jeremydmiller.com/2017/12/19/subcutaneous-testing-against-react-net-applications/&#34;&gt;Subcutaneous Testing against React + .Net Applications&lt;/a&gt;. It outlined some early R&amp;amp;D on the new Storyteller.Redux, which allows you to run Storyteller tests against Redux stores using WebSockets.&lt;/p&gt;
&lt;p&gt;While he had a proven way of communicating between React/Redux and Storyteller, It was lacking the all-important AspNetCore integration that was just casually mentioned.  So I figured I would pull on that thread and see what is actually possible.&lt;/p&gt;
&lt;h3 id=&#34;first-hurdle&#34;&gt;First Hurdle&lt;/h3&gt;
&lt;p&gt;My first hurdle was that the code in question was part of Storyteller 5. This does not run on my machine (for various reasons) and so to test anything I needed to backport Storyteller.Redux onto Storyteller 4. (Storyteller.Redux is also only an alpha release currently, anyway).&lt;/p&gt;
&lt;p&gt;So I copied the &lt;a href=&#34;https://github.com/storyteller/Storyteller/tree/master/src/Storyteller.Redux&#34;&gt;Storyteller.Redux&lt;/a&gt; and &lt;a href=&#34;https://github.com/storyteller/Storyteller/tree/master/src/ReduxSamples&#34;&gt;ReduxSamples&lt;/a&gt; into a new solution, and changed the project references to NuGet package references for Storyteller 4. So far so good.&lt;/p&gt;
&lt;h3 id=&#34;an-aspnetcore-app&#34;&gt;An AspNetCore app&lt;/h3&gt;
&lt;p&gt;I created another folder (&lt;code&gt;myapp&lt;/code&gt;) next to these projects and used the &lt;code&gt;dotnet new reactredux&lt;/code&gt; to create a default sample AspNetCore app using react and redux. This would be my test application. This comes with a few pages, and a couple of stores and commands to play with as test targets.&lt;/p&gt;
&lt;h3 id=&#34;launching-aspnetcore-from-storyteller&#34;&gt;Launching AspNetCore from Storyteller&lt;/h3&gt;
&lt;p&gt;I couldn&amp;rsquo;t use the &lt;a href=&#34;https://www.nuget.org/packages/Storyteller.AspNetCore/&#34;&gt;Storyteller.AspNetCore&lt;/a&gt; package because it actually creates an in-memory server (which is great for some kinds of testing) but to test React, I actually have to launch a browser to point to the app, so a real running instance is required.&lt;/p&gt;
&lt;p&gt;Instead, I created a new System that could launch the WebApp using Startup but still hosted on a port that a browser can talk to. I can then use Selenium (again not directly using Storyteller.Selenium for reasons) to launch and host the running page. This required a few custom classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/ReduxSamples/BrowserDriver.cs&#34;&gt;BrowserDriver.cs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/ReduxSamples/SeleniumReduxSagaExtension.cs&#34;&gt;SeleniumReduxSagaExtension.cs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/ReduxSamples/Program.cs&#34;&gt;Program.cs (+ReduxSampleSystem)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;    public class BrowserDriver: IDisposable
    {
        private object _browserLock = new object();

        private ChromeDriverService _driverService;
        private ChromeOptions _options;
        private ChromeDriver _driver;

        public BrowserDriver()
        {
            _driverService = ChromeDriverService.CreateDefaultService(PlatformServices.Default.Application.ApplicationBasePath, &amp;quot;chromedriver.exe&amp;quot;);
            _options = new ChromeOptions();
            //_options.AddAdditionalCapability(&amp;quot;IsJavaScriptEnabled&amp;quot;, true);
        }

        public void LaunchUrl(string targetURL)
        {
            if (_driver != null)
            {
                Close();
            }

            _driver = new ChromeDriver(_driverService, _options);

            var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(20));

            _driver.Navigate().GoToUrl(targetURL);

            wait.Until(driver =&amp;gt; driver.FindElement(By.TagName(&amp;quot;body&amp;quot;)));
            wait.Until(driver =&amp;gt; ((IJavaScriptExecutor)driver).ExecuteScript(&amp;quot;return document.readyState&amp;quot;).Equals(&amp;quot;complete&amp;quot;));

            IEnumerable&amp;lt;LogEntry&amp;gt; logs = _driver.Manage().Logs.GetLog(&amp;quot;browser&amp;quot;);

            if (logs.Any(l =&amp;gt; l.Level == LogLevel.Warning || l.Level == LogLevel.Severe))
            {
                throw new Exception($&amp;quot;Warnings/Errors logged: \n{string.Join(&amp;quot;/n&amp;quot;, logs.Select(l =&amp;gt; l.Timestamp + &amp;quot;:::&amp;quot; + l.Message))}&amp;quot;);
            }
        }

        public void Close()
        {
            if (_driver != null)
            {
                _driver.Quit();
                _driver = null;
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                _driverService?.Dispose();
                _driverService = null;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    public class SeleniumReduxSagaExtension : IExtension
    {
        public string Url { get; }

        private Lazy&amp;lt;BrowserDriver&amp;gt; _browserDriver = new Lazy&amp;lt;BrowserDriver&amp;gt;(() =&amp;gt; new BrowserDriver());

        public SeleniumReduxSagaExtension(string url)
        {
            Url = url;
            Server = new WebSocketServer();
        }

        public WebSocketServer Server { get; set; }

        public void Dispose()
        {
            Server.SendCloseMessage();
            Server.Dispose();
            _browserDriver.Value.Dispose();
        }

        public Task Start()
        {
            return Task.Factory.StartNew(() =&amp;gt;
            {
                Server.Start();
            });
        }

        private void LaunchPage()
        {
            var url = Url.Contains(&amp;quot;?&amp;quot;)
                ? Url + $&amp;quot;&amp;amp;StorytellerPort={Server.Port}&amp;quot;
                : $&amp;quot;{Url}?StorytellerPort={Server.Port}&amp;quot;;
            _browserDriver.Value.LaunchUrl(url);
        }

        public void BeforeEach(ISpecContext context)
        {
            Server.SendCloseMessage();
            Server.ClearAll();

            LaunchPage();

            var reduxContext = new ReduxSpecContext(context);
            Server.CurrentContext = reduxContext;

            context.State.Store(reduxContext);
            context.State.Store(Server);

            Server.WaitForConnection(15.Seconds()).Wait();
        }

        public void AfterEach(ISpecContext context)
        {

        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    public class ReduxSampleSystem : SimpleSystem
    {
        private const string WebHostUrl = &amp;quot;http://localhost:5050&amp;quot;;
        private IWebHost _host;

        public ReduxSampleSystem()
        {
            // No request should take longer than 250 milliseconds
            PerformancePolicies.PerfLimit(250, r =&amp;gt; r.Type == &amp;quot;Http Request&amp;quot;);
        }
        protected override void configureCellHandling(CellHandling handling)
        {
            handling.Extensions.Add(new SeleniumReduxSagaExtension($&amp;quot;{WebHostUrl}/counter&amp;quot;));
        }

        public override Task Warmup()
        {
            Startup.TestDriver = true;
            _host = WebHost.CreateDefaultBuilder()
                    .UseContentRoot(CalculateRelativeContentRootPath())
                    .UseStartup&amp;lt;Startup&amp;gt;()
                    .UseUrls(WebHostUrl)
                    .Build();

            _host.Start();
            
            string CalculateRelativeContentRootPath() =&amp;gt;
              Path.Combine(PlatformServices.Default.Application.ApplicationBasePath,
                 @&amp;quot;..\..\..\..\myapp&amp;quot;);

            return base.Warmup();
        }

        public override void Dispose()
        {
            if(_host != null)
            {
                _host.SafeDispose();
            }
            base.Dispose();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is some explaination of the interesting parts of this that make it work. To use a startup in a test project, where you are using MVC views and &lt;code&gt;aspx&lt;/code&gt; pages, you need a few tweaks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the csproj there &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/ReduxSamples/ReduxSamples.csproj#L30-L36&#34;&gt;is some extra code required&lt;/a&gt; to copy over the reference dependencies for the view page on-demand parsing of MVC.&lt;/li&gt;
&lt;li&gt;You also need to &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/ReduxSamples/Program.cs#L50&#34;&gt;set the Content Root correctly&lt;/a&gt; (&lt;code&gt;CalculateRelativeContentRootPath&lt;/code&gt; above)&lt;/li&gt;
&lt;li&gt;I make use of the Selenium drivers (In this case, ChromeDriver) &lt;a href=&#34;https://www.nuget.org/packages/Selenium.WebDriver.ChromeDriver&#34;&gt;Selenium.WebDriver.ChromeDriver&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.nuget.org/packages/Selenium.WebDriver&#34;&gt;Selenium.WebDriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To finish making the connection work, I had to make a couple of changes to &lt;code&gt;myapp&lt;/code&gt; as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a flag to ensure webpack is always used, but without the hotreload feature on (&lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/myapp/Startup.cs#L23&#34;&gt;Flag&lt;/a&gt; + &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/myapp/Startup.cs#L34-L43&#34;&gt;Changes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add the reduxharness.js and typescript-ify as &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/myapp/ClientApp/reduxharness.ts&#34;&gt;reduxharness.ts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;reduxharness.ts&lt;/code&gt; in &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/myapp/ClientApp/boot-client.tsx&#34;&gt;boot-client.tsx&lt;/a&gt; &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample/blob/master/myapp/ClientApp/boot-client.tsx#L23&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this stage, when I run a test, it launches chrome through chromedriver, and the WebSocket connection should start. Storyteller is connected.&lt;/p&gt;
&lt;h3 id=&#34;tests&#34;&gt;Tests&lt;/h3&gt;
&lt;p&gt;My simplest test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Simple sending and value checking

-&amp;gt; id = ab11ba6a-2181-4901-a389-2ef8daff4ee4
-&amp;gt; lifecycle = Acceptance
-&amp;gt; max-retries = 0
-&amp;gt; last-updated = 2017-12-22T13:03:39.1937541Z
-&amp;gt; tags = 

[Calculator]
|&amp;gt; Increment
|&amp;gt; CheckValue number=1
~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is based on this feature (not too dissimilar to the original sample):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public class CalculatorFixture : ReduxFixture
    {
        public void GetInitialState()
        {
            this.ForceRefetchOfState().Wait();
        }

        [SendJson(&amp;quot;INCREMENT_COUNT&amp;quot;)]
        public void Increment()
        {
            
        }

        // SAMPLE: CheckJsonValue
        public IGrammar CheckValue()
        {
            return CheckJsonValue&amp;lt;int&amp;gt;(&amp;quot;$.counter.count&amp;quot;, &amp;quot;The current counter should be {number}&amp;quot;);
        }
        // ENDSAMPLE
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make life easier, there is also an added feature to be able to &lt;code&gt;ForceRefetchOfState&lt;/code&gt;, because this isn&amp;rsquo;t currently populated when first connected, you had to issue your first command for it to trigger a refresh of state. (Feature request?) Adding this allows me to forcibly request the initial state. ReduxSamples aside, I think this was the only functional change I actually made to the original Storyteller.Redux project (apart from pulling in a copy of WebSocketsHandler from StorytellerRunner, and switching references to NuGets to make it run).&lt;/p&gt;
&lt;p&gt;With this setup, every test first launches a fresh browser window to the target URL. (It also closes any open window first - makes it nice seeing the results of the last run test still open, but that still cleans up after itself.) It may be beneficial to extend this example to also have the navigation ability in a fixture, too.&lt;/p&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;Have a look at my GitHub repository at &lt;a href=&#34;https://github.com/csMACnz/StorytellerReduxSample&#34;&gt;github.com/csMACnz/StorytellerReduxSample&lt;/a&gt; for a working example of the solution outlined above. At some point, I should feedback the tweaks to Storyteller.Redux (or &lt;a href=&#34;https://github.com/jeremydmiller&#34;&gt;@jeremydmiller&lt;/a&gt; can just steal them&amp;hellip;) but until Storyteller 5 is stable, I would keep using my copy, anyway.&lt;/p&gt;
&lt;p&gt;Now that selenium is connected, there is also no reason I can&amp;rsquo;t drive UI interaction with the rest of React this way, too. (Although perhaps thorough testing of React is best left up to Jasmine tests&amp;hellip;)&lt;/p&gt;
&lt;p&gt;Still to do to make this more production ready: add some flags to conditionally compile in or out the &lt;code&gt;reduxharness&lt;/code&gt; (WebPack maybe?) so that it is only available in development builds, and not production builds.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>