<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on csMACnz&#39;s Blog</title>
    <link>https://blogmigration.csmac.nz/tags/visual-studio/</link>
    <description>Recent content in Visual Studio on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blogmigration.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blogmigration.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Thu, 17 Jan 2019 20:40:00 +0000</lastBuildDate><atom:link href="https://blogmigration.csmac.nz/tags/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Looking forward to dotnet in 2019</title>
      <link>https://blogmigration.csmac.nz/post/looking-forward-to-dotnet-in-2019/</link>
      <pubDate>Thu, 17 Jan 2019 20:40:00 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/looking-forward-to-dotnet-in-2019/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a new year, and we already have a bunch of dotnet releases to look forward to, thanks to the open development processes that Microsoft is using these days with dotnet.&lt;/p&gt;
&lt;p&gt;The three big releases I am looking forward to are C# 8 and .Net Core 3.0, and a NetStandard2.1. (Not to mention there is a .Net Framework 4.8 as well. But I&amp;rsquo;ve moved on.)&lt;/p&gt;
&lt;h2 id=&#34;c-8&#34;&gt;C# 8&lt;/h2&gt;
&lt;p&gt;It feels like we&amp;rsquo;ve been talking about C# 8 for a while, with 7.1, 7.2 and 7.3 releases building towards it. (It was 2 years ago when they were talking about what&amp;rsquo;s new in C# 7.0!). We&amp;rsquo;ve had demos at Build, NDC and online of what is coming, with &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/&#34;&gt;Preview releases&lt;/a&gt; dropping towards the end of last year. We should expect to see VS 2019 Released this Quarter (one hopes) and can get a better look at C# 8 in its final form at that point.&lt;/p&gt;
&lt;p&gt;What we do know is there are a bunch of cool features coming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nullable reference types&lt;/li&gt;
&lt;li&gt;Async streams&lt;/li&gt;
&lt;li&gt;Ranges and indices&lt;/li&gt;
&lt;li&gt;Default implementations of interface members&lt;/li&gt;
&lt;li&gt;Recursive patterns&lt;/li&gt;
&lt;li&gt;Switch expressions&lt;/li&gt;
&lt;li&gt;Target-typed new-expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More detailed notes and examples of what these are and how they look was published on the .Net Blog article &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/&#34;&gt;Building C# 8.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am seriously looking forward to the Nullable reference types (I have a few libraries to get updated to support it still), Switch expressions and recursive patterns, and also finding out where the other features start to find their use for me.&lt;/p&gt;
&lt;h2 id=&#34;net-core-30&#34;&gt;.Net Core 3.0&lt;/h2&gt;
&lt;p&gt;Once again, we have a proper Major release. This one is as important as the .Net Core 2.0 milestone was, but hopefully, the jump is much more stable. This is an umbrella for new dotnet CLI tool updates, MSBuild updates, a new 3.0 runtime, and support for all in Visual Studio as well.&lt;/p&gt;
&lt;p&gt;The big headline is Windows Desktop Coming to .NET Core. Yes, this is OS-specific and not cross-platform, but is a huge step in getting those GUI apps transferred over to the dotnet CLI and the .Net Core runtime. As part of this, they even OpenSourced all the GUI frameworks WPF, WinForms and WinUI.&lt;/p&gt;
&lt;p&gt;Things to look out for when moving to .Net Core 3.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Desktop Applications support&lt;/li&gt;
&lt;li&gt;Applications now have executables by default&lt;/li&gt;
&lt;li&gt;dotnet build now copies dependencies&lt;/li&gt;
&lt;li&gt;Local dotnet tools&lt;/li&gt;
&lt;li&gt;ARM64 and updated platform support&lt;/li&gt;
&lt;li&gt;Many language and runtime improvements
&lt;ul&gt;
&lt;li&gt;fast in-box JSON Reader&lt;/li&gt;
&lt;li&gt;C# 8 language features support&lt;/li&gt;
&lt;li&gt;System.Buffers.SequenceReader&lt;/li&gt;
&lt;li&gt;IoT improvements&lt;/li&gt;
&lt;li&gt;TLS improvements on linux&lt;/li&gt;
&lt;li&gt;Cryptography improvements&lt;/li&gt;
&lt;li&gt;More BCL Improvements using optimized Span&lt;T&gt;, Memory&lt;T&gt;&lt;/li&gt;
&lt;li&gt;Default implementations of interface members&lt;/li&gt;
&lt;li&gt;Tiered Compilation on by default&lt;/li&gt;
&lt;li&gt;Assembly Metadata Reading with MetadataLoadContext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To see more of the changes in detail, especially the language and runtime improvements, you can read up more yourself &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/&#34;&gt;in the Announcement from December&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;netstandard21&#34;&gt;.NetStandard2.1&lt;/h2&gt;
&lt;p&gt;The release of .Net Core 2.1 and 2.2 went by without needing to update the baseline of compatibility. The NetStandard2.0 target has stood up well as a baseline common denominator after the false start .NetStandard1.x gave some of us.&lt;/p&gt;
&lt;p&gt;Late last year Microsoft &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/&#34;&gt;Announced .NET Standard 2.1&lt;/a&gt;, which is a new required standard that will be first implemented in .dotnet 3.0 and .Net Framework 4.8 is a foundation to allow using some of the new language features that need Runtime support, such as Async streams, indexers and ranges.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As mentioned, you can start playing with some of this stuff today in the &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/&#34;&gt;Preview of Visual Studio 2019&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Plenty of new stuff to learn over the coming year and I can&amp;rsquo;t wait for Release day so I can update everything I have.  First stop will be Nullable reference types.&lt;/p&gt;
&lt;p&gt;What are you looking forward to using the most?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net on Docker - What&#39;s in my Dockerfile? Tips and Tricks</title>
      <link>https://blogmigration.csmac.nz/post/dotnet-docker-tips-and-tricks/</link>
      <pubDate>Mon, 16 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/dotnet-docker-tips-and-tricks/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve started getting into building Docker Containers as deployment packages.  These are some learnings that I want to share, hopefully helping countless others with a better build, test and debug cycle with .Net on Docker with Visual Studio.&lt;/p&gt;
&lt;h3 id=&#34;start-with-the-defaults&#34;&gt;Start with the defaults&lt;/h3&gt;
&lt;p&gt;Use the built-in tools in Visual Studio to docker-ify and docker-compose your projects. The defaults all work, and provide a nice reference implementation of how to do things.&lt;/p&gt;
&lt;p&gt;In Visual Studio 2017 (I&amp;rsquo;m using 15.7.3, so at least that version if not earlier) You can select a project from the Solution Explorer, &lt;code&gt;right-click =&amp;gt; Add&lt;/code&gt; and you will see options for &lt;code&gt;Docker Support&lt;/code&gt; and &lt;code&gt;Container Orchestrator Support&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/c_scale,w_387/v1531727131/DockerSupport_l16dry.png&#34; alt=&#34;Visual Studio Project context menu showing Docker commands.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Docker Support will create a &lt;code&gt;Dockerfile&lt;/code&gt; for your project, that follows some conventions and best practices, including separate &lt;code&gt;build&lt;/code&gt;/&lt;code&gt;publish&lt;/code&gt; steps. (This may be limited to &lt;code&gt;NetCoreApp&lt;/code&gt; projects, I haven&amp;rsquo;t thoroughly tested this function yet outside if that scope. You can even choose between Windows and Linux Containers. This might also create the docker-compose, and &lt;code&gt;.dockerignore&lt;/code&gt; files as well.&lt;/p&gt;
&lt;p&gt;Container Orchestrator Support creates a new &lt;code&gt;*.dcproj&lt;/code&gt; project in your solution that orchestrates a docker-compose file which includes your selected project. If you already have an orchestrator project, the selected project will be added to it.&lt;/p&gt;
&lt;p&gt;You can also find &lt;a href=&#34;https://docs.docker.com/engine/examples/dotnetcore/&#34;&gt;instructions on docs.docker.com for .Net Core apps&lt;/a&gt; which covers some of the basics and recommendations too.&lt;/p&gt;
&lt;h3 id=&#34;proximity-is-key&#34;&gt;Proximity is key&lt;/h3&gt;
&lt;p&gt;Put your &lt;code&gt;Dockerfile&lt;/code&gt; in the same folder as the csproj file. At some point in the future (or if someone really digs into the MSBuild files and finds a hack) this should be able to go anywhere. But for now, putting it at the root of the project with the &lt;code&gt;*.csproj&lt;/code&gt; project file lets it work correctly with Visual Studio.&lt;/p&gt;
&lt;p&gt;By default, you also usually have everything relative to a parent directory, such as the source or repository root. This becomes the context you use.  The context can be anywhere you like, but I find shared configs from root as well as the solution file being available is handy. You may even have build scripts here that you include.&lt;/p&gt;
&lt;h3 id=&#34;minimum-vs-default&#34;&gt;Minimum vs default&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start with the minimum valid &lt;code&gt;Dockerfile&lt;/code&gt; to build our NetCoreApp2.1 application. The application itself doesn&amp;rsquo;t matter, only that it builds.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM microsoft/dotnet:2.1-sdk
WORKDIR /src
COPY . .
RUN dotnet publish MyApp.csproj -c Release -o /app
WORKDIR /app
COPY /app .
ENTRYPOINT [&amp;quot;dotnet&amp;quot;, &amp;quot;MyApp.dll&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s the least you need, but we can do better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This only works if you run build in the context of the project folder&lt;/li&gt;
&lt;li&gt;This will copy over local bin/obj folders (unless you have a &lt;code&gt;.dockerignore&lt;/code&gt; file already - Visual Studio may add one for you.)&lt;/li&gt;
&lt;li&gt;Our final container is large because it includes all of the dotnet CLI build tools&lt;/li&gt;
&lt;li&gt;Our final container has all the build artifacts in it, making it larger again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of this is solved by following the &lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34;&gt;Best practices&lt;/a&gt; which you get for free if you create using Visual Studio.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM microsoft/dotnet:2.1-runtime AS base
WORKDIR /app

FROM microsoft/dotnet:2.1-sdk AS build
WORKDIR /src
COPY MyApp/MyApp.csproj MyApp/
RUN dotnet restore MyApp/MyApp.csproj
COPY . .
WORKDIR /src/MyApp
RUN dotnet build MyApp.csproj -c Release -o /app

FROM build AS publish
RUN dotnet publish MyApp.csproj -c Release -o /app

FROM base AS final
WORKDIR /app
COPY --from=publish /app .
ENTRYPOINT [&amp;quot;dotnet&amp;quot;, &amp;quot;MyApp.dll&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;multiple-stages&#34;&gt;Multiple Stages&lt;/h3&gt;
&lt;p&gt;Talking through this file a bit, we have a multi-stage build, that has three parts.
Note that the actual container instance that matches the tag, is the one that starts with the base container defined in the &lt;code&gt;FROM&lt;/code&gt; command, and has run all the instructions up until the next &lt;code&gt;FROM&lt;/code&gt; command, or the end of the file.&lt;/p&gt;
&lt;p&gt;First, we have a &lt;code&gt;base &lt;/code&gt;(&lt;code&gt;FROM microsoft/dotnet:2.1-runtime AS base&lt;/code&gt;) that serves two purposes: it defines the final result container base up front and also gets used by Visual Studio when performing a special debug build. Visual Studio will build just this target in a multi-stage build, and copy in the build results to debug with. We can declare anything here that we might want in our final output container, and also need during debugging.&lt;/p&gt;
&lt;p&gt;Next, we have a &lt;code&gt;build&lt;/code&gt; (&lt;code&gt;FROM microsoft/dotnet:2.1-sdk AS build&lt;/code&gt;) which is the container the app is built in. This is where we copy over all our source files (&lt;code&gt;COPY . .&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Next, a &lt;code&gt;publish&lt;/code&gt;(&lt;code&gt;FROM build AS publish&lt;/code&gt;) which starts from our earlier &lt;code&gt;build&lt;/code&gt;, and is used to produce the final binaries.&lt;/p&gt;
&lt;p&gt;And finally, a &lt;code&gt;final&lt;/code&gt; (&lt;code&gt;FROM base AS final&lt;/code&gt;) that starts with our &lt;code&gt;base&lt;/code&gt; from earlier and produces the container we consider the resulting application. This container is also configured with any ports we want to expose (possibly done in &lt;code&gt;base&lt;/code&gt;) and our application entry point (&lt;code&gt;ENTRYPOINT [&amp;quot;dotnet&amp;quot;, &amp;quot;/app/GitHubTagAndRelease.dll&amp;quot;]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Using multistage in this way solves the large container size concerns from earlier, and even if we copy too much&lt;/p&gt;
&lt;p&gt;Briefly about caching. Each build step will cache the results if all previous steps are cached, and with &lt;code&gt;COPY&lt;/code&gt; commands, if the hash of the source files hasn&amp;rsquo;t changed.  For this reason, we selectively copy over the project first, run a &lt;code&gt;dotnet restore&lt;/code&gt;, and then pull in everything else. This caches the NuGet restore step so we don&amp;rsquo;t have to redownload these every time.&lt;/p&gt;
&lt;h3 id=&#34;ignore&#34;&gt;Ignore&lt;/h3&gt;
&lt;p&gt;We still have the issue of the bin/obj files being copied in from the source folder. Luckily, Visual Studio would add a &lt;code&gt;.gitignore&lt;/code&gt; file to solve this. If you add your own, the ignore lines you want are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*/bin
*/obj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is relative to the base path, so will match &lt;code&gt;MyApp/bin&lt;/code&gt; and &lt;code&gt;MyApp.Tests/bin&lt;/code&gt; but not &lt;code&gt;src/MyOtherProject/bin&lt;/code&gt;. If you want a more comprehensive version, VS gives you this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.dockerignore
.env
.git
.gitignore
.vs
.vscode
docker-compose.yml
docker-compose.*.yml
*/bin
*/obj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we don&amp;rsquo;t ignore the &lt;code&gt;Dockerfile&lt;/code&gt;, which means changes to the &lt;code&gt;Dockerfile&lt;/code&gt; also cache-bust at the &lt;code&gt;COPY&lt;/code&gt; step.&lt;/p&gt;
&lt;h3 id=&#34;build-with-testing-in-mind&#34;&gt;Build with testing in mind&lt;/h3&gt;
&lt;p&gt;Like the default conventions, I build in a &lt;code&gt;build&lt;/code&gt; container, then publish to a &lt;code&gt;publish&lt;/code&gt; container. This means the final container has minimal dependencies. But I add a twist.&lt;/p&gt;
&lt;p&gt;When the script does the &lt;code&gt;COPY&lt;/code&gt; of the project before the restore (a nice caching enhancement I really like) I also copy the test project file at the same time. This gets restored with the project in another restore. Then after doing the project build, I also run the project Tests. Now I know that my container passed all tests before it built because it has to.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ARG DOCKER_SKIP_TESTS=

FROM microsoft/dotnet:2.1-runtime AS base
WORKDIR /app

FROM microsoft/dotnet:2.1-sdk AS build
WORKDIR /src
COPY MyApp/MyApp.csproj MyApp/
COPY MyApp.Tests/MyApp.Tests.csproj MyApp.Tests/
RUN dotnet restore ./MyApp/MyApp.csproj /p:Configuration=Release
RUN dotnet restore ./MyApp.Tests/MyApp.Tests.csproj /p:Configuration=Release
COPY . .
RUN dotnet build ./MyApp/MyApp.csproj --no-restore -c Release -o /app

FROM build as test
ARG DOCKER_SKIP_TESTS

WORKDIR /src
RUN [ ! -z &amp;quot;$DOCKER_SKIP_TESTS&amp;quot; ] &amp;amp;&amp;amp; : || dotnet build ./MyApp.Tests/MyApp.Tests.csproj --no-restore -c Release
RUN [ ! -z &amp;quot;$DOCKER_SKIP_TESTS&amp;quot; ] &amp;amp;&amp;amp; : || dotnet test ./MyApp.Tests/MyApp.Tests.csproj --no-restore --no-build -v normal -c Release

FROM build AS publish
WORKDIR /src/MyApp
RUN dotnet publish MyApp.csproj -c Release -o /app

FROM base AS final
WORKDIR /app
COPY --from=publish /app .
ENTRYPOINT [&amp;quot;dotnet&amp;quot;, &amp;quot;MyApp.dll&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When running build and release against the target project, I also tell it to skip the restore. This avoids any restore invalidation that may occur from doing the &lt;code&gt;COPY&lt;/code&gt;, for whatever reason.  Also during the release, I skip the build, so it reuses the build result from the previous step. Splitting up these steps just saves that little bit of rebuild time and duplication along the way.&lt;/p&gt;
&lt;p&gt;I use bash conditional logic to be able to disable the tests from running (to go faster during dev build cycles) as well. The build-arg &lt;code&gt;DOCKER_SKIP_TESTS&lt;/code&gt; is unset, and the test commands are run. If I declare this, it will skip running the tests.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build --build-arg DOCKER_SKIP_TESTS=1 -f .\MyApp\Dockerfile .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having &lt;code&gt;DOCKER_SKIP_TESTS=&lt;/code&gt; declared on the first line means the cache is invalidated whenever I switch this setting on and off, so I get a clean build with, or without tests, and not somewhere in between.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve even managed to convince my &lt;code&gt;Dockerfile&lt;/code&gt; it is a ci agent, and it publishes coverage and test results to TeamCity&amp;hellip; but that is for another article I think.&lt;/p&gt;
&lt;h3 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h3&gt;
&lt;p&gt;These are some of the tricks that I make use of in my &lt;code&gt;Dockerfile&lt;/code&gt;.  Next time, we will take a look at some more advanced features, using an AspNetCore application running in docker and Visual Studio debugging.&lt;/p&gt;
&lt;p&gt;For an example of this working in practice, I&amp;rsquo;ve set up an example project on GitHub. &lt;a href=&#34;https://github.com/csMACnzBlog/DockerDotnetDemo&#34;&gt;github.com/csMACnzBlog/DockerDotnetDemo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net core tests not showing up in VS? Here&#39;s the trick...</title>
      <link>https://blogmigration.csmac.nz/post/net-core-tests-not-showing/</link>
      <pubDate>Tue, 01 Nov 2016 01:38:35 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/net-core-tests-not-showing/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using VS Code. Great tool. But it means my tests are running through a command line runner. Essentially I use &lt;code&gt;dotnet test&lt;/code&gt;, which is nice since I am targeting multiple platforms (.Net 4.5, 4.5.2, 4.6 &amp;amp; netcoreapp1.0).&lt;/p&gt;
&lt;p&gt;But when I open my test project in Visual Studio, I have 0 tests. Thats zero, none, not a single one.&lt;/p&gt;
&lt;p&gt;Turns out, if you want tests to show up in Visual Studio you have to make sure that in your &lt;code&gt;project.json&lt;/code&gt;, &lt;code&gt;netcoreapp1.0&lt;/code&gt; needs to be the first framework in the &lt;code&gt;frameworks&lt;/code&gt; section. Otherwise it don&amp;rsquo;t work right.&lt;/p&gt;
&lt;p&gt;Moving &lt;code&gt;netcoreapp1.0&lt;/code&gt; from being the last framework to the first solved all my problems. Now I have tests showing and passing in Visual Studio.&lt;/p&gt;
&lt;p&gt;Done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Treat Warnings As Errors with this one weird PowerShell Script...</title>
      <link>https://blogmigration.csmac.nz/post/treat-warnings-as-errors-with-this-one-weird-powershell-script/</link>
      <pubDate>Mon, 09 May 2016 08:30:59 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/treat-warnings-as-errors-with-this-one-weird-powershell-script/</guid>
      <description>&lt;p&gt;There is this great feature in Visual Studio that lets you really dial up the quality of your code. It has been there forever it seems, but very few people use it.&lt;/p&gt;
&lt;p&gt;The compiler spits out errors, which stop your app compiling. You fix your errors and move on.  But the compiler also spits out a lot of warnings too. And many of these are to do with the quality of your code, and possible code errors you have introduced that could cause you issues later on.&lt;/p&gt;
&lt;p&gt;Did you know you can get the builds to actually fail to compile from these warnings?&lt;/p&gt;
&lt;h3 id=&#34;treat-warnings-as-errors&#34;&gt;Treat Warnings As Errors&lt;/h3&gt;
&lt;p&gt;If you head to the properties dialog of a project, you will see the following under the Build menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1462825696/TreatWarningsAsErrors_vzev9g.png&#34; alt=&#34;Visual Studio Build Config Settings&#34;&gt;&lt;/p&gt;
&lt;p&gt;See that radio button? Treat warnings as errors. You wanna set that baby to All. Do it now! While you are in here, set the Warning level to 4 as well.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! You are all set to start failing your builds, for this project anyway. In fact, go ahead and try to build. There is a better than normal chance that you probably already have some warnings and now have a failing build. Well done.&lt;/p&gt;
&lt;p&gt;Actually, you probably only turned that on for Debug builds, so go repeat those steps after changing the Configuration dropdown to Release. And any others you have where this applies.&lt;/p&gt;
&lt;p&gt;The nice thing about &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; is that it is in the *.csproj file XML, and is actually an MSBuild command.  This means that it will use the same settings when you build at command line using either devenv or MSBuild tools.  So your CI server will apply this too.&lt;/p&gt;
&lt;p&gt;As well as the &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; command, there is this &lt;code&gt;WarningLevel&lt;/code&gt;. Just turn it up to &lt;code&gt;4&lt;/code&gt; and move on, it is the option you want, trust me.&lt;/p&gt;
&lt;h3 id=&#34;-one-weird-trick&#34;&gt;&amp;hellip; One weird trick&lt;/h3&gt;
&lt;p&gt;So, I mentioned one weird script right?&lt;/p&gt;
&lt;p&gt;If you have an existing solution with lots of projects, you won&amp;rsquo;t want to turn these all on one by one manually. You also don&amp;rsquo;t want to fuss around making sure that if you or someone else has added a bunch of new projects, that these rules are turned on correctly.&lt;/p&gt;
&lt;p&gt;To solve these issues, I have a PowerShell script that runs over a directory, finds all the *.csproj files, and updates their Debug and Release configurations with &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;WarningLevel&lt;/code&gt; to `4&#39;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;get-childitem . -include *.csproj -recurse -ErrorAction SilentlyContinue | %{
    $_.FullName
    [xml]$proj = get-content $_.FullName
    $modified = 0
    $proj.Project.PropertyGroup | 
    where-object { $_.Condition -match &#39;Configuration.*Platform.*(Debug|Release)&#39; } | %{
        if (-not $_.TreatWarningsAsErrors) {
            $node = $proj.CreateElement(&#39;TreatWarningsAsErrors&#39;, $proj.Project.NamespaceURI)
            $node.InnerText = &#39;true&#39;
            $node = $_.AppendChild($node)
            $modified = 1
        }
        if ($_.TreatWarningsAsErrors -ne &#39;true&#39;) {
            $_.TreatWarningsAsErrors = &#39;true&#39;
            $modified = 1
        }
        if (-not $_.WarningLevel) {
            $node = $proj.CreateElement(&#39;WarningLevel&#39;, $proj.Project.NamespaceURI)
            $node.InnerText = &amp;quot;4&amp;quot;
            $node = $_.AppendChild($node)
            $modified = 1
        }
        if ($_.WarningLevel -ne &amp;quot;4&amp;quot;) {
            $_.WarningLevel.InnerText = &amp;quot;4&amp;quot;
            $modified = 1
        }
    }
    if ($modified -eq 1) {
        $proj.Save($_.FullName)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also up on &lt;a href=&#34;https://gist.github.com/csMACnz/6b736c9109023af4c09f6f0b9405081b&#34;&gt;a gist&lt;/a&gt; if you prefer.&lt;/p&gt;
&lt;p&gt;That is it. Run that in your solution directory and you should be sorted.  Don&amp;rsquo;t forget to fix the compiler errors before checking your changes back in though.&lt;/p&gt;
&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;There is always one project that disobeys with the strict rules. That&amp;rsquo;s ok, just leave it off and come back and fix the issues when you have a spare few moments. Perhaps in a quiet Friday afternoon, or the day after ship day while you wait for those bug reports to come in. Once the problem is fixed, run the script again and hey presto it will be turned on again.&lt;/p&gt;
&lt;p&gt;There are other ways to filter and ignore specific issues but I will leave that as an exercise for the reader if they really want to go down that path.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio 2015 vs Visual Studio 2013</title>
      <link>https://blogmigration.csmac.nz/post/visual-studio-2015-vs-visual-studio-2013/</link>
      <pubDate>Wed, 05 Aug 2015 11:13:12 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/visual-studio-2015-vs-visual-studio-2013/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been running some numbers over our solution to try and make things more efficient. While I was at it, I figured I would put 2013 head to head with 2015.&lt;/p&gt;
&lt;p&gt;The main test I ran was to take a solution open in Visual Studio and make sure it builds. I then ran Clean Solution.  Using a stopwatch (so accuracy +- 1-second values) I recorded how long it took to build. I repeated this 5 times, over three machines, once each with 2013 and 2015.  So first, the raw numbers (in seconds):&lt;/p&gt;
&lt;!---
Really need table support here:
--&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Laptop1 - 2013&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Laptop1 - 2015&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Laptop2 - 2013&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Laptop2 - 2015&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Desktop - 2013&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Desktop - 2015&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;70&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;55&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;63&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;49&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;60&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;52&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;76&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;51&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;64&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;48&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;60&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;43&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;75&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;45&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;65&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;47&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;57&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;39&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;76&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;44&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;63&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;47&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;60&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;35&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;78&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;45&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;62&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;45&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;58&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;43&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The average results from this looks like so:&lt;/p&gt;
&lt;!---
Really need table support here:
--&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Laptop1&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Laptop2&lt;/th&gt;
    &lt;th style=&#34;padding:5px;&#34;&gt;Desktop&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td &gt;VS 2013&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;75&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;63&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;59&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td &gt;VS 2015&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;48&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;47&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;42&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td &gt;Difference&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;27&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;16&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;17&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td &gt;Improvement&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;36%&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;25%&lt;/td&gt;
    &lt;td style=&#34;text-align:center;&#34;&gt;28%&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And for completeness, I thought I would graph the data as well:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1438810998/VSBuildGraph_gsk2nx.png&#34; alt=&#34;Visual Studio Build times comparing 2013 to 2015 across devices.&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Across the board, we have significate improvements. Visual Studio 2015 is just faster. And since nothing obvious breaks for my solution, at this stage I will be using it as the faster choice going forward.&lt;/p&gt;
&lt;p&gt;This test only ran across one solution with 30 C# projects, across 3 very similar machines, only 5 times each. For a more conclusive answer, you would want to run this across a whole range of extra solutions and machines. But from this limited view, I&amp;rsquo;m really impressed by the perf increase of builds that 2015 provides me, for my particular code base, at this point in time.&lt;/p&gt;
&lt;h3 id=&#34;other-findings&#34;&gt;Other Findings&lt;/h3&gt;
&lt;p&gt;During this exercise of measuring I can across one other nice conclusion as well. Restoring NuGet packages on a large solution with a complex dependency graph is much faster when using the command line, rather than letting visual studio load them on demand right before a build.  I didn&amp;rsquo;t get any hard numbers yet, but it feels significant. It took 2-4 minutes for VS to finish loading NuGet packages before it started building, versus the same dependencies loaded from the command line in 20 or 30 seconds.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;nuget restore src\mySolution.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is true that I am using a locally hosted NuGet 2 server, and that could be a factor, so your mileage may vary. But I usually find that command line tasks do come out faster compared to GUI ones, and this is one I will change my habits over.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using C# 5.0 with Visual Studio 2015</title>
      <link>https://blogmigration.csmac.nz/post/using-c5-with-visual-studio-2015/</link>
      <pubDate>Sun, 26 Jul 2015 07:46:16 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/using-c5-with-visual-studio-2015/</guid>
      <description>&lt;p&gt;Visual Studio 2015 is out and brings us the new C# 6 language features. We also have the new .Net 4.6 Runtime. But what does that mean?&lt;/p&gt;
&lt;p&gt;Well, the framework version and language version are two separate concerns. You can practically pick any framework, with any language, and it will work. This means that If you want to use C# 6 features on your .Net 4.0 application, you can. Ok, so some language features require specific framework libraries, like generics, and async, but most features tend to be &lt;a href=&#34;https://en.wikipedia.org/wiki/Syntactic_sugar&#34;&gt;syntactic sugar&lt;/a&gt;. You have to use VS 2015 to have a compiler with the C# 6 features, but you can also use .Net 4.6 in Visual Studio 2013 with C# 5 and older language versions.&lt;/p&gt;
&lt;p&gt;There is no reason I can think of to not upgrade to Visual Studio 2015 for your application development. But maybe there is some obscure edge case or policy that stops you, or some of your team, from upgrading. By default, projects will use the latest language version when built in Visual Studio, and so early adopters will start seeing hints and suggestions to use these new features. How can we stop ourselves and our team from breaking compilation in VS 2013?&lt;/p&gt;
&lt;p&gt;Like I said, by default a project will use the latest version that Visual Studio supports. If you want to lock in down to a specific version, 5 in this case, you can add the following to your &lt;code&gt;*.csproj&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup ...&amp;gt;
  ...
  &amp;lt;LangVersion&amp;gt;5&amp;lt;/LangVersion&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But really, who would do this by hand? From Visual Studio, you right-click on your project in &lt;code&gt;Solution Explorer&lt;/code&gt;, and select &lt;code&gt;Properties&lt;/code&gt; from the context menu. From the project settings window, select the &lt;code&gt;Build&lt;/code&gt; tab from the left, and click the &lt;code&gt;Advanced...&lt;/code&gt; button in the bottom right of the settings window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1437873253/VSAdvancedProperties_gzghuy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the dialog that opens, you will see the Language Version setting at the top. Change this from default to the version you want to use (in this case C# 5.0).  Repeat with each configuration you want this to apply to (Release, Debug, any custom configuration you might have) and then with each project you want to apply it to. This is what adds the &lt;code&gt;LangVersion&lt;/code&gt; XML I showed you before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1437873252/VSAdvancedBuildVersion_rxqukh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;One more thing, If you use ReSharper.  With your project selected in Solution Explorer, view the Properties window.  You will see ReSharper&amp;rsquo;s C# Language Level. This is what drives ReSharper hints.  This also has a default which matches the version selected in the project, and a way to force a specific language version. Select C# 5.0 here and ReSharper will stop suggesting the new features to you, even if you have the project set to default on VS 2015, or set to C# 6.0 specifically. You may want to use this setting locally just to turn of the new features without changing the &lt;code&gt;*.csproj&lt;/code&gt;, since this setting is part of ReSharper&amp;rsquo;s &lt;code&gt;*.dotsettings&lt;/code&gt; file (and usually not checked into Source Control).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1437873253/VSReSharperLanguageProperties_kbtkml.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Set this up if you need it, and your team won&amp;rsquo;t complain at you for using new features that break their flow while they are stuck in VS 2012 or 2013, while you race ahead with the productivity features build into the new VS 2015 IDE.&lt;/p&gt;
&lt;p&gt;Your mileage may vary, and the ReSharper settings may be enough for you. But if you have a wider team and only a minority using older versions, or if you are the only guy stuck on the old IDE, then forcing compile time errors on the rest of the team when they try and use the new feature will save time for everyone in the long run.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Demoing with Visual Studio</title>
      <link>https://blogmigration.csmac.nz/post/code-demoing-with-visual-studio/</link>
      <pubDate>Sun, 24 May 2015 08:24:28 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/code-demoing-with-visual-studio/</guid>
      <description>&lt;p&gt;I often find myself in a meeting or presentation, Visual Studio open, showing some code. What is the question I can almost guarantee that someone will ask? Can you please make the code bigger.&lt;/p&gt;
&lt;p&gt;Now I have a trick that I find really useful that saves a lot of hassle and works really well. It comes in the form of a Visual Studio extension called &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/dbcb8670-889e-4a54-a226-a48a15e4cace&#34;&gt;Productivity Power Tools 2013&lt;/a&gt;.  Specifically, the built in presentation feature.&lt;/p&gt;
&lt;p&gt;Productivity Power Tools 2013 is a Visual Studio extension I use for numerous reasons. One being this awesome present mode feature, but others include coloured tabs, and squiggles for Error visualisations.&lt;/p&gt;
&lt;p&gt;So how does the present mode work?  Pretty straight forward. There are three tasks: &lt;code&gt;PresentOn&lt;/code&gt; &lt;code&gt;PresentOff&lt;/code&gt; and &lt;code&gt;PresentEdit&lt;/code&gt;.  These tasks can be found in the Quick Launch bar, in the top right of Visual Studio. You can focus the cursor in the Quick Launch bar but using the &lt;code&gt;Ctrl + Q&lt;/code&gt; keyboard shortcut.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1432098704/Quicklaunch_cprcam.png&#34; alt=&#34;Visual Studio&amp;rsquo;s Quick Launch feature.&#34;&gt;&lt;/p&gt;
&lt;p&gt;You type &lt;code&gt;Present&lt;/code&gt; and it will show you the three options, with descriptions for you to choose from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1432098704/PresentQuickLaunch_ezg9xl.png&#34; alt=&#34;Present search results in Quick Launch&#34;&gt;&lt;/p&gt;
&lt;p&gt;So what do each of the options do? Well if it is currently off, you can use &lt;code&gt;PresentOn&lt;/code&gt;  to turn on presentation mode. When on, using &lt;code&gt;PresentOff&lt;/code&gt; turns it off again.  &lt;code&gt;PresentEdit&lt;/code&gt; allows you to quickly open the settings xml file for presenter mode, and change the fonts and sizes of text used in visual studio, when you turn presentation mode on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1432098966/PresentEditSettings_cheawe.png&#34; alt=&#34;Your presenter mode settings configuration&#34;&gt;&lt;/p&gt;
&lt;p&gt;The EnvironmentFont* settings change the font size for things like the menu and labels, while TextEditorFont* affects the editor text. You can emphasise your code or the IDE, depending on what you are trying to demo.&lt;/p&gt;
&lt;p&gt;Here you can see I have made the text editor bigger, and the environment smaller.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1432099978/OverTheTopPresent_ghcuev.png&#34; alt=&#34;Extreme font sizing for effect.&#34;&gt;&lt;/p&gt;
&lt;p&gt;For most of what I present, I find putting the Environment up just a little, and the font to about 16 works well for most demonstrations, at whatever resolution projectors seem to put my machine into.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/csmacnz/image/upload/v1432099979/DefaultPresentSettings_n1l5es.png&#34; alt=&#34;My default presentation mode font settings.&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you have more hi-res monitors such as televisions or lcd screens, you might want to dial up the font a bit bigger. The default fonts work fine for me, but you can change these to whatever makes sense for you as well.&lt;/p&gt;
&lt;p&gt;When your all done with your presentation, you can easily use &lt;code&gt;PresentOff&lt;/code&gt; to get back to a reasonable working surface without having to change your fonts back manually, and this avoids the constant scroll-zoom every time you open a file during a demo.&lt;/p&gt;
&lt;h4 id=&#34;update-2015-05-29&#34;&gt;Update: 2015-05-29&lt;/h4&gt;
&lt;p&gt;I just found out about &lt;a href=&#34;http://www.codepp.net/&#34;&gt;Code Presenter Pro&lt;/a&gt; for presenting code in PowerPoint. This is available as a &lt;a href=&#34;https://store.office.com/code-presenter-pro-WA104379263.aspx&#34;&gt;PowerPoint Addin&lt;/a&gt; and makes your code look much clearing and more usable from inside your slides. Worth a look.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>