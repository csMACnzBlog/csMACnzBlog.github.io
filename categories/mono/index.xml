<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mono on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/mono/</link>
    <description>Recent content in Mono on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 08 Feb 2015 15:29:13 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/mono/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>monocov &#43; Travis-CI = WINNING</title>
      <link>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</link>
      <pubDate>Sun, 08 Feb 2015 15:29:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</guid>
      <description>&lt;p&gt;After much frustration, I now have &lt;a href=&#34;https://github.com/mono/monocov&#34;&gt;monocov&lt;/a&gt; running on my Travis-CI build, and I&amp;rsquo;m going to share with you how I did it.&lt;/p&gt;
&lt;p&gt;TL;DR
The coverage results don&amp;rsquo;t seem accurate just yet, but jump to the end to see the full script to get it going on your build.&lt;/p&gt;
&lt;p&gt;As I mentioned in a &lt;a href=&#34;http://blog.csmac.nz/introducing-coveralls-net&#34;&gt;previous post&lt;/a&gt;, I am building a &lt;a href=&#34;https://coveralls.io&#34;&gt;coveralls.io&lt;/a&gt; publisher for .Net code coverage.  This means (to me any way) that I need to support mono coverage as well.  The best suggested coverage tool &lt;a href=&#34;http://www.mono-project.com/docs/debug+profile/profile/code-coverage/&#34;&gt;mentioned online&lt;/a&gt; for mono is monocov, despite being officially unmaintained since May 2011.  But I stuck with it.&lt;/p&gt;
&lt;p&gt;So I started building a &lt;a href=&#34;https://github.com/csMACnz/Coveralls.net-Samples&#34;&gt;sample library&lt;/a&gt; with CI on github and very easily got examples working for AppVeyor on windows.  But I wanted to get monocov working as a sample with Travis-CI before I built support for it.  I found pretty quickly that monocov is not installed on Travis-ci, and in fact there is no package available to install it either that I could find.&lt;/p&gt;
&lt;p&gt;Thanks to github forks, I found someone else had forked and updated the source for monocov to work with a newer Xamarin version of the mono installation.  So naturally I forked this fork so I could make my own changes if necessary.&lt;/p&gt;
&lt;p&gt;Using a few tricks I was able to get my Travis-CI build to clone down the git fork, build it and install it on the build server.  I did have to change a compile setting and set a variable based on &lt;a href=&#34;http://keithnordstrom.com/getting-the-monocov-profiler-to-link-on-ubuntu-13&#34;&gt;this blog post&lt;/a&gt;, and I had to pull down the &lt;a href=&#34;https://www.nuget.org/packages/Mono.Cecil/&#34;&gt;mono.cecil nuget package&lt;/a&gt; so I had the Mono.Cecil.dll file required by the C# side of monocov. I also made to install gtk-sharp2 for the GUI library to build with make, although I don&amp;rsquo;t use it. After all these steps I finally got it to a point where it was installed.  The Travis-CI code ended up using these instructions in the install section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- sudo apt-get install gtk-sharp2
- curl -sS https://api.nuget.org/packages/mono.cecil.0.9.5.4.nupkg &amp;gt; /tmp/mono.cecil.0.9.5.4.nupkg.zip
- unzip /tmp/mono.cecil.0.9.5.4.nupkg.zip -d /tmp/cecil
- cp /tmp/cecil/lib/net40/Mono.Cecil.dll .
- cp /tmp/cecil/lib/net40/Mono.Cecil.dll /tmp/cecil/
- git clone --depth=50 git://github.com/csMACnz/monocov.git ../../csMACnz/monocov
- cd ../../csMACnz/monocov
- cp /tmp/cecil/Mono.Cecil.dll .
- ./configure
- make
- sudo make install
- cd ../../csMACnz/Coveralls.net-Samples 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note I changed directories a few times, and pulled monocov into a directory beside my actual repo build folder.&lt;/p&gt;
&lt;p&gt;To get it to run over my tests, I had to use a couple of options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set the load library path as seen in the &lt;a href=&#34;http://keithnordstrom.com/getting-the-monocov-profiler-to-link-on-ubuntu-13&#34;&gt;blog post&lt;/a&gt; I mentioned earlier.&lt;/li&gt;
&lt;li&gt;&amp;ndash;profile=monocov:outfile=monocovCoverage.cov to get monocov to run and output to a specified file&lt;/li&gt;
&lt;li&gt;,+[GameOfLife],+[GameOfLife.xUnit.Tests] as part of the coverage to specify which assemblies to record coverage for&lt;/li&gt;
&lt;li&gt;/noshadow so it didn&amp;rsquo;t use a temp directory for the results, since it has to locate the dll in step 2&lt;/li&gt;
&lt;li&gt;run a second step afterwards to convert the *.cov file into a folder of detailed xml files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting code for this looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- export LD_LIBRARY_PATH=/usr/local/lib
- mono --debug --profile=monocov:outfile=monocovCoverage.cov,+[GameOfLife],+[GameOfLife.xUnit.Tests] ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./src/GameOfLife.xUnit.Tests/bin/Release/GameOfLife.xUnit.Tests.dll  /noshadow
- monocov --export-xml=monocovCoverage monocovCoverage.cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So whats the next steps? Well now I have actual results I will get &lt;a href=&#34;https://github.com/csMACnz/coveralls.net&#34;&gt;coveralls.net&lt;/a&gt; support written and get it published to nuget and usable on my Travis-CI build, so it is passing.  After that I will look at the accuracy of the existing code, since my initial results haven&amp;rsquo;t really looked that accurate.&lt;/p&gt;
&lt;p&gt;In summary, and If you just skipped to the end, my full &lt;code&gt;travis.yml&lt;/code&gt; file running monocov over my .net project on Travis-CI looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: csharp
solution: ./src/GameOfLife.sln
install:
  - nuget restore ./src/GameOfLife.sln
  - chmod +x ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe
  - sudo apt-get install nunit-console
  - sudo apt-get install gtk-sharp2
  - curl -sS https://api.nuget.org/packages/mono.cecil.0.9.5.4.nupkg &amp;gt; /tmp/mono.cecil.0.9.5.4.nupkg.zip
  - unzip /tmp/mono.cecil.0.9.5.4.nupkg.zip -d /tmp/cecil
  - cp /tmp/cecil/lib/net40/Mono.Cecil.dll .
  - cp /tmp/cecil/lib/net40/Mono.Cecil.dll /tmp/cecil/
  - git clone --depth=50 git://github.com/csMACnz/monocov.git ../../csMACnz/monocov
  - cd ../../csMACnz/monocov
  - cp /tmp/cecil/Mono.Cecil.dll .
  - ./configure
  - make
  - sudo make install
  - cd ../../csMACnz/Coveralls.net-Samples
script:
  - xbuild /p:Configuration=Release ./src/GameOfLife.sln
  - export LD_LIBRARY_PATH=/usr/local/lib
  - mono --debug --profile=monocov:outfile=monocovCoverage.cov,+[GameOfLife],+[GameOfLife.xUnit.Tests] ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./src/GameOfLife.xUnit.Tests/bin/Release/GameOfLife.xUnit.Tests.dll  /noshadow
  - monocov --export-xml=monocovCoverage monocovCoverage.cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope someone finds this useful, and stay tuned for the coveralls.io update.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>