<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>INotifyDataErrorInfo on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/inotifydataerrorinfo/</link>
    <description>Recent content in INotifyDataErrorInfo on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Wed, 17 Nov 2010 20:52:11 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/inotifydataerrorinfo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom Control Validation in Silverlight</title>
      <link>https://csmacnzblog.github.io/post/custom-control-validation-in-silverlight/</link>
      <pubDate>Wed, 17 Nov 2010 20:52:11 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/custom-control-validation-in-silverlight/</guid>
      <description>&lt;p&gt;So you&amp;rsquo;ve built up your nice new fancy custom control, and some Dependency Properties for your users to bind there data to, what else could you want? How about validation? Turns out that the control base class is all ready set up for this exact scenario. There is only one step required: Create the Visual states. Just add a visualstategroup called &lt;code&gt;ValidationStates&lt;/code&gt; and a state for each of &lt;code&gt;Valid&lt;/code&gt;, &lt;code&gt;InvalidUnfocused&lt;/code&gt; and &lt;code&gt;InvalidFocused&lt;/code&gt; corresponding to how you want your control to behave when in each of those states. You can even add these attributes into your class cs file to aid in blending your control:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;[TemplateVisualState(GroupName = &amp;quot;ValidationStates&amp;quot;, Name = &amp;quot;Valid&amp;quot;)]`
[TemplateVisualState(GroupName = &amp;quot;ValidationStates&amp;quot;, Name = &amp;quot;InvalidUnfocused&amp;quot;)]
[TemplateVisualState(GroupName = &amp;quot;ValidationStates&amp;quot;, Name = &amp;quot;InvalidFocused&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suggest checking out how some of your favourite controls are templated for validation, such as CheckBox and TextBox, to build a default template that would fit in with the existing control validation states. This supports Exception Validation, &lt;code&gt;IDataErrorInfo&lt;/code&gt;, &lt;code&gt;INotifyDataErrorInfo&lt;/code&gt; including using &lt;code&gt;INotifyDataErrorInfo&lt;/code&gt; asynchronously. Of course you need to set up your bindings correctly using the &lt;code&gt;ValidatesOnExceptions=true&lt;/code&gt;, &lt;code&gt;NotifyOnValidationError=true&lt;/code&gt; binding properties.&lt;/p&gt;
&lt;p&gt;One quick Gotcha, that I found when testing this: make sure that you are binding on the property that reports the errors, especially when using the &lt;code&gt;INotifydataErrorInfo&lt;/code&gt;. You need to explicitly bind the datacontext to your validation object to get class level validation to trigger the control&amp;rsquo;s validation. This may be true for textboxes and other built-in controls as well, but I haven&amp;rsquo;t verified this theory yet.&lt;/p&gt;
&lt;p&gt;There is an excellent Whitepaper on validation using &lt;code&gt;INotifyDataErrorInfo&lt;/code&gt; at &lt;a href=&#34;http://www.silverlight.net/learn/whitepapers/introducing-new-inotifydataerrorinfo-interface/&#34;&gt;silverlight.net/learn/whitepapers&lt;/a&gt; as well as lots of posts around the web, if you take the time to look (or search). Jesse Liberty also has a &lt;a href=&#34;http://jesseliberty.com/2010/07/25/data-validation-and-templating/&#34;&gt;validation blog&lt;/a&gt; as part of a templates and visual states series on his blog, which i referred to when building up my own validation controls and viewmodels using &lt;code&gt;INotifyDataErrorInfo&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>