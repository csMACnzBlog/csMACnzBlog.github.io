<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>INotifyDataErrorInfo on csMacnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/inotifydataerrorinfo/</link>
    <description>Recent content in INotifyDataErrorInfo on csMacnz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Wed, 17 Nov 2010 20:52:11 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/inotifydataerrorinfo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom Control Validation in Silverlight</title>
      <link>https://csmacnzblog.github.io/post/custom-control-validation-in-silverlight/</link>
      <pubDate>Wed, 17 Nov 2010 20:52:11 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/custom-control-validation-in-silverlight/</guid>
      <description>So you&amp;rsquo;ve built up your nice new fancy custom control, and some Dependency Properties for your users to bind there data to, what else could you want? How about validation? Turns out that the control base class is all ready set up for this exact scenario. There is only one step required: Create the Visual states. Just add a visualstategroup called ValidationStates and a state for each of Valid, InvalidUnfocused and InvalidFocused corresponding to how you want your control to behave when in each of those states.</description>
    </item>
    
  </channel>
</rss>
