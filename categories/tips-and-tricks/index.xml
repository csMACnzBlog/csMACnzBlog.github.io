<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips and Tricks on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/tips-and-tricks/</link>
    <description>Recent content in Tips and Tricks on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 15 Oct 2018 05:00:00 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/tips-and-tricks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sharing audio to Google Hangouts (or Meets)</title>
      <link>https://csmacnzblog.github.io/post/sharing-audio-to-google-hangouts-or-meets/</link>
      <pubDate>Mon, 15 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/sharing-audio-to-google-hangouts-or-meets/</guid>
      <description><p>I work remotely, and I&rsquo;ve used a bunch of solutions over the last few years to be able to route audio from my computer into a meeting call in Google Hangouts. From hardware to virtual audio cable software, every solution has been finicky at best, and wrecks day-to-day audio and video at worst, and requires a bunch of mucking around every time I want to enable or disable the setup.</p>
<p>But not anymore.</p>
<p>Just recently I discovered that the power of Google Hangouts combined with the power of Chrome Cast is an amazing solution to all your problems!</p>
<p>Well, that is to say, using Chromecast with your Hangouts solves your audio problems.</p>
<p>First things first, the problem.  I have a video with audio, and I want to share that audio to the meeting I am in. By default, the audio into the call is a microphone. Most other solutions involve hi-jacking the various audio on your machine and routing it either into a physical microphone port on your computer, or a virtualised one using something like <a href="https://www.vb-audio.com/Cable/">VB-CABLE Virtual Audio Device</a>.  Otherwise, no sound that your computer makes will be heard by anyone in the meeting. (Unless you have really loud speakers that can be heard into the mic and poor noise cancellation.)</p>
<p>Luckily, Google has solved this problem. You can instead open the desired video or web-page that plays audio, open up the tab in Chrome and use the &ldquo;&hellip; =&gt; cast&hellip;&rdquo; menu option. The same tool even lets you choose to cast the entire screen if you want.</p>
<p><img src="https://res.cloudinary.com/csmacnz/image/upload/v1537983157/CastTo_wtxvin.png" alt="Select Destination on Cast Dialog"></p>
<p>From there you can share to your meeting!</p>
<p><img src="https://res.cloudinary.com/csmacnz/image/upload/v1537983454/CastToGif_ez16tt.gif" alt="Animation of Casting"></p>
<p>As you can see, it is easy to turn the audio on and off.  There is even an option in the top left to choose to cast the whole screen rather than just a tab. Much easier than doing it through the meeting itself in some ways.</p>
<p>If you have the shortcode for an existing meeting, such as <code>xxx-yyyy-zzz</code> you can paste this into the search and share to that meeting easily, without it needing to show up as a search result as well.</p>
<p>I&rsquo;m still unsure how the target meetings are discovered. For me, I can usually see any meetings from my calendar with a Meet configured shown in the list for me for times within a couple of hours from now. But I know others have had issues with getting these to show up. I&rsquo;m still experimenting to understand that part of the service. Is it because I am logged into the browser with the same account, because I have my google calendar open, or because I am logged into a session? No idea, but it works for me!</p>
<p><img src="https://res.cloudinary.com/csmacnz/image/upload/v1537984713/HangoutsMeet_yxjaer.png" alt="Calendar entry with a Meet invite attached"></p>
<p>My best guess is that it is because I am logged in in my browser with the same domain google account that owns my calendar.</p>
<p>It even seems to be able to cast to a meeting even though I haven&rsquo;t got that meeting open which is a nice feature if you were physically in a room and didn&rsquo;t want to have to actually join the meeting first.</p>
<p>The full support docs for this solution are here in the hangouts help centre: <a href="https://support.google.com/meet/answer/7391885?hl=en">https://support.google.com/meet/answer/7391885?hl=en</a></p>
<p>If you are seeing the &ldquo;No Cast Destination Found&rdquo; message instead, there is another support guide on that as well:</p>
<p><a href="https://support.google.com/chromecast/answer/6320939">https://support.google.com/chromecast/answer/6320939</a></p>
<p>Happy Casting!</p>
</description>
    </item>
    
    <item>
      <title>NuGet Packing on Linux</title>
      <link>https://csmacnzblog.github.io/post/nuget-packing-on-linux/</link>
      <pubDate>Mon, 01 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/nuget-packing-on-linux/</guid>
      <description><p>For anyone who has been cutting-edge with .Net for a while will know that the nuget.exe runs under mono. And that you can use nuget.exe to package <code>*.nuspec</code> files into <code>*.nupkg</code> files.</p>
<p>Anyone who has been doing dotnet cross-platform will also know that you can use <code>dotnet pack</code> on both Windows and Linux to package your project into a NuGet package containing the <code>dll</code>. It even does references and multi-targeting correctly out of the box.</p>
<p>But did you know that you can also use dotnet pack to package any arbitrary <code>nuspec</code> file as well?</p>
<p>First, let&rsquo;s look at a simple <code>nuspec</code> file that only has package references (an aggregate package).</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd&quot;&gt;
  &lt;metadata&gt;
    &lt;id&gt;MyNewApp&lt;/id&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;authors&gt;csMACnz&lt;/authors&gt;
    &lt;description&gt;An aggregate package example&lt;/description&gt;
    &lt;tags&gt;utils example&lt;/tags&gt;

    &lt;dependencies&gt;
      &lt;dependency id=&quot;Newtonsoft.Json&quot; version=&quot;11.0.2&quot; /&gt;
      &lt;dependency id=&quot;Beefeater&quot; version=&quot;0.5.0&quot; /&gt;
    &lt;/dependencies&gt;
  &lt;/metadata&gt;
  &lt;files&gt;
    &lt;!-- empty files tag avoids copying all files --&gt;
  &lt;/files&gt;
&lt;/package&gt;
</code></pre>
<p>We could use <code>nuget.exe pack</code> but that wouldn&rsquo;t work on Linux. Instead, we create a csproj file designed to do the pack for us in a standard <code>dotnet pack</code> kind of way.</p>
<pre><code class="language-xml">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
    &lt;NuspecFile&gt;newapp.nuspec&lt;/NuspecFile&gt;
    &lt;NuspecProperties&gt;&lt;/NuspecProperties&gt;
    &lt;NuspecBasePath&gt;&lt;/NuspecBasePath&gt;
  &lt;/PropertyGroup&gt;

&lt;/Project&gt;
</code></pre>
<p>The magic is these three properties (only one required, really):</p>
<ul>
<li><code>&lt;NuspecFile&gt;</code> - Required to tell dotnet to use the hand-crafted <code>nuspec</code> file</li>
<li><code>&lt;NuspecProperties&gt;</code> - (Optional) ability to generate and send <code>nuspec</code> <a href="https://docs.microsoft.com/en-us/nuget/reference/nuspec#replacement-tokens">replacement tokens</a></li>
<li><code>&lt;NuspecBasePath&gt;</code> - (Optional) relative base path to use for pack files (defaults to project folder)</li>
</ul>
<p>For more details on all the things you can put into a <code>nuspec</code> file, check out the docs: <a href="https://docs.microsoft.com/en-us/nuget/reference/nuspec">https://docs.microsoft.com/en-us/nuget/reference/nuspec</a></p>
<p>But we don&rsquo;t stop there. If you run this you will see that we are still building our empty project. We can do a couple of things here.</p>
<ul>
<li><code>&lt;NoBuild&gt;true&lt;/NoBuild&gt;</code> - Adding this will stop the build step being run during pack</li>
<li><code>&lt;GeneratePackageOnBuild&gt;true&lt;/GeneratePackageOnBuild&gt;</code> - We can instead tell <code>dotnet build</code> to run the pack as well.</li>
</ul>
<p>One of these two scenarios may suit you better. It depends.</p>
<p>Using the above settings, you can basically produce any kind of NuGet package you want.</p>
<p>For one last piece of tidy-up, you can disable the compile and remove the dll from the build output entirely:</p>
<ul>
<li><code>&lt;SkipCompilerExecution&gt;true&lt;/SkipCompilerExecution&gt;</code> - (Optional) disable compile entirely</li>
<li><code>&lt;CopyBuildOutputToOutputDirectory&gt;false&lt;/CopyBuildOutputToOutputDirectory&gt;</code> - stop the dll output to the output folder.</li>
</ul>
<p>Unfortunately, at this stage I am still yet to find a reasonable way to remove the need for <code>&lt;TargetFramework&gt;</code>, but something I am still experimenting with. There is a chance that if you are really customising your MSBuild commands, you would end up leveraging the <code>dotnet restore</code>, and that requires a TargetFramework anyway, so not a big deal.</p>
</description>
    </item>
    
    <item>
      <title>HostBuild your dotnet Consoles like you WebHostBuild your web apps.</title>
      <link>https://csmacnzblog.github.io/post/hostbuild-your-dotnet-consoles-like-you-webhostbuild-your-web-apps/</link>
      <pubDate>Mon, 17 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hostbuild-your-dotnet-consoles-like-you-webhostbuild-your-web-apps/</guid>
      <description><p>I wrote a while back on getting your <a href="https://blog.csmac.nz/a-windows-service-on-dotnet/">Windows Services building with .Net Core</a> which is a nice way to use the new SDK pipeline but still host on Windows without much fuss.</p>
<p>But what If you like the approach but want to run on Linux?</p>
<p>Well after some stumbling around in the dotnet core docs, I found information about <code>HostBuilder</code>, which looks a lot like the <code>WebHostBuilder</code> and <code>WebHost</code> that we use with AspNetCore.  And that is no accident.</p>
<p>This new set of classes is a new feature from dotnet core 2.1:</p>
<blockquote>
<p>The Generic Host is new in ASP<!-- raw HTML omitted --><!-- raw HTML omitted -->.NET Core 2.1 and isn&rsquo;t suitable for web hosting scenarios. For web hosting scenarios, use the Web Host. The Generic Host is under development to replace the Web Host in a future release and act as the primary host API in both HTTP and non-HTTP scenarios. - <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-2.1">microsoft docs</a></p>
</blockquote>
<p>If you are used to the WebHostBuilder (<code>WebHost.CreateWebHostBuilder(args).Build().Run();</code>) then you will find the contracts for this very similar.  Let&rsquo;s look at an example of what a console app using this new library might look like.</p>
<p>Like last time, we will use this simple application that will sleep for 1 second, then try to generate the next number in the Fibonacci Sequence and print it out.</p>
<pre><code class="language-cs">using System;
using System.Threading;
using System.Threading.Tasks;

namespace MyApp
{
    public class MyApp
    {
        private static readonly AutoResetEvent _closeRequested = new AutoResetEvent(false);
        private long _last = 0;
        private long _current = 0;
        private Task _work;

        public MyApp()
        {
        }

        public void Start()
        {
            _work = Task.Run(() =&gt; DoWorkLoop());
        }

        public void Stop()
        {
            _closeRequested.Set();
            if (_work != null)
            {
                _work.Wait();
                _work = null;
            }
        }

        public void DoWorkLoop()
        {
            while (!_closeRequested.WaitOne(1000))
            {
                var last = _current;
                var next = _last + _current;
                if (next == 0)
                {
                    next = 1;
                }
                _last = _current;
                _current = next;
                Console.WriteLine(next);
            }
        }
    }
}
</code></pre>
<p>So how can we use this hosted in the new <code>HostBuilder</code>?</p>
<p>First, we have to use the new <code>IHostedService</code> interface:</p>
<pre><code>public interface IHostedService
{
    // Called when the host is ready to start the service
    Task StartAsync(CancellationToken cancellationToken);

    // Called on graceful shutdown by the host
    Task StopAsync(CancellationToken cancellationToken);
}
</code></pre>
<p>Notice the interface uses <code>CancellationToken</code>. This is called when the host needs to cancel the action (such as termination of the application during startup, or if you take too long during shutdown).</p>
<p>Our app class can be modified to meet these requirements:</p>
<pre><code class="language-cs">public class MyApp : IHostedService
{
    private static readonly AutoResetEvent _closeRequested = new AutoResetEvent(false);
    ...
    private Task _work;

    Task StartAsync(CancellationToken cancellationToken)
    {
        _work = Task.Run(() =&gt; DoWorkLoop());
        return Task.CompletedTask;
    }

    Task StopAsync(CancellationToken cancellationToken)
    {
        _closeRequested.Set();
        if (_work != null)
        {
            _task.Wait(cancellationToken);
            _work.Dispose();
            _work = null;
        }

        return Task.CompletedTask;
    }

    public void DoWorkLoop()
    {
        ...
    }
}
</code></pre>
<p>Now we meet the expected interface, we can build our startup code like so:</p>
<pre><code class="language-cs">public static class Program
{
    public static async Task Main(string[] args)
    {
        await new HostBuilder()
            .UseHostedService&lt;MyApp&gt;()
            .RunConsoleAsync();
    }
}
</code></pre>
<p>This is basically the minimum to get this working. But there is so much more you can do now you have a host builder.</p>
<p>Let&rsquo;s break this down into what those extensions are actually doing for you. The above is essentially equivalent to this:</p>
<pre><code class="language-cs">var host = new HostBuilder()
    .ConfigureServices(services =&gt;
        services.AddHostedService&lt;MyApp&gt;())
    .UseConsoleLifetime()
    .Build();

using (host)
{
    await host.StartAsync();

    await host.WaitForShutdownAsync();
}
</code></pre>
<p><code>UseConsoleLifetime</code>, which is used by <code>RunConsoleAsync()</code> internally, waits for Ctrl+C/SIGINT or SIGTERM commands from the OS (windows mac and Linux where applicable) to make the application compatible with graceful shutdown scenarios.</p>
<p><code>RunConsoleAsync()</code> also bootstraps the <code>Start</code> and <code>WaitForShutdown</code> usage, making it a really handy helper function to know and use.</p>
<p><code>ConfigureServices</code> is identical to that you are familiar with on the WebHostBuilder, and Startup classes.  This is your <code>ServiceCollection</code> where you can register dependencies. That&rsquo;s right, this has AspNetCore&rsquo;s Dependency Resolution structure.  <code>AddHostedService</code> is just a shorthand to register you class as an implementation of <code>IHostedService</code> that the Generic <em>Host</em> can later resolve to start and stop for you.</p>
<p>While talking about <code>AddHostedService</code>, I should mention you can have as many <code>IHostedService</code> instances registered that you want to have running. Multiple worker processes hosted in one app essentially.</p>
<p>Let&rsquo;s talk about configuration.</p>
<p>AspNetCore introduced the <code>IConfiguration</code> and the <code>appsettings.json</code> files.  I&rsquo;ve found that adding the following code gives you a very similar experience:</p>
<pre><code class="language-cs">new HostBuilder()
   .UseEnvironment(Environment.GetEnvironmentVariable(&quot;ASPNETCORE_ENVIRONMENT&quot;))
    .ConfigureAppConfiguration((hostContext, configApp) =&gt;
    {
        // ConfigureAppConfiguration makes sure the config is available
        // as runtime in the IConfiguration.
        // You can use ConfigureHostConfiguration which configures the
        // IHostingEnvironment's Build-type Configuration instead if you
        // care to make the distinction.
        // ConfigureAppConfiguration changes are also still visible on
        // IHostingEnvironment as well ¯\_(ツ)_/¯
        configApp
            .AddJsonFile(&quot;appsettings.json&quot;, optional: false, reloadOnChange: false)
            .AddJsonFile($&quot;appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json&quot;, optional: true)
            .AddEnvironmentVariables()
            .AddCommandLine(args);
    })
    .ConfigureServices(services =&gt;
    {
        ...
        
        services.AddHostedService&lt;MyApp&gt;();
    }
    .Build();
</code></pre>
<p>This configuration should give you the appsettings loading, including the <code>Environment</code>-specific  config files using the same <code>ASPNETCORE_ENVIRONMENT</code> EnvironmentVariable you are used to (though you could call this whatever you want, really). It also loads EnvironmentVariables as config overrides, and enables command line argument overrides as well (as highest priority).</p>
<p>I will leave you with a mention of logging.</p>
<pre><code class="language-cs">.ConfigureLogging((hostcontext, loggingBuilder) =&gt;
{
    // I'm thinking you should go do your own reading on this one, I'm not going to give you ALL the code to copy-paste from!
    // https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-2.1#configurelogging
    ...
})
</code></pre>
<p>Happy Coding!</p>
</description>
    </item>
    
    <item>
      <title>Some cool tricks with your Windows Shells</title>
      <link>https://csmacnzblog.github.io/post/some-cool-tricks-with-your-windows-shell/</link>
      <pubDate>Mon, 09 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/some-cool-tricks-with-your-windows-shell/</guid>
      <description><p>I&rsquo;ve been getting more and more back to the command line, doing more with PowerShell and even Bash scripting on Docker and WSL (<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux</a>).  There are a few of the tricks I have learned recently that help me every day.</p>
<h3 id="f8-searches-history">F8 searches history!</h3>
<p>That&rsquo;s right! When you type into the command line (this work in cmd and PowerShell) and then press F8, it will do a back-in-time search for a historical command that begins with what you typed. This is a nice way to auto-complete an entire command with complex arguments quickly and easily.</p>
<p><img src="http://res.cloudinary.com/csmacnz/image/upload/v1531122887/F8_Demo_lewuak.gif" alt="F8 cmd history demo"></p>
<h3 id="windows-explorer-open-shell-here">Windows Explorer &ldquo;Open Shell Here&rdquo;</h3>
<p>This works for WSL, PowerShell, and cmd.  From any folder in Windows Explorer, you can type into the address bar either <code>wsl</code>, <code>powershell</code> or <code>cmd</code> and it will launch the respective shell opened at the same directory.</p>
<p><img src="http://res.cloudinary.com/csmacnz/image/upload/v1531123505/ShellOpen_Demo_krpbpz.gif" alt="Open Shell Here Demo"></p>
<h3 id="profile">$PROFILE</h3>
<p>Powershell has a configuration file that you can add startup scripts to.  This file exists at a path specified by the variable <code>$PROFILE</code>. You can quickly get to it from PowerShell using <code>notepad++ $PROFILE</code> (or use whatever text editor appeals).</p>
<p>You can add all sorts in here, from defining functions to be available, setting environment variables and more.  Some ideas I&rsquo;ve used it for before are:</p>
<ul>
<li><a href="https://blog.csmac.nz/make-me-a-sandwich/">Emulating sudo</a></li>
<li><a href="https://blog.csmac.nz/aliasing-your-git-status/"><code>git status</code> command aliasing</a></li>
<li><a href="https://blog.csmac.nz/a-powershell-watch-command/">Define your own Watch command</a></li>
<li><a href="https://blog.csmac.nz/visual-studio-powershell/">Load the VS Developer Command Prompt dependencies</a></li>
</ul>
<h3 id="wsl">WSL</h3>
<p>Windows Subsystem for Linux (wsl) is an interesting new development. With this, I can install Ubuntu and have a bash shell I can run Linux commands in. This is what Cygwin always wanted to grow up to be.</p>
<p>The neat thing is you can pass commands back and forward from Powershell and wsl.</p>
<p>In powershell, you can type a command such as:</p>
<pre><code class="language-powershell">wsl find . -name *.csproj | % { cat $_ | wsl grep Framework }
</code></pre>
<p>This command will execute the command <code>wsl find . -name *.csproj</code> from the current directory in Linux, pass list of file paths generated back to Powershell, then for each path, execute a <code>grep</code> search on Linux again. We could now take the collection of results and pipe them once more through PowerShell, or another Linux command for further processing. Clever.</p>
<p>If you are already a Linux Shell Pro, you will probably find this ability a true PowerUser feature for you.</p>
<h3 id="wrap-up">Wrap up</h3>
<p>These are just a few of the Shell features I have been loving to use lately. There are so many more cool tips and tricks out there. What are your favourites?</p>
</description>
    </item>
    
    <item>
      <title>A Windows Service using netcoreapp on dotnet</title>
      <link>https://csmacnzblog.github.io/post/a-windows-service-on-dotnet/</link>
      <pubDate>Sun, 22 Apr 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-windows-service-on-dotnet/</guid>
      <description><p>I wrote <a href="/building-a-windows-service-with-net-core/">Building a Windows Service with .Net Core</a> and had a bit of flack because I was only using .Net core to build a .Net 4.5.2 application.  Technically the title is still valid, it was a windows service, and I built it using .Net Core tools.  But since people came looking for the answer to actually hosting a NetCoreApp application as a Windows Service, I thought it best to follow up with that article as well.</p>
<p>Note that since windows Service logic and hooks are Windows-specific, this solution doesn&rsquo;t work for Mac or Linux.  However I will try to maintain a working Console application, that should satisfy the requirements there.</p>
<h2 id="just-target-net-full-framework">Just target .Net Full framework</h2>
<p>Everything you already have working in your services using <code>System.ServiceProcess.ServiceBase</code> and other classes from the <code>System.ServiceProcess</code> full framework assemblies work fine when compiled with .Net Core. Since you can&rsquo;t run a Windows Service on non-windows platforms, there is no reason not to just target the Windows-only full framework 4.6.2 or 4.7.1 or whichever your stable .Net version of choice is. None of the <code>System.ServiceProcess</code> code can run on Linux or Mac anyway, and neither can any Windows Service specific code. This is probably going to be the path of least resistance.</p>
<p>But that was the subject of the <a href="/building-a-windows-service-with-net-core/">other article</a>, I assume you are here for something different.</p>
<h2 id="cross-platform-solution">Cross Platform solution</h2>
<p>We will now take a look at what we can do to make an application that a) can install and run as a windows service, and b) still runs as a console app on Linux, ignoring the unused service code.  This application is going to be a portable <code>netcoreapp2.0</code> application, so we can only reference <code>netstandard</code> or <code>netcoreapp</code> libraries.</p>
<p><a href="https://github.com/dasMulli/dotnet-win32-service">dasMulli/dotnet-win32-service</a> is a project that has created a win32 interop layer over the Windows Service API.  Much like the way the original .Net code probably works, but compiled as a dotnet standard library (<code>netstandard1.3</code> and <code>netstandard2.0</code> compatible versions).  On top of this, there is another library <a href="https://github.com/PeterKottas/DotNetCore.WindowsService">PeterKottas/DotNetCore.WindowsService</a> which also targets <code>netstandard2.0</code> that we will use to give us a nicer install/uninstall interface into our application.</p>
<h3 id="the-application">The &lsquo;Application&rsquo;</h3>
<p>Let&rsquo;s use something pretty dumb. Our app will sleep for 1 second, Then try to generate the next number in the Fibonacci Sequence.</p>
<pre><code class="language-cs">using System;
using System.Threading;
using System.Threading.Tasks;

namespace MyApp
{
    public class MyApp
    {
        private static readonly AutoResetEvent _closeRequested = new AutoResetEvent(false);
        private long _last = 0;
        private long _current = 0;
        private Task _work;

        public MyApp()
        {
        }

        public void Start()
        {
            _work = Task.Run(() =&gt; DoWorkLoop());
        }

        public void Stop()
        {
            _closeRequested.Set();
            if (_work != null)
            {
                _work.Wait();
                _work = null;
            }
        }

        public void DoWorkLoop()
        {
            while (!_closeRequested.WaitOne(1000))
            {
                var last = _current;
                var next = _last + _current;
                if (next == 0)
                {
                    next = 1;
                }
                _last = _current;
                _current = next;
                Console.WriteLine(next);
            }
        }
    }
}
</code></pre>
<p>I&rsquo;ve added some boiler-plate start/stop logic including a mutex to release the app and wait for it to finish in the stop command.</p>
<p>To run as a console app, I could simply wait for a keypress:</p>
<pre><code class="language-cs">var app = new MyApp();
app.Start();
Console.ReadKey();
Console.WriteLine(&quot;Stopping&quot;);
app.Stop();
</code></pre>
<p>or I could make use of requiring ctrl+c to exit instead:</p>
<pre><code class="language-cs">private static readonly AutoResetEvent _closing = new AutoResetEvent(false);

static void Main(string[] args)
{
    Console.WriteLine(&quot;Hello World!&quot;);
    var app = new MyApp();
    app.Start();
    Console.CancelKeyPress += new ConsoleCancelEventHandler(OnExit);
    _closing.WaitOne();
    Console.WriteLine(&quot;Stopping&quot;);
    app.Stop();
}

protected static void OnExit(object sender, ConsoleCancelEventArgs args)
{
    Console.WriteLine(&quot;Exit Requested&quot;);
    _closing.Set();
    args.Cancel = true;
    Console.CancelKeyPress -= new ConsoleCancelEventHandler(OnExit);
}
</code></pre>
<p>Either way, we now have a functioning console app, in a format that is compatible with a Windows Service.</p>
<h3 id="install-the-libraries">Install the libraries</h3>
<p>As mentioned, we will use <a href="https://github.com/PeterKottas/DotNetCore.WindowsService">PeterKottas/DotNetCore.WindowsService</a> nuget package <a href="https://www.nuget.org/packages/PeterKottas.DotNetCore.WindowsService/">PeterKottas.DotNetCore.WindowsService</a> to make our life easier. (<code>dotnet add package PeterKottas.DotNetCore.WindowsService</code>)</p>
<h3 id="the-program">The Program</h3>
<p>Now we can change our program to start using the code from the library, instead of our code:</p>
<pre><code class="language-cs">using System;
using System.Threading;
using PeterKottas.DotNetCore.WindowsService;

namespace MyApp
{
    public class Program
    {
        static void Main(string[] args)
        {
            ServiceRunner&lt;MyApp&gt;.Run(config =&gt;
            {
                var name = config.GetDefaultName();
                config.SetName(&quot;MyAppService&quot;);
                config.SetDescription(&quot;An example application&quot;);
                config.SetDisplayName(&quot;MyApp As A Service&quot;);
                config.Service(serviceConfig =&gt;
                {
                    serviceConfig.ServiceFactory((extraArguments, serviceController) =&gt;
                    {
                        return new MyApp();
                    });
                    serviceConfig.OnStart((service, extraArguments) =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} started&quot;, name);
                        service.Start();
                    });

                    serviceConfig.OnStop(service =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} stopped&quot;, name);
                        service.Stop();
                    });

                    serviceConfig.OnInstall(service =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} installed&quot;, name);
                    });

                    serviceConfig.OnUnInstall(service =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} uninstalled&quot;, name);
                    });

                    serviceConfig.OnPause(service =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} paused&quot;, name);
                    });

                    serviceConfig.OnContinue(service =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} continued&quot;, name);
                    });

                    serviceConfig.OnError(e =&gt;
                    {
                        Console.WriteLine(&quot;Service {0} errored with exception : {1}&quot;, name, e.Message);
                    });
                });
            });
        }
    }
}
</code></pre>
<p>I also had to add the <code>IMicroService</code> interface to <code>MyApp</code>, but otherwise it stayed the same since I already implemented the <code>Start</code>/<code>Stop</code> methods. Yes, it is a tonne more code, but thats just me logging state transitions, your app may not want or need to implement every event handler.</p>
<p>Now the app runs two ways:</p>
<pre><code class="language-powershell">dotnet run
</code></pre>
<pre><code class="language-shell">Starting up as a console service host
Service MyApp.MyApp started
The MyAppService service is now running, press Control+C to exit.
1
1
2
3
5
8
13
21
Control+C detected, attempting to stop service.
Service MyApp.MyApp stopped
The MyAppService service has stopped.
</code></pre>
<p>And also installed as a service:</p>
<pre><code class="language-powershell">dotnet run action:install
</code></pre>
<pre><code class="language-shell">Successfully registered and started service &quot;MyAppService&quot; (&quot;An example application&quot;)
</code></pre>
<p><img src="http://res.cloudinary.com/csmacnz/image/upload/v1523006256/MyAppService_rtae5s.png" alt="MyApp running as a Service"></p>
<h3 id="on-linux">On Linux</h3>
<p>In theory, we can take this app as written and build and run it as a console app on Linux.  This is because all our code is portable dotnet core <code>netstandard</code> and <code>netcoreapp</code> cross-platform code.  Yes, we have some interop code that expects some windows APIs, but in theory, if we never execute that code, it won&rsquo;t cause any issues.  Let&rsquo;s find out.</p>
<p>The easiest way to run Linux on windows is probably docker, so we can test using that.
(This assumes you have Docker installed and set up, otherwise, just follow along on any Linux environment you have.)</p>
<p>I am going to run the <code>Microsoft/aspnetcore-build</code> image, so that the tools are available, and map the dev folder I was already using. I will just start a <code>bash</code> shell so that I basically simulate working on my folder from a Linux machine. (Your networking may vary.)</p>
<pre><code class="language-powershell"> docker run --rm -it -v &quot;$(pwd):/app&quot; -w /app microsoft/aspnetcore-build bash
</code></pre>
<p>This will likely spend some time pulling down the image if you haven&rsquo;t used it before. Once that is done you will be dropped into a bash shell inside an instance of a <code>Microsoft/aspnetcore-build</code> Linux container with the windows folder directory containing out application mapped to the <code>/app</code> folder.</p>
<p>(As mentioned, if you don&rsquo;t have docker, or would rather use a Linux environment you already have, the rest of the instructions should work much the same.)</p>
<p>All you need to do is build and run, and you should get a working application.</p>
<pre><code class="language-shell">root@2683f31d537c:/app# ls
MyApp.cs  MyApp.csproj  Program.cs  bin  obj
root@2683f31d537c:/app# dotnet build
Microsoft (R) Build Engine version 15.6.84.34536 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restoring packages for /app/MyApp.csproj...
  Installing System.ServiceProcess.ServiceController 4.4.0.
  Installing DasMulli.Win32.ServiceUtils 1.0.1.
  Installing PeterKottas.DotNetCore.CmdArgParser 1.0.5.
  Installing PeterKottas.DotNetCore.WindowsService 2.0.6.
  Generating MSBuild file /app/obj/MyApp.csproj.nuget.g.props.
  Generating MSBuild file /app/obj/MyApp.csproj.nuget.g.targets.
  Restore completed in 3.08 sec for /app/MyApp.csproj.
  MyApp -&gt; /app/bin/Debug/netcoreapp2.0/MyApp.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:06.79
root@2683f31d537c:/app# dotnet run
Starting up as a console service host
Service MyApp.MyApp started
The MyAppService service is now running, press Control+C to exit.
1
1
2
3
5
^CControl+C detected, attempting to stop service.
Service MyApp.MyApp stopped
The MyAppService service has stopped.
</code></pre>
<p>And that&rsquo;s it, the same code compiles on Linux as well, and runs successfully.</p>
<p>I&rsquo;m not currently a Linux user and haven&rsquo;t set up services or daemons for a while, so I will defer to others on the topic of <a href="http://pmcgrath.net/running-a-simple-dotnet-core-linux-daemon">Running a dotnet Core app as a Linux daemon</a></p>
<h3 id="on-docker">On Docker</h3>
<p>Let&rsquo;s whip up a Dockerfile to round it off, that will build and pack a new docker image, that we can then start and see it running our task.</p>
<p>First the docker file (Dockerfile). This is a basic minimalist version, you will likely want to do optimisation steps yourself.</p>
<pre><code class="language-dockerfile">FROM microsoft/dotnet:2.0-runtime AS base
WORKDIR /app
EXPOSE 80

FROM microsoft/aspnetcore-build:2.0 AS build
WORKDIR /src
COPY . .
RUN dotnet build -c Release -o /app

FROM build AS publish
RUN dotnet publish -c Release -o /app

FROM base AS final
WORKDIR /app
COPY --from=publish /app .
ENTRYPOINT [&quot;dotnet&quot;, &quot;MyApp.dll&quot;]
</code></pre>
<p>This will use the <code>Microsoft/aspnetcore-build:2.0</code> container image as the build container, publish the results and produce a packed container based on the <code>Microsoft/dotnet:2.0-runtime</code> container image. We are also setting the container with an entry point to start the application process as the main container process. This means that if/when the process stops, the container terminates.</p>
<p>We run the build command, asking it to tag the created image as <code>myapptestcontainer:latest</code> so we can refer to it again in a moment.</p>
<pre><code class="language-powershell">docker build -t myapptestcontainer:latest .
</code></pre>
<pre><code class="language-shell">Sending build context to Docker daemon  136.7kB
Step 1/13 : FROM microsoft/dotnet:2.0-runtime AS base
 ---&gt; 26314e3adaec
Step 2/13 : WORKDIR /app
Removing intermediate container 9296d10905ce
 ---&gt; 8794c7aca866
Step 3/13 : EXPOSE 80
 ---&gt; Running in 6554f663146f
Removing intermediate container 6554f663146f
 ---&gt; ad881b2a405e
Step 4/13 : FROM microsoft/aspnetcore-build:2.0 AS build
 ---&gt; 244f6193d21a
Step 5/13 : WORKDIR /src
Removing intermediate container a38fb58535b6
 ---&gt; 5ed2a92fda93
Step 6/13 : COPY . .
 ---&gt; 8ffd3faa7bc9
Step 7/13 : RUN dotnet build -c Release -o /app
 ---&gt; Running in 39d44616ea2d
Microsoft (R) Build Engine version 15.6.82.30579 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restoring packages for /src/MyApp.csproj...
  Installing System.ServiceProcess.ServiceController 4.4.0.
  Installing PeterKottas.DotNetCore.CmdArgParser 1.0.5.
  Installing DasMulli.Win32.ServiceUtils 1.0.1.
  Installing PeterKottas.DotNetCore.WindowsService 2.0.6.
  Generating MSBuild file /src/obj/MyApp.csproj.nuget.g.props.
  Restore completed in 2.72 sec for /src/MyApp.csproj.
  MyApp -&gt; /app/MyApp.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:06.14
Removing intermediate container 39d44616ea2d
 ---&gt; 56b58883d64b
Step 8/13 : FROM build AS publish
 ---&gt; 56b58883d64b
Step 9/13 : RUN dotnet publish -c Release -o /app
 ---&gt; Running in 552eb703a748
Microsoft (R) Build Engine version 15.6.82.30579 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 131.4 ms for /src/MyApp.csproj.
  MyApp -&gt; /src/bin/Release/netcoreapp2.0/MyApp.dll
  MyApp -&gt; /app/
Removing intermediate container 552eb703a748
 ---&gt; 474498c42be3
Step 10/13 : FROM base AS final
 ---&gt; ad881b2a405e
Step 11/13 : WORKDIR /app
Removing intermediate container c3c0dd6ac31c
 ---&gt; 02c236862201
Step 12/13 : COPY --from=publish /app .
 ---&gt; 33509849efe0
Step 13/13 : ENTRYPOINT [&quot;dotnet&quot;, &quot;MyApp.dll&quot;]
 ---&gt; Running in 25b373135eb6
Removing intermediate container 25b373135eb6
 ---&gt; 511aa92712d1
Successfully built 511aa92712d1
Successfully tagged myapptestcontainer:latest
</code></pre>
<p>Now that we have a successful image for our app, we can start and run instances of it on docker, as well. We do this using the <code>docker run</code> command.</p>
<p>As before, we can run this interactively using the -it command:</p>
<pre><code class="language-powershell">docker run --rm -it myapptestcontainer:latest
</code></pre>
<pre><code class="language-shell">Starting up as a console service host
Service MyApp.MyApp started
The MyAppService service is now running, press Control+C to exit.
1
1
2
3
5
8
13
21
34
55
89
^CControl+C detected, attempting to stop service.
Service MyApp.MyApp stopped
The MyAppService service has stopped.
</code></pre>
<p>And Control+C still works as expected. The real proof is launching it and checking the processes. We will:</p>
<ul>
<li>Run an instance from our image, detached (<code>docker run -d myapptestcontainer:latest</code>)</li>
<li>See that it is running using list process (<code>docker ps</code>)</li>
<li>Stop the process (<code>docker stop &lt;pid&gt;</code>)</li>
<li>Print the logs (<code>docker logs &lt;pid&gt;</code>)</li>
<li>Clean up the process (<code>docker rm &lt;pid&gt;</code>)</li>
</ul>
<pre><code class="language-shell">&gt; docker run -d myapptestcontainer:latest
5a11b3ee222d35196f7d7549d634cd8b8c9220bfb4f9dd9f7fd577b094b2bccb

&gt; docker ps
CONTAINER ID        IMAGE                       COMMAND              CREATED             STATUS              PORTS               NAMES
5a11b3ee222d        myapptestcontainer:latest   &quot;dotnet MyApp.dll&quot;   2 seconds ago       Up 1 second         80/tcp              musing_montalcini

&gt; docker stop 5a11b
5a11b

&gt; docker logs 5a11b
Starting up as a console service host
Service MyApp.MyApp started
The MyAppService service is now running, press Control+C to exit.
1
1
2
3
5

&gt; docker rm 5a11b
5a11b
</code></pre>
<p>As we can see, the only difference is the termination. Linux is sending the termination message correctly, but the library we are using doesn&rsquo;t subscribe to the correct callback (<code>AppDomain.CurrentDomain.ProcessExit</code> perhaps) and so instead the process is just terminated.</p>
<p>Now I started raising this as a bug against the library, but had to stop myself and ask &ldquo;Do I really need this?&rdquo;  There are a bunch of reasons and ways your container could get terminated. You need to build in resilience for this termination.  For that reason, you need to allow for you process to die in the middle of any part of your code and figure out ways to gracefully recover as needed. (Think about how SQL Server recovers after a termination to avoid data loss.) For this reason, I don&rsquo;t see the fact that <code>OnShutdown</code> doesn&rsquo;t get called as a bug, but instead an opportunity to write a better process.</p>
<p>Of course, if you absolutely want this behaviour, you could do something like <a href="https://github.com/PeterKottas/DotNetCore.WindowsService/issues/52#issuecomment-344853011">this stack overflow comment suggests</a> and connect the handler yourself, calling into the appropriate function. Like replacing the Service factory with the following:</p>
<pre><code class="language-cs">serviceConfig.ServiceFactory((extraArguments, serviceController) =&gt;
{
    var myApp = new MyApp();
    EventHandler handler = null;
    handler = (sender, _) =&gt;
    {
        AppDomain.CurrentDomain.ProcessExit -= handler;
        Console.WriteLine(&quot;Process Exit triggered&quot;, name);
        myApp.Stop();
    };
    AppDomain.CurrentDomain.ProcessExit += handler;
    return myApp;
});
</code></pre>
<p>Just make sure if you do decide to use this, that your stop function is <a href="https://en.wikipedia.org/wiki/Idempotence">idempotent</a> and only runs once.</p>
<h3 id="the-end">The End</h3>
<p>I hope this article helps others coming to find out how to create cross-platform services with .Net Core. Also hopefully it redeems me for confusing so many people who landed on my <a href="/building-a-windows-service-with-net-core/">Building a Windows Service with .Net Core</a> article as well.</p>
<p>Simple. Easy. Works<a href="https://blog.codinghorror.com/the-works-on-my-machine-certification-program/">.</a></p>
</description>
    </item>
    
    <item>
      <title>My C# naming conventions</title>
      <link>https://csmacnzblog.github.io/post/my-c-naming-conventions/</link>
      <pubDate>Sun, 25 Mar 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/my-c-naming-conventions/</guid>
      <description><p>I have opinions!</p>
<p>I&rsquo;ve been meaning to write this article for a while.  I have various opinions about code formatting, and they may or may not conform to the norm. Also, they change occasionally as and when I get a good explanation of why a different way is better, or when I discover a technique while learning a language that I just have to incorporate into my C# code.</p>
<p>Firstly, let&rsquo;s just say that there are Guidelines and Opinions. I might not be clear exactly which one something is below, but it will be one or the other.  That means that what I say won&rsquo;t fit all situations. Don&rsquo;t take it as a hard and fast rule. Use your own judgement.</p>
<p>Also, I love feedback, it is how I change and evolve my own style. I would love to revisit this in another couple of years and share how it might have changed. Please leave comments at the end.</p>
<p>One final thought before I start: Decide this as a team. If your whole team have individual styles and conventions, the code can feel like reading a book with multiple authors, disjointed and hard to follow. Just like a book, different chapters can have different authors and work well, the code can have different styles in different modules (libraries, packages, repositories). As long as the whole team is using the same style in the same code together, it will become more cohesive to read, write and maintain. And that is the ultimate point of applying Style Guidelines in the first place.</p>
<h2 id="an-overview">An Overview</h2>
<p>Before I go into my styles, let&rsquo;s look at something more general, and standard.</p>
<h3 id="microsoft-guidance">Microsoft Guidance</h3>
<p>Starting with something simple. If you are new to Microsoft Development and .Net, I would recommend reading their <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines">Naming Guidelines</a> and <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions">General Naming Conventions</a>. At the very least, it makes it easier to read other peoples code. If they write in C#, there is a high chance that they follow these guidelines. Either because they are part of a team that enforces them or the tooling uses it by default (Visual Studio, VSCode, Resharper, Rider etc) by their auto-formatter, or something like <a href="https://github.com/dotnet/roslyn-analyzers#recommended-version-of-analyzer-packages">FxCop</a> or <a href="https://github.com/StyleCop/StyleCop">StyleCop</a> is enforcing it.</p>
<p>I may deviate a little, but this guidance was my starting point when I first began writing C# code.</p>
<h3 id="contracts-public-vs-private">Contracts: Public Vs Private</h3>
<p>There are two places where you can apply your style and convention. Internally in your code, as you write it, and externally in the public API and contracts that your library exposes to other programs to use.</p>
<p>Before taking anything else into account, I recommend that any public signatures (e.g. naming conventions - class names, method names, parameter names, properties etc) Should follow the guidance from Microsoft. People using your library should not have to deal with your style and conventions, they should match what the expected C# library conventions are. This can also include protected methods and properties if your library is extensible.</p>
<p>Inside your code, its all up to you. Anything private (and protected if the class is sealed) is never exposed to the consumer, you can do what you like. Similarly, the layout of your code (whitespace, braces, class/file distribution) is all up to you (and your team).</p>
<h2 id="check-out-m-style">Check Out M' Style</h2>
<p>Let&rsquo;s get specific on how I do.</p>
<p>In general my rules are pretty hard to describe, so hopefully, the examples will help (I will use <code>•</code> as the representative of space and <code>⟶</code> as the representative of tab - SPOILER: I will never use this tab character&hellip;)</p>
<h3 id="naming-conventions">Naming Conventions</h3>
<p>Every person and every language has their own approach to naming conventions. In C# there are a few basics: Capital letters starting Namespaces, Classes, Methods, and Properties and we use <code>PascalCase</code> by default, and not underscores.  Properties do not start their name with &ldquo;Get&rdquo;.</p>
<p>I stick to this as a strong rule. All methods, All Properties, anything public.</p>
<p>In general, variables and parameters use <code>camelCase</code>.</p>
<p>I use a couple of conventions for naming things well. For instance, I might name something that is a boolean <code>IsOpen</code> rather than <code>Open</code> or <code>Opened</code>, and for a setting <code>CanOpen</code>.  <code>Is</code> and <code>Can</code> prefixes help readability of the code a lot. This is for properties but applies to methods just as much.</p>
<p>Private fields always (always) start with an underscore (<code>_</code>). When you are reading code, it makes it easier to determine what belongs to the method, and what belongs to the class.</p>
<p>Use long descriptive names, not single letter variables. Even if you are using Linq, if the name of the item in the lambda isn&rsquo;t obvious, still use a full name as the lambda parameter.</p>
<pre><code>// bad
var names = data.Select(w =&gt; w.Name).ToList();

// better
var names = data.Select(widget =&gt; widget.Name).ToList();
</code></pre>
<h3 id="hungarian-notation">Hungarian Notation</h3>
<p>Related to naming things is <a href="https://en.wikipedia.org/wiki/Hungarian_notation">Hungarian Notation</a>. Now there are two interpretations to this, the wrong one, and the original one. Most people remember Visual Basic, and using <code>btnSave</code> and <code>txtName</code> for UI controls, or the terrible <code>strName</code>.  This is the wrong interpretation of HN. Notation shouldn&rsquo;t be re-declaring the type which the reader can discover themselves, but instead to indicate the meaning of the data to avoid ambiguity. I think the name people use for the correct way is &ldquo;Apps Hungarian&rdquo;.</p>
<p>Anyway, I use this when it is useful.  My simplest example is when I have an argument that is an <code>int</code> providing a time. I will call my parameter <code>timeoutInSeconds</code>. Not strictly Hungarian Notation, but serves a similar purpose.  Of course, if it makes more sense, I will use a <code>TimeSpan</code> instead, but sometimes an integer amount of seconds is a better API.</p>
<p>This also extends to units of measure. If we are using real world values we name the variables with their unit of measure.  <code>lengthInMeters</code> and <code>lengthInInches</code> helps the readability of code, especially when you have to mix units. Also if your mixing amounts with volumes, it helps to have <code>qtyAmount</code>, <code>mnyUnitCost</code> and <code>mnyTotal</code> to identify which decimal is a quantity, and which is a monitary amount.</p>
<p>Or better yet, use <a href="https://blog.csmac.nz/semantics-vs-implementation-detail/">Value Types</a> for all of the above, instead.</p>
<h3 id="method-signatures">Method signatures</h3>
<p>If anything in this article will surprise you, it is probably this one.</p>
<p>I can&rsquo;t remember when I first saw this, but it took years to finally sink in and for me to <a href="https://en.wikipedia.org/wiki/Grok">grok</a> it. It has to do with long signatures.</p>
<p>First, try not to have long signatures. decompose your classes to shrink their constructors, and use Parameter Objects to pass around instead.</p>
<p>Sometimes the problem isn&rsquo;t the number of arguments, but the names of those arguments. Nice long descriptive class names will quickly lead to this problem, even with only two or three parameters, especially Constructors when IOC is in play (which is always, right?).</p>
<pre><code>public•class•MyClass
{
••••public•MyClass•(MyFirstDependentServiceWithALongName•myFirstDependentServiceWithALongName,•AnotherDependencyYouNeed•anotherDependencyYouNeed)
••••{
••••}

...

}
</code></pre>
<p>Is your screen wrapping, or is it just me?</p>
<p>There are two problems with this style.</p>
<ul>
<li>You need to scroll your code window to see the whole signature, and when you scroll you lose the rest of your code. (I don&rsquo;t care how wide your screen is, this can and will still happen.)</li>
<li>Your source control tool with thrash on the signature line, with high potential for merge conflicts and such during development.</li>
</ul>
<p>Like I say, it took me years after reading this idea before actually using it. Let it stew a bit in your mind.</p>
<pre><code>public•class•MyClass
{
••••public•MyClass•(
••••••••MyFirstDependentServiceWithALongName•myFirstDependentServiceWithALongName,
••••••••AnotherDependencyYouNeed•anotherDependencyYouNeed)
••••{
••••}

...

}
</code></pre>
<p>We put each argument on a new line. They are indented an additional four spaces (the default indentation amount for one indent level).  That last closing brace is on the same line as the last argument. (Because it will have to change to a <code>,</code> anyway if we adding another arg, and the function body braces work better with it that way.)</p>
<p>Always, always put the first argument on a new line. If you don&rsquo;t, the indentation is too wide, and if you rename the method, the indentation would keep shifting. You want to keep a stable, predictable indentation, within a method, and between methods. Consistency. (Again, this helps source control)</p>
<p>Let&rsquo;s see that without the visible whitespace:</p>
<pre><code>public class MyClass
{
    public MyClass (
        MyFirstDependentServiceWithALongName myFirstDependentServiceWithALongName,
        AnotherDependencyYouNeed anotherDependencyYouNeed)
    {
    }

...

}
</code></pre>
<p>I find this style much easier to read, now.</p>
<p>It even works during the method calls:</p>
<pre><code>var result = ProcessData(
    inputData,
    customers,
    authorisationData,
    filterOptions,
    sortOptions);
</code></pre>
<p>The main take-away for me is, follow the Yoda method. Do or do not.</p>
<p>Always put everything on one line, or always put all arguments on their own lines.</p>
<h3 id="braces">Braces</h3>
<p>Braces go on new lines, not like <code>JavaScript</code> where they start on the same line as the header line. Pretty sure that is standard.</p>
<p>Always use braces when optional.</p>
<p>So there is some great guidance that <code>if</code> statements and similar should only ever have one statement, so the braces for a body block should never be necessary. That&rsquo;s fine.  But the main reason for overriding it with my rule is the following. With no braces, you leave that code open to an edit vulnerability that can trick even the most experienced programmer to miss because our brains love to trick us.</p>
<pre><code>if (someCondition(withAnArg))
    DoWork();
    
if (aDifferentCondition(wthAnotherArg))
    DoDifferentWork();
    ButAlsoDoAnotherThing();
</code></pre>
<p>That second example is lying to you.</p>
<p>look again with braces:</p>
<pre><code>if (someCondition(withAnArg))
{
    DoWork();
}
    
if (aDifferentCondition(wthAnotherArg))
{
    DoDifferentWork();
}
    ButAlsoDoAnotherThing();

</code></pre>
<p>Even without fixing the whitespace, there is no mistaking what the second set of code does, whether you can read C# or not. It is far too easy for someone to start with code like the first <code>if (someCondition(withAnArg))</code> and add another line that they think is inside the condition, but actually isn&rsquo;t, like what has happened to the <code>if (aDifferentCondition(wthAnotherArg))</code> condition in the first example.</p>
<p>That is why I always enforce braces.</p>
<p>Lambdas are fine. you can leave out the braces on one-liner lambdas because the compiler will sort you out if you get that wrong.</p>
<h3 id="general-whitespace">General Whitespace</h3>
<p>StyleCop has really helped me get stricter with my whitespace, enforcing my rules at compile time.</p>
<p>These are really minor things, but I find they aid readability.</p>
<ul>
<li>Use a space before <code>(</code> in method signatures (but not in calls)</li>
<li>(As Mentioned above) signatures on lines longer than 80 chars wide puts each arg on a new line.</li>
<li>If you have your curly braces (<code>{</code> <code>}</code>) on one line, they should have spaces on either side.</li>
<li>between class names and the base-class/interface, one space either side of the colon (<code>public class MyClass : IMyInterface</code>)</li>
<li>spaces either side of lambda arrows (<code>w =&gt; w.Name</code>)  (Also most symbols really)</li>
<li>One space after starting a comment line/block (This is law, <a href="https://stackoverflow.blog/2018/03/14/podcast-123-jon-skeet-wants-you-to-be-a-feminist/">John Skeet declared it so on a podcast</a>)</li>
<li>Use 4 spaces for indentation</li>
<li>No tabs, ever</li>
<li>No spaces on empty lines (Just being anal)</li>
</ul>
<p>Mostly, I just follow the Out-Of-The-Box settings from StyleCop.</p>
<h3 id="privates">Privates</h3>
<p>As mentioned, I enforce underscore (<code>_</code>) prefixes for private fields. And <a href="http://stackoverflow.com/questions/4540146/naming-convention-for-private-fields/11461218#11461218">I am not alone</a>.</p>
<p>(stolen from the comment linked above:)</p>
<ul>
<li>It eliminates conflicts with camel-cased parameter names - no need to use &ldquo;this&rdquo;</li>
<li>It&rsquo;s a visual indicator that the internal persistent state of the object is being read, or - more importantly - being written. It&rsquo;s a flag saying <em>&ldquo;this has side effects outside of the particular method I happen to be looking at&rdquo;</em>, which is very important to know when looking at unfamiliar code.</li>
<li>Although you can apply the above as a reverse argument for <code>this</code>, the above will be enforced by the compiler non-optional, while <code>this</code> can be left off by choice.</li>
</ul>
<p>Statics tend to vary a bit. If they are <code>static</code> and <code>readonly</code>, I have been known to use a starting Capital letter <code>PascalCase</code>. For consistency, often Mutable Statics are named the same.</p>
<p>I have been known to use ALLCAPS for Constants. This is a carry-over from C I suspect but makes it easier to spot a Constant in code. Sometimes this feels too harsh, and I may use <code>PascalCase</code> here instead. What is the difference to the end user between a <code>private static readonly</code> and a <code>private const</code> anyway?</p>
<p>My thinking is that if it starts with a Capital letter (<code>PascalCase</code>), it isn&rsquo;t owned by you. Either it belongs to the class you called to get it (property) or it doesn&rsquo;t belong to this instance (Static). For this thinking, I often will use Pascal Case for Protected fields as well, so that derived classes can tell they do not own it, either.</p>
<p>These rules are a bit less thought through, and I don&rsquo;t tend to be any stricter than my tooling tells me to be. (If Resharper or StyleCop says to change it, I usually will.)</p>
<h3 id="tests">Tests</h3>
<p>This is probably the most controversial and the most varied. Somehow, when it comes to tests, it feels easier to break the rules.</p>
<p>Don&rsquo;t get me wrong, I subscribe to Uncle Bob, and your tests should be given the care and attention that any of your code is given. SOLID, DRY, Coupling vs cohesion, modularisation etc etc.  But tests exercise requirements, so readability is more important than expected standards.  Also, tests are all under your domain, your style can flourish, you are the only consumer.</p>
<p>What I am talking about primarily is using underscores in test names rather than strict PascalCase.</p>
<p>I have been experimenting, and I have two approaches I use:</p>
<ul>
<li>Every_Word_Is_Seperated_By_An_Underscore_So_That_It_Forms_A_Descriptive_Sentence</li>
<li>GivenIHaveATestMethod_WhenINeedToNameIt_ThenISeperateTheGivenWhenThenComponentsByUnderscores</li>
</ul>
<p>I have more recently extended my ideas to following this further guidance of organising tests to now use nested classes, and inheritance:</p>
<pre><code>public class GivenIHaveAUser
{
    public class GivenIHaveLoggedIn : GivenIHaveAUser
    {
        public class GivenINavigateToTheFormPage : GivenIHaveLoggedIn
        {
            public class GivenISubmitAValidForm : GivenINavigateToTheFormPage
            {
                [Test]
                public void ItSubmitsSuccessfully()
                {
                   ...
                }
            }

            public class GivenISubmitAnInvalidForm : GivenINavigateToTheFormPage
            {
                [Test]
                public void ItShowsValidationMessages()
                {
                   ...
                }
            }
        }
    }
}
</code></pre>
<h3 id="automation">Automation</h3>
<p>If you want to really care about the style of your code, I recommend installing a few NuGet packages into your projects to get compile-time enforcement (don&rsquo;t worry, the rules are configurable):</p>
<pre><code>&lt;PackageReference Include=&quot;Microsoft.CodeAnalysis.FxCopAnalyzers&quot; Version=&quot;2.6.0&quot;  PrivateAssets=&quot;All&quot; /&gt;
&lt;PackageReference Include=&quot;codecracker.CSharp&quot; Version=&quot;1.0.3&quot; PrivateAssets=&quot;All&quot; /&gt;
&lt;PackageReference Include=&quot;StyleCop.Analyzers&quot; Version=&quot;1.1.0-beta004&quot; PrivateAssets=&quot;All&quot; /&gt;
</code></pre>
<p>(That needs a whole article in itself, but this is a taster.)</p>
<h3 id="the-end">The End</h3>
<p>I hope you enjoyed reading and thinking about code formatting. If you haven&rsquo;t taken something away to try, read it again and find something to challenge me on. If you can&rsquo;t make an argument for or against, maybe give it a go yourself, or suggest it to your team.</p>
</description>
    </item>
    
    <item>
      <title>On Screen Shortcut keys for presentations and recordings</title>
      <link>https://csmacnzblog.github.io/post/on-screen-shortcut-keys-for-presentations-and-recordings/</link>
      <pubDate>Mon, 26 Feb 2018 04:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-screen-shortcut-keys-for-presentations-and-recordings/</guid>
      <description><p>I used this tool a while ago that let me show on-screen what keyboard shortcuts and combinations I was pressing so that others could see them, especially during presentations, and on video recordings.</p>
<p>But for the life of me today, on a new machine, I couldn&rsquo;t remember what it was called. Searching didn&rsquo;t help. For future reference, I will remember I wrote this article, and hopefully, others searching for &ldquo;show shortcut keys on screen&rdquo; will find this article as well.</p>
<p>The tool I used was called Carnac. Carnac is a <a href="https://github.com/Code52/carnac">Code52 project on GitHub</a>. It nicely shows the shortcut keys you press, such as <code>ctrl+c</code>, <code>alt+enter</code> <code>ctrl+.</code> etc on the screen so that others can see what you pressed.  Since I&rsquo;m recording a few videos of coding at the moment, this will add an extra benefit for those watching them.</p>
<p>I suspect originally I heard about this from <a href="https://www.hanselman.com/blog/ScottHanselmans2014UltimateDeveloperAndPowerUsersToolListForWindows.aspx">Scott Hanselman&rsquo;s 2014 Ultimate Developer and Power Users Tool List for Windows</a> (Although I may have the year wrong&hellip;).</p>
<p>This is in the same vein as <a href="https://blog.csmac.nz/code-demoing-with-visual-studio/">Another post I wrote about Visual Studio present mode</a>, which is still in <a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProductivityPowerTools2015">ProductivityPowerTools2015</a>, and the latest <a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProductivityPowerPack2017">ProductivityPowerPack2017</a>.</p>
<p>Happy presenting!</p>
</description>
    </item>
    
    <item>
      <title>A PowerShell Watch Command</title>
      <link>https://csmacnzblog.github.io/post/a-powershell-watch-command/</link>
      <pubDate>Tue, 30 Jan 2018 19:36:30 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-powershell-watch-command/</guid>
      <description><p>I use dotnet-watch a bunch and have used a version via grunt/gulp a little in the past as well.</p>
<p>In front of me, I had some TypeScript, <code>tsc</code> and an <code>app.ts</code> file. I wanted to watch it and trigger <code>tsc</code> automatically. But there was no csproj, no NuGet, and no npm in sight.</p>
<p>I went searching far and wide for solutions, and some clever people have some insight to add to the quest:</p>
<ul>
<li><a href="https://www.reddit.com/r/usefulscripts/comments/4y46kl/powershell_since_theres_no_native_watch_command/">https://www.reddit.com/r/usefulscripts/comments/4y46kl/powershell_since_theres_no_native_watch_command/</a></li>
<li><a href="https://stackoverflow.com/questions/29066742/watch-file-for-changes-and-run-command-with-powershell">https://stackoverflow.com/questions/29066742/watch-file-for-changes-and-run-command-with-powershell</a></li>
<li><a href="https://nightroman.wordpress.com/2006/09/26/watch-command-ps1-watch-commands-output-repeatedly/">https://nightroman.wordpress.com/2006/09/26/watch-command-ps1-watch-commands-output-repeatedly/</a></li>
</ul>
<p>From these, I cobbled together what is now in my <code>Microsoft.PowerShell_profile.ps1</code> file:</p>
<pre><code># Watch in Powershell
function Invoke-Watch {
    param(
        [string]$Folder,
        [string]$Filter = &quot;*.*&quot;,
        [scriptblock]$Action,
        [Switch]$IncludeSubdirectories = $true
    )
    $watcher = New-Object IO.FileSystemWatcher $folder, $filter -Property @{ 
        IncludeSubdirectories = $IncludeSubdirectories
        EnableRaisingEvents = $true
    }

    Write-Host &quot;Now Watching (ctrl+c to stop)&quot;
    $global:PSWatchFileChanged = $false
    $onChange = Register-ObjectEvent $Watcher Changed -Action {$global:PSWatchFileChanged = $true}
    try{
        
        while($true) {
            &amp; $Action
            while($global:PSWatchFileChanged -eq $false) {
                Start-Sleep -Milliseconds 100
            }
            $global:PSWatchFileChanged = $false
        }
    }
    finally{
        Unregister-Event -SubscriptionId $onChange.Id
    }
}
New-Alias -Name watch -Value Invoke-Watch
</code></pre>
<p>To use it, You pass a few parameters to the script:</p>
<pre><code># Watch tsc compile my ts files
watch -Folder &quot;${PWD}&quot; =Filter &quot;*.ts&quot; -Action { tsc }
</code></pre>
<p>At some point, the parameters will change, and I might make it prettier, or more intuitive. (There is also a nasty global in there, so running more than one at a time is either a feature or a bug, depending on how you use it&hellip;)</p>
<p>I will probably gist this at some point and keep it up to date with those changes.</p>
</description>
    </item>
    
    <item>
      <title>There can be only one return; 0 RLY?</title>
      <link>https://csmacnzblog.github.io/post/there-can-be-only-one-return/</link>
      <pubDate>Sun, 03 Dec 2017 22:15:55 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/there-can-be-only-one-return/</guid>
      <description><p>My opinions and choices on style of coding evolves and changes over time. By blogging about this now, I can refer back later when I change my mind. I can also elicit the opinions of others to influence me to change my ways if I happen to be wrong and not know it yet.</p>
<p>Lets talk about returns.  There is an opinion that methods should only have a single return. This gives them a precise flow of control, and forces you to essentially either process data through a few processes and return the final result (which can be very functional) or store a result variable and correctly populate it within control flow logic (&lsquo;if&rsquo;/&lsquo;else&rsquo;, &lsquo;switch&rsquo;, &lsquo;while&rsquo; commands, for instance). If you don&rsquo;t actually return a result, you can still think about flow of control and where you exit from.</p>
<pre><code class="language-cs">public string WhenIPipeDataIntoOtherFunctions(string fileName)
{
    var input1 = Loader.LoadInput();
    
    var input2 = FileStore.ReadAllContent(fileName);
    
    return WhenIUseAResultVar(input1, input2);
}

public string WhenIUseAResultVar(int input1, string input2)
{
    string result;
    
    if (input1 &gt; 5)
    {
        var part1 = new string('a', input1);
        result = part1 + &quot; &quot; + input2;
    }
    else
    {
        result = null;
    }
    
    return result;
}

public void DoStuff(string foo, int bar)
{
    if (bar &gt; 10)
    {
        var something = WhenIUseAResultVar(bar, foo);
        OutputGuy.Take(something);
    }
    else
    {
        var somethingElse = WhenIPipeDataIntoOtherFunctions();
        Printer.Print(somethingElse);
    }
}
</code></pre>
<p>The first one seems self explainatory, but I will come back to that one soon. Lets discuss &lsquo;WhenIUseAResultVar&rsquo;.</p>
<h3 id="wheniusearesultvar">WhenIUseAResultVar</h3>
<p>I have a method with a very awkward control flow. But here is the catch: This control flow actually is enforced (in C#) by the compiler that result must be initialised.</p>
<p>My method could decalare at the start that &lsquo;result&rsquo; is initialised to &lsquo;null&rsquo;, telling me that a null could be returned if all logic falls through. In this case I have gone for the opposite, which means the compile ensures that all my cases through my control flow logic will set the value of result. for building and modifying this kind of method is like a free unit test.</p>
<p>For example, lets modify it as follows:</p>
<pre><code class="language-cs">
public string WhenIUseAResultVar(int input1, string input2)
{
    string result;
    
    if (input1 &gt; 5)
    {
        var part1 = new string('a', input1);
        if (input2 == &quot;Business&quot;)
        {
            result = part1 + &quot; &quot; + input2;
        }
    }
    else
    {
        result = null;
    }
    
    return result;
}
</code></pre>
<p>This code actually will not compile. It has compiler error <code>CS0165</code> <code>Use of unassigned local variable 'result</code>.</p>
<p><img src="http://res.cloudinary.com/csmacnz/image/upload/v1510945400/ControlFlowFail_kfkzq1.png" alt="Use of unassigned local variable &lsquo;result"></p>
<p>For me, this is gold.</p>
<h3 id="breaking-example-three">Breaking Example Three</h3>
<p>To explain later why I like doing this, even when there is no return value, lets look at an alternative way to write &lsquo;DoStuff&rsquo;:</p>
<pre><code class="language-cs">public void DoStuff(string foo, int bar)
{
    if(bar &gt; 10)
    {
        var something = WhenIUseAResultVar(bar, foo);
        OutputGuy.Take(something);
        return;
    }
    
    var somethingElse = WhenIPipeDataIntoOtherFunctions();
    Printer.Print(somethingElse);
}
</code></pre>
<p>It might look better to you for now, but stick with me. I will refer back to this in a moment.</p>
<h3 id="why-i-break-my-own-rules">Why I break my own rules.</h3>
<p>I don&rsquo;t usually break this rule. But when I do, I do so strictly and with intent.</p>
<p>Preconditions and validations.</p>
<p>There is a time and a place to exit early, and it is preconditions and validations. throwing <code>OutOfRangeException</code> <code>ArgumentNullException</code> <code>ArgumentException</code> and other preconditions make sense to exit early.</p>
<p>To prove this, Lets try to strictly applying my &lsquo;laws&rsquo; to a slightly more detailed version of the <code>WhenIUseAResultVar</code> method:</p>
<pre><code class="language-cs">public string WhenIUseAResultVar(int input1, string input2)
{
    string result;
    if (input1 &lt;= 0)
    {
        // Technically, this is already an early return.
        throw new IndexOutOfRangeException();
    }
    if (string.isNullOrEmpty(input2))
    {
        // Technically, this is already an early return.
        throw new IndexOutOfRangeException();
    }
    
    if (input1 &gt; 100)
    {
        string result = &quot;Case 1 Result&quot;;
    }
    else if (input1 &gt; 5)
    {
        var part1 = new string('a', input1);
        result = part1 + &quot; &quot; + input2;
    }
    else
    {
        result = &quot;Some Fallback Result&quot;;
    }
    
    return result;
}
</code></pre>
<p>Hmmm&hellip; turns out this is a poor example and I can&rsquo;t actually acheive it with exceptions. For arguments sake, lets use &lsquo;null&rsquo; as failed, rather than throwing.</p>
<pre><code class="language-cs">public string WhenIUseAResultVar(int input1, string input2)
{
    string result;
    if (input1 &lt;= 0)
    {
        result = null;
    }
    else if (string.isNullOrEmpty(input2))
    {
        result = null;
    }
    else if (input1 &gt; 100)
    {
        string result = &quot;Case 1 Result&quot;;
    }
    else if (input1 &gt; 5)
    {
        var part1 = new string('a', input1);
        result = part1 + &quot; &quot; + input2;
    }
    else
    {
        result = &quot;Some Fallback Result&quot;;
    }
    
    return result;
}
</code></pre>
<p>I can already feel the pain of this.  What I would actually do:</p>
<pre><code class="language-cs">public string WhenIUseAResultVar(int input1, string input2)
{
    if (input1 &lt;= 0) return null;
    if (string.isNullOrEmpty(input2)) return null;
    
    string result;
    
    if (input2 &gt; 100)
    {
        string result = &quot;Case 1 Result&quot;;
    }
    else if (input1 &gt; 5)
    {
        var part1 = new string('a', input1);
        result = part1 + &quot; &quot; + input2;
    }
    else
    {
        result = &quot;Some Fallback Result&quot;;
    }
    
    return result;
}
</code></pre>
<p>I may even use the single line format above without the braces on my returns, to further distinguish them for critical method logic.</p>
<h3 id="when-there-isnt-any-return-value">When there isn&rsquo;t any return value</h3>
<p>Even when you have a &lsquo;void&rsquo; method, the method still returns.</p>
<p>Remember <code>DoSomething</code> from above? Let&rsquo;s do something similar to above and strictly apply a single point of return (i.e. the end of the method).</p>
<pre><code class="language-cs">public void DoStuff(string foo, int bar)
{
    if (input1 &gt; 0 &amp;&amp;!string.isNullOrEmpty(input2) &amp;&amp; input2 &lt; 100)
    {
        if (bar &gt; 10)
        {
            var something = WhenIUseAResultVar(bar, foo);
            OutputGuy.Take(something);
        }
        else
        {
            var somethingElse = WhenIPipeDataIntoOtherFunctions();
            Printer.Print(somethingElse);
        }
    }
}
</code></pre>
<p>Or</p>
<pre><code class="language-cs">public void DoStuff(string foo, int bar)
{
    if (input1 &gt; 0)
    {
        if (!string.isNullOrEmpty(input2))
        {
            if (input2 &lt; 100)
            {
                if (bar &gt; 10)
                {
                    var something = WhenIUseAResultVar(bar, foo);
                    OutputGuy.Take(something);
                }
                else
                {
                    var somethingElse = WhenIPipeDataIntoOtherFunctions();
                    Printer.Print(somethingElse);
                }
            }
        }
    }
}
</code></pre>
<p>Or</p>
<pre><code class="language-cs">public void DoStuff(string foo, int bar)
{
    if (input1 &lt;= 0)
    {
    }
    else if (string.isNullOrEmpty(input2))
    {
    }
    else if (input2 &gt; 100)
    {
    }
    else if (bar &gt; 10)
    {
        var something = WhenIUseAResultVar(bar, foo);
        OutputGuy.Take(something);
    }
    else
    {
        var somethingElse = WhenIPipeDataIntoOtherFunctions();
        Printer.Print(somethingElse);
    }
}
</code></pre>
<p>Is this an improvement over alternatives? Not really in my opinion. (Remember I said this was my all about my opinions?) I actually felt worse and worse as I typed out each successive example. (I think I am trying to extract out intent by the above refactorings, but by this point I can&rsquo;t be sure).</p>
<p>Again, with breaking the rule on purpose:</p>
<pre><code class="language-cs">public void DoStuff(string foo, int bar)
{
    if (input1 &lt;= 0) return;
    if (string.isNullOrEmpty(input2)) return;
    if (input2 &gt; 100) return;
    
    if (bar &gt; 10)
    {
        var something = WhenIUseAResultVar(bar, foo);
        OutputGuy.Take(something);
    }
    else
    {
        var somethingElse = WhenIPipeDataIntoOtherFunctions();
        Printer.Print(somethingElse);
    }
}
</code></pre>
<p>I&rsquo;m liking this. Get validation out of the way, get on with main logic control flow.</p>
<h3 id="exceptions">Exceptions</h3>
<p>I&rsquo;ve already touched on this. Exceptions break the flow of control.  Exceptions are early returns already. They also shouldn&rsquo;t be actually used for flow of control. So it&rsquo;s probably fine?  And since I am happy with validations performing early return, these fit that case anyway. Consistency! (Phew!)</p>
<p>If my method actually returns Errors as a use case, I opt for something like I do with my <a href="https://github.com/csMACnz/Beefeater">Beefeater</a> library and have <code>Result&lt;TValue,TError&gt;</code> response objects, and control flow rule (and early-return-for-validation exception-to-sed-rule)  applies again.</p>
<h3 id="an-extra-section-about-short-circuiting">An extra section about short circuiting</h3>
<p>I&rsquo;ve written these on the assumption that you do not want to evaluate more conditions than you need to.</p>
<p>For instance, to make the <code>WhenIUseAResultVar</code> example more readable we could have pulled the conditional checks into named variables:</p>
<pre><code class="language-cs">public string WhenIUseAResultVar(int input1, string input2)
{
    if (input1 &lt;= 0) return null;
    if (string.isNullOrEmpty(input2)) return null;
    
    string result;
    
    var isLargeCase = input2 &gt; 100;
    var isSmallCase = input1 &gt; 5;
    if (isLargeCase)
    {
        string result = &quot;Case 1 Result&quot;;
    }
    else if (isSmallCase)
    {
        var part1 = new string('a', input1);
        result = part1 + &quot; &quot; + input2;
    }
    else
    {
        result = &quot;Some Fallback Result&quot;;
    }
    
    return result;
}
</code></pre>
<p>This aids readability, but is functionally different to the first example.  Even if <code>isLargeCase</code> is true, we still evaluate and execute <code>isSmallCase</code>. In the original example, <code>isLargeCase</code> being true shortcircuits and stops the evaluation of <code>isSmallCase</code> entirely.  If this was a real example, and <code>isSmallCase</code> required extra database access or web calls, you probably don&rsquo;t want to always evaluate this up front.</p>
<p>Having said that, If the cost of execution is low, and the improvement to readability and comprehensibility is high, Then do it. Also if the condition is that complex, push it out into a method call anyway:</p>
<pre><code>if(theSkyIsBlue(timeOfDay))
{
    ...
}
else if (ASimpleCheckPasses(input1) &amp;&amp; AWebCallCheck(input1, input2))
{
    ....
}
</code></pre>
<p>(Thanks [Graham Mace}(https://github.com/maceage) for the addition. )</p>
<h3 id="conclusion">Conclusion</h3>
<p>I&rsquo;m not even sure if I have actually convinced myself 100% at this point. Reality is, I have all of these techniques in my tool box, and I will probably pick and choose to enhance readability where applicable. Pragratism usually wins in these matters, but I find it useful to stop and think about concepts like this from time to time.</p>
<p>I was originally prompted to write this after reading the lecterror blog article <a href="http://lecterror.com/articles/view/code-formatting-and-readability">Code formatting and readability</a> and related StackOverflow question <a href="http://programmers.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement">Should I return from a function early or use an if statement?</a>.</p>
<p>(I thought, &ldquo;Hey! I have opinions too! And a Blog!&quot;)</p>
</description>
    </item>
    
    <item>
      <title>In C#, your structs should be immutable.</title>
      <link>https://csmacnzblog.github.io/post/in-c-your-structs-should-be-immutable/</link>
      <pubDate>Sun, 26 Nov 2017 20:35:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/in-c-your-structs-should-be-immutable/</guid>
      <description><p>I wrote some code. It was simple code. I had a collection. I iterated over the collection and updated the values. I did this several times in an outer loop.</p>
<p>The code didn&rsquo;t work.</p>
<p>Why didn&rsquo;t it work? My collection was an array of Structs. When I pulled an item out in the for loop, it was copied. When I updated the copy, the changes went away at the end of the scope.</p>
<p>This bug survived because my simple use case actually meant the same value was stored back in at the end of a simple mathematical calculation, so I didn&rsquo;t see a problem. But code has a way of changing, and when I tried to use this code with something where the math didn&rsquo;t work out so cleanly it failed, and it was subtle. It took some debug-foo to find the issue until I realised it was a Struct.</p>
<p>My Struct is now Immutable.</p>
<p>In C#, your structs should be immutable.</p>
<p>If they are mutable, another developer will not be able to tell it is not a class, and they will have certain pre-conceptions when they read your code. They will see class types, and they will expect it to pass by reference, and mutate the same original instance. That other developer will probably be you, In a few months. This is a perfect example of why you need to use canonical techniques and idiosyncracies of the language you are coding in, too.</p>
<p>Or, just use a Class.</p>
</description>
    </item>
    
    <item>
      <title>dotnet build, targeting full .Net 4.5.1 on nanoserver docker</title>
      <link>https://csmacnzblog.github.io/post/dotnet-build-targeting-full-net451-on-nanoserver-2/</link>
      <pubDate>Fri, 31 Mar 2017 01:18:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnet-build-targeting-full-net451-on-nanoserver-2/</guid>
      <description><p>I have been struggling to get dotnet build to work on nanoserver via docker. I had already given up on git, because I can perform git tasks outside the container first.</p>
<p>Basically I was trying this:</p>
<pre><code>docker run -v &quot;$(pwd):C:/work&quot; -w C:/work -it --rm microsoft/dotnet:1.1.1-sdk-nanoserver powershell build.ps1
</code></pre>
<p>This maps the current repository directory to a folder called <code>work</code> on the container, and runs the build inside it. This approach means:</p>
<ul>
<li>a) All software dependencies are isolated inside the container (including which version of the dotnet cli tools are installed); and</li>
<li>b) All resulting files are available on the host machine afterwards.</li>
</ul>
<p>The problem is this:</p>
<pre><code>C:\Program Files\dotnet\sdk\1.0.1\Microsoft.Common.CurrentVersion.targets(1111,5): error MSB3644: The reference assemblies for framework &quot;.NETFramework,Version=v4.5&quot; were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [C:\work\project\MyProject\MyProject.csproj]
</code></pre>
<p>Basically, this docker image is &ldquo;microsoft/dotnet:1.1.1-sdk-nanoserver&rdquo;, which is docker image targeting windows NanoServer and contains the dotnet core 1.1.1 tools (current latest, first with <code>*.csproj</code> capability).  This image does not contain the full .Net framework (among other things).</p>
<p>Now I could have decided to use <code>microsoft/dotnet-framework</code> which is built on <code>microsoft/windowsservercore</code> and includes full <code>.Net</code>. However, that is a 4GB base image with another 1Gb image applied on top. Very large.</p>
<p>This lead me to try a few different things to fix the error on this image, eventually finding the magic combo I needed:</p>
<pre><code>-e &quot;ReferenceAssemblyRoot=C:\NetReference&quot; -v &quot;C:/Program Files (x86)/Reference Assemblies\Microsoft\Framework:C:/NetReference&quot;
</code></pre>
<p>Essentially I map the Reference Assemblies folder to the container as well. Then I use the (rather undiscoverable) Environment Variable <code>ReferenceAssemblyRoot</code> to point to that folder. That folder on my machine looks like:</p>
<pre><code>Framework
 |-- .NETCore
 |    +-- ...
 |-- .NETFramework
 |    |-- v3.5
 |    |   +-- ...
 |    |-- v4.0
 |    |   +-- ...
 |    |-- v4.5
 |    |   +-- ...
 |    |-- v4.5.1
 |    |   +-- ...
 |    |-- ...
 |-- .NETPortable
 |    +-- ...
 |-- Silverlight
 |    +-- ...
 |-- v3.0
 |    +-- ...
 +-- v3.5
      +-- ...
</code></pre>
<p>Basically, every target framework sdk I have installed on the machine.</p>
<p>And for building libraries, this is all you need.</p>
<p>The full final command is:</p>
<pre><code>docker run -e &quot;ReferenceAssemblyRoot=C:\NetReference&quot; -v &quot;C:/Program Files (x86)/Reference Assemblies\Microsoft\Framework:C:/NetReference&quot; -v &quot;$(pwd):C:/work&quot; -w C:/work -it --rm microsoft/dotnet:1.1.1-sdk-nanoserver powershell build.ps1
</code></pre>
<p>Just make sure that you have the required frameworks on your machine already (which might be your laptop or (in my case) a TeamCity Agent with Windows Docker installed and configured.</p>
</description>
    </item>
    
    <item>
      <title>&#34;failed to peek context header from STDIN&#34; and how to fix</title>
      <link>https://csmacnzblog.github.io/post/failed-to-peek-context-header-from-stdin-and-how-to-fix/</link>
      <pubDate>Tue, 29 Nov 2016 04:12:29 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/failed-to-peek-context-header-from-stdin-and-how-to-fix/</guid>
      <description><p>The <a href="https://docs.docker.com/engine/reference/commandline/build/#/text-files">docker guidance says</a> you can run docker build piping the dockerfile:</p>
<pre><code>#On linux
$ docker build - &lt; Dockerfile
</code></pre>
<p>and on Windows it says to do this:</p>
<pre><code>#PowerShell
Get-Content Dockerfile | docker build -
</code></pre>
<p>Nice. But I&rsquo;ve been getting this error all day&hellip;</p>
<pre><code>&gt; Get-Content Dockerfile | docker build -
unable to prepare context: failed to peek context header from STDIN: Incorrect function.
</code></pre>
<h3 id="wat">WAT</h3>
<p>After much pain, I figured out the error is because I was running inside <a href="http://conemu.github.io/">conemu</a>. *<em>Sigh</em>*</p>
<p>Sorry to say I don&rsquo;t know how to fix the problem. But at least I know the cause. The solution for now is to run this command in a Regular PowerShell window and avoid conemu for this command.</p>
<p>Since I searched this error in google and found nothing, I hope this helps the next person who looks.</p>
</description>
    </item>
    
    <item>
      <title>Form posts with PowerShell</title>
      <link>https://csmacnzblog.github.io/post/formpost-with-powershell/</link>
      <pubDate>Mon, 27 Jun 2016 03:57:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/formpost-with-powershell/</guid>
      <description><p>This article is based on an answer found and updated on <a href="http://stackoverflow.com/a/37729623/2118268">StackOverflow</a>.</p>
<p>I&rsquo;f you have used PowerShell for much at all, you are probably familiar with <code>Invoke-WebRequest</code>. But did you know you can carry around a session and have it automatically add and update cookies for you?</p>
<h3 id="the-scenario">The Scenario</h3>
<p>I had an API I wanted to consume, but it was a private one. That is, It was designed and used for a SPA app to consume. The auth for this API (for the write endpoints anyway) had two requirements: It authorised against cookies and required a csrf token in the requests.  Don&rsquo;t get hung up on the why or who wrote it, but my plan was to call it without having to change it.</p>
<h3 id="sessionvariable">SessionVariable</h3>
<p>It turns out that the command <code>Invoke-WebRequest</code> has an argument <code>-SessionVariable</code> where you can provide an object to store session state.  On subsequent requests, you can pass it along again using the argument <code>-WebSession</code>.</p>
<p>So we know how to store the session, how do we post a form? Well, clearly you get the page with the form on it, then post that form back. If you have a proper classic HTML page with a <code>Form</code> on it, you can do a <code>GET</code> to that page and use it by filling it out and executing the provided command.</p>
<pre><code>$myUrl = &quot;http://mydomain.url&quot;  

$response = Invoke-WebRequest -Uri $myUrl -Method GET -SessionVariable mySession

$form = $response.Forms[0]
$form.Fields[&quot;username&quot;] = &quot;username&quot;
$form.Fields[&quot;password&quot;] = &quot;password&quot;

$response = Invoke-WebRequest -Uri ($myUrl + $form.Action) -WebSession $mySession -Method POST 
$response.StatusDescription #should be OK
</code></pre>
<p>You may have to check exactly what format <code>$form.Action</code> takes to see if it is absolute or relative URL, or if it includes the domain or not.</p>
<p>Also, check what your form fields are called. I have a mistake in mine where the field was called <code>user</code> rather than <code>username</code> on one page.</p>
<p>Note that in the first request when you use the <code>-SessionVariable</code> argument, you just provide the name of the variable, and not a variable itself. That is, use <code>mySession</code> rather than <code>$mySession</code>.</p>
<p>If you complete this correctly you should have all the correct cookies passed around. This means that both:</p>
<ol>
<li>The post will work if there is any cookie verification across the get and post and</li>
<li>The resulting <code>$mySession</code> will contain an authenticated cookie for further authenticated requests.</li>
</ol>
<h3 id="csrf">CSRF</h3>
<p>Part two is that I had to parse out csrf. I am still not sure why the requests require the csrf token, probably because it&rsquo;s a <a href="samnewman.io/patterns/architectural/bff/">BFF</a> API.</p>
<p>Luckily, the login form had a token in the original form, so I was able to just provide that in subsequent requests.</p>
<pre><code>$payload = @{_csrf = $form.Fields[&quot;_csrf&quot;]; data = &quot;more data&quot;}
</code></pre>
<p>and then can just use the payload as normal:</p>
<pre><code>$response = Invoke-WebRequest -Uri ($myUrl + $form.Action) -WebSession $mySession -Method POST -Body $payload
</code></pre>
<p>Of course, your mileage may vary. But this worked for me. The other option would have been to parse out the value from the page, from cookies, or actually, just fix the service to not need it I guess?</p>
</description>
    </item>
    
    <item>
      <title>Retries with Polly</title>
      <link>https://csmacnzblog.github.io/post/retries-with-polly/</link>
      <pubDate>Fri, 24 Jun 2016 02:01:49 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/retries-with-polly/</guid>
      <description><p>Just a quick results of an investigation of our PrintService v-next logs that keep happening (can&rsquo;t find queue)
<strong>Why?</strong> - Because I was worried that I was using Polly Retries wrong, to know for next time (SPOILERS - I was)</p>
<p><strong>What:</strong>
We have retries over checking the queue (and other aws commands.  We see many errors of <code>WebException: The remote server returned an error: (504) Gateway Timeout</code> happening quite a lot. These should be being retried and so should never trigger an error log. We are seeing a lot of logs still.
Investigating further, we don not actually log any messages saying &ldquo;here is the error, going to retry now&rdquo; which should happen because of this line of code: <a href="https://github.dev.xero.com/dev-markc/PrintService/blob/master/project/Xero.PrintService.Platform/Policy/AWSPolicy.cs#L43">https://github.dev.xero.com/dev-markc/PrintService/blob/master/project/Xero.PrintService.Platform/Policy/AWSPolicy.cs#L43</a>
I looked into the filter we were using. It looks sensible, only retry if the error is not the sender&rsquo;s fault.
Then I found out that the AmazonServiceException ErrorType defaults to ErrorType.Sender. Then I found the following line of code that wraps WebExceptions (like above) doesn&rsquo;t even set the ErrorType, and so it will be ErrorType.Sender - <a href="https://github.com/aws/aws-sdk-net/blob/master/sdk/src/Core/Amazon.Runtime/Pipeline/ErrorHandler/WebExceptionHandler.cs#L44">https://github.com/aws/aws-sdk-net/blob/master/sdk/src/Core/Amazon.Runtime/Pipeline/ErrorHandler/WebExceptionHandler.cs#L44</a></p>
<p><strong>Conclusion</strong> - Don&rsquo;t trust the Error type and assume it means what it is supposed to - and we were not actually retrying.
So every error we were emailed is indicative of how often we get network connection timeouts to AWS SQS. So Retries are really important.  But we need to be careful with our retry logic, because with the Polly API you have to check the PolicyResult.ExceptionType - ExceptionType.Unknown means there was an exception unhandled by the policy - passed through, and  ExceptionType.HandledByThisPolicy means it actually retried, and timed out.</p>
</description>
    </item>
    
    <item>
      <title>Manage your hosts entries better</title>
      <link>https://csmacnzblog.github.io/post/manage-your-hosts-entries-better/</link>
      <pubDate>Tue, 31 May 2016 04:25:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/manage-your-hosts-entries-better/</guid>
      <description><p>If you are working with a lot of sites in IIS then you will be familiar with the hosts file on your computer. <code>%SystemRoot%\System32\drivers\etc\hosts</code>, usually found in <code>C:\Windows\System32\drivers\etc\hosts</code>.  This file acts as a DNS mapping table used by your computer.  As a developer, you will often want to tinker with this table. For example, you have a site running locally and you want to run it with a URL in your browser. You can map <code>www.mysite.local</code> to the IP address of your machine, or the local loopback address <code>127.0.0.1</code></p>
<pre><code>127.0.0.1    www.mysite.local    #comments are supported too
</code></pre>
<p>You can even use line comments at the end of your config using the &lsquo;#&rsquo; character, or comment out lines by placing a &lsquo;#&rsquo; at the start of the file.</p>
<p>Managing this can get really annoying. It&rsquo;s a text file, its owned by the system, and you usually need to be running your editor as admin to save it.  It is also located so deeply into the windows directory that it is bothersome to deal with at times.</p>
<p>Luckily, a nice GUI has been built for it that you can pull down off of CodePlex. The best thing is that it plugs into IIS directly. It is called IIS Hosts File Manager Module. Check it out at <a href="https://iishostsmgr.codeplex.com/">https://iishostsmgr.codeplex.com/</a></p>
<p><img src="http://i3.codeplex.com/Download?ProjectName=iishostsmgr&amp;DownloadId=364495" alt="Host Manager in action - image from https://iishostsmgr.codeplex.com/"></p>
<p>The UI is very simple and easy to use. It means that you can add or update host entries directly inside IIS without having to go hunting for the file. A huge productivity boost.</p>
<p>Recommended.</p>
</description>
    </item>
    
  </channel>
</rss>