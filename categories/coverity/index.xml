<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coverity on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/coverity/</link>
    <description>Recent content in Coverity on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 08 Mar 2015 17:34:21 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/coverity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing PublishCoverity</title>
      <link>https://csmacnzblog.github.io/post/introducing-publishcoverity/</link>
      <pubDate>Sun, 08 Mar 2015 17:34:21 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/introducing-publishcoverity/</guid>
      <description><p>As part of my open source development tooling investigation, I came across <a href="https://scan.coverity.com/">Coverity Scan</a> Static Analysis. And thanks to <a href="http://arkfps.github.io/2015/01/07/using-coverity-scan-with-appveyor/">Arkfps' post</a> I could automate the process of submitting the results. And now <a href="http://help.appveyor.com/discussions/suggestions/497-coverity-static-analysis-support">Appveyor includes Coverity on it&rsquo;s images</a>. But I decided to take his work one step further, and so I built a small utility to compress and submit the results.</p>
<p><a href="https://www.nuget.org/packages/PublishCoverity">PublishCoverity</a> is available on NuGet, and has two use cases: Compress and Publish.</p>
<p>Compress takes a directory and compresses it to produce an output zip file.</p>
<pre><code class="language-cmd">Signature:
    PublishCoverity compress [-o &lt;file&gt;] [-i &lt;folder&gt;] [--overwrite] [--dryrun]

Example:
    PublishCoverity compress -o results.zip -i cov-int
</code></pre>
<p>Publish takes that file and some of your project data and posts it off to Coverity for you.</p>
<pre><code class="language-cmd">Signature:
    PublishCoverity publish -t &lt;token&gt; -e &lt;email&gt; [-r &lt;name&gt;] [-z &lt;file&gt;] [-d &lt;desc&gt;] [--codeVersion &lt;version&gt;] [--dryrun] [--nologo]
    
Example:
    PublishCoverity publish -t COVERITYTOKEN -e example@example.com -r MyUser/MyProject -z results.zip -d &quot;my project&quot; --codeVersion 0.1.2.3
</code></pre>
<p>Although this is still evolving, the gist of what is above will be available to compress and/or publish your results to Coverity Scan. The idea is that anything that I can reasonably determine for you I will try and make optional. Such as your repository name from the AppVeyor Build Environment variables.</p>
<p>I&rsquo;ve already had a request to add some guards around the results to ensure they are valid and complete before sending, but right now version 0.9 is available on NuGet for you to install and use, and the source is <a href="https://github.com/csMACnz/coveritypublisher">available on GitHub</a>  All feedback and features requests welcome as GitHub issues, or just comment on this post.</p>
<p>Enjoy!</p>
</description>
    </item>
    
  </channel>
</rss>