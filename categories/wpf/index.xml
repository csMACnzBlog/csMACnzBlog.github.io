<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wpf on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/wpf/</link>
    <description>Recent content in wpf on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Wed, 06 Oct 2010 03:44:12 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WPF VS Silverlight 1: Data Template Selector</title>
      <link>https://csmacnzblog.github.io/post/wpf-vs-silverlight-1-data-template-selector/</link>
      <pubDate>Wed, 06 Oct 2010 03:44:12 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/wpf-vs-silverlight-1-data-template-selector/</guid>
      <description>&lt;p&gt;Here is my first post on what I will try and turn into a series of WPF/Silverlight differences and how to get around them.  First I will begin by talking about &lt;code&gt;DataTemplateSelector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I suppose before I talk about the &lt;code&gt;DataTemplateSelector&lt;/code&gt; class, I should mention a little bit about what a Template is.  Unless you are new to WPF and Silverlight Development (and by extension, WP7 development) you will be aware all controls have a Template Property.  This property is of type &lt;code&gt;ControlTemplate&lt;/code&gt;, and allows you to change the look and behaviour of a control, without affecting it&amp;rsquo;s behaviour.   ContentControl which derives from Control has a Content field which holds an object. This object gets its look and feel from somewhere, and if it is a UIElement, then it comes from itself.  But if the object is some other type, such as a POCO or ViewModel object, then the default behaviour is to use the object&amp;rsquo;s &lt;code&gt;ToString()&lt;/code&gt; method.  Most of you have probably seen this numerous times and this is where the DataTemplate comes in.&lt;/p&gt;
&lt;p&gt;ContentControl has another property called &lt;code&gt;ContentTemplate&lt;/code&gt;, of type &lt;code&gt;DataTemplate&lt;/code&gt;, that will be used in place of the content.  By default, the DataContext of the Template will be the Content property of the ContentControl. The benefit of this is that we can apply Bindings to get at the properties of the object itself. This finally brings me to the differences section of this post, The &lt;code&gt;DataTemplateSelector&lt;/code&gt;. Up to this point, we are describing both Silverlight and WPF, but the &lt;code&gt;ContentTemplateSelector&lt;/code&gt; Property of type &lt;code&gt;DataTemplateSelector&lt;/code&gt; only exists on the WPF version of the &lt;code&gt;ContentControl&lt;/code&gt; Class. So before I tell you how to overcome this, I will convince you of why you would bother using this feature anyway.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DataTemplateSelector&lt;/code&gt; is a nice little class that has an overridable method called SelectTemplate which takes an item(the Content object) and a container(the Data-Bound Object, in this case the ContentControl) and returns a DataTemplate. By overriding this class we can create some logic that determines which DataTemplate is used based on some conditions at the time of it&amp;rsquo;s use.  This could be a property of the item, such as an enum or boolean field, the type of the object, or something more complex. Basically you write the logic and return the right DataTemplate.&lt;/p&gt;
&lt;p&gt;For a simple example of how this works, check out this page which demonstrates using text and image file names for selecting the DataTemplate. &lt;a href=&#34;http://www.switchonthecode.com/tutorials/wpf-tutorial-how-to-use-a-datatemplateselector&#34;&gt;how-to-use-a-datatemplateselector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Its also worth mentioning that the ItemsControl class (and therefore it&amp;rsquo;s derived types such as ListBox) also have an &lt;code&gt;ItemTemplateSelector&lt;/code&gt; which is a &lt;code&gt;DataTemplateSelector&lt;/code&gt;, and can be used to give a different dataTemplate to different items in a collection, bound or set to the ItemsControl&amp;rsquo;s Items.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;m sure you can start to see some places where this might be useful, but what about Silverlight? Fortunately there is a solution. Converters.&lt;/p&gt;
&lt;p&gt;By using some little tricks, we can use a Converter and a ContentControl and bind our object that needs a template to the Content Property of our ContentControl using a &lt;code&gt;DataTemplateSelectorConverter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For a simple implementation of the &lt;code&gt;DataTemplateSelectorConverter&lt;/code&gt;, check out this posting. &lt;a href=&#34;http://garfoot.com/blog/2010/03/flexible-data-template-support-in-silverlight/&#34;&gt;Data Template Selector for Silverlight&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have made a few adjustments to this design, but I will save that for a later post. For now, this is one difference determined, and luckily a solution found.  I will try to add a real example of using the selector for both Silverlight and WPF in a future post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>