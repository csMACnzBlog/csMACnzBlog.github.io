<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NuGet on csMACnz&#39;s Blog</title>
    <link>https://blogmigration.csmac.nz/categories/nuget/</link>
    <description>Recent content in NuGet on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blogmigration.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blogmigration.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 08 Oct 2018 05:00:00 +0000</lastBuildDate><atom:link href="https://blogmigration.csmac.nz/categories/nuget/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speciality NuGet Packing on .Net Core</title>
      <link>https://blogmigration.csmac.nz/post/speciality-nuget-packing/</link>
      <pubDate>Mon, 08 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/speciality-nuget-packing/</guid>
      <description>&lt;p&gt;I recently wrote about &lt;a href=&#34;https://blogmigration.csmac.nz/nuget-packing-on-linux/&#34;&gt;NuGet packing on linux&lt;/a&gt; specifically, and want to continue the theme with other things you can do with NuGet packaging.&lt;/p&gt;
&lt;p&gt;As a quick recap you can use a .Net Core &lt;code&gt;*.csproj&lt;/code&gt; as a wrapper around a &lt;code&gt;*.nuspec&lt;/code&gt; file and use &lt;code&gt;dotnet pack&lt;/code&gt; to pack it, cross-platform, without needing &lt;code&gt;nuget.exe&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;NuspecFile&amp;gt;mynewapp.nuspec&amp;lt;/NuspecFile&amp;gt;
    &amp;lt;GeneratePackageOnBuild&amp;gt;true&amp;lt;/GeneratePackageOnBuild&amp;gt;
    &amp;lt;SkipCompilerExecution&amp;gt;true&amp;lt;/SkipCompilerExecution&amp;gt;
    &amp;lt;CopyBuildOutputToOutputDirectory&amp;gt;false&amp;lt;/CopyBuildOutputToOutputDirectory&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(See the &lt;a href=&#34;https://blogmigration.csmac.nz/nuget-packing-on-linux/&#34;&gt;other article&lt;/a&gt; for more detailed analysis of these properties.)&lt;/p&gt;
&lt;p&gt;Now for something new.&lt;/p&gt;
&lt;h3 id=&#34;contentfiles&#34;&gt;ContentFiles&lt;/h3&gt;
&lt;p&gt;Do you remember Content files? There was(is?) this feature in NuGet files where you can include files, and have those files automatically added to your .Net Framework applications when the Package is Installed. Some libraries used this to distribute code that could be embedded into your application instead of linking to a library dependency.  Dapper was one example that did this, and I think some logging frameworks also distributed some code this way.&lt;/p&gt;
&lt;p&gt;There were a tonne of downsides to this approach. The files were editable, they were put into source control, and they didn&amp;rsquo;t update automatically when you updated the NuGet package.  These might sound like upsides, and they were probably best practice given the circumstances. But from a distributer&amp;rsquo;s point of view, these were downsides.&lt;/p&gt;
&lt;p&gt;There were other issues as well, especially now we have dotnet core cli, and we have cross-platform builds. This approach is no longer viable in most situations.&lt;/p&gt;
&lt;p&gt;Luckily, there is a replacement to &lt;code&gt;Content&lt;/code&gt; files, and that is &lt;code&gt;ContentFiles&lt;/code&gt;. &lt;a href=&#34;https://blog.nuget.org/20160126/nuget-contentFiles-demystified.html&#34;&gt;NuGet ContentFiles Demystified
&lt;/a&gt; seems to be the canonical reference post on what these are and how they work, and if you want to read the spec for how to use these with &lt;code&gt;nuspec&lt;/code&gt;, that is &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/reference/nuspec#contentfiles&#34;&gt;documented here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How do we make this work with &lt;code&gt;dotnet pack&lt;/code&gt; without using the &lt;code&gt;nuspec&lt;/code&gt; trick above? Say you are already packaging a DLL, and want to add an extra file to the mix?  Here is the answer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Remove=&amp;quot;IncludedFile.cs&amp;quot; /&amp;gt;
    &amp;lt;Content Include=&amp;quot;IncludedFile.cs&amp;quot; BuildAction=&amp;quot;Compile&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s say this is an application with a bunch of source files. We have one source file that rather than compile it in, we want to include into the project that uses the package at compile time.  First, we remove our file from compiling inside our app, then we make it &lt;code&gt;Content&lt;/code&gt;.  By default, any &lt;code&gt;Content&lt;/code&gt; files will become &lt;code&gt;contentFiles&lt;/code&gt; in the NuGet package.  It is that easy.&lt;/p&gt;
&lt;p&gt;There is one cool trick you can do here, too. if you call your file &lt;code&gt;*.cs.pp&lt;/code&gt;, you can run transforms over it. The most (and only) useful one for us is the namespace placeholder. Anywhere in the file you write &lt;code&gt;$rootnamespace$&lt;/code&gt; it will be replaced by the namespace of the project that imports the package, before that library compiles this file. Very handy to ensure that the user&amp;rsquo;s own namespace is used when compiling this file.&lt;/p&gt;
&lt;p&gt;A few notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the code in that file doesn&amp;rsquo;t compile, consumers will not be able to compile their application (maybe look at using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/&#34;&gt;preprocessor directives&lt;/a&gt; for different framework targets.&lt;/li&gt;
&lt;li&gt;Clients need to include &lt;code&gt;contentfiles&lt;/code&gt; Assets when they reference the library or they won&amp;rsquo;t get the files, and they can also use that feature to explicitly turn that off. Document this for them. (specifically &lt;code&gt;&amp;lt;IncludeAssets&amp;gt;contentfiles;&amp;lt;/IncludeAssets&amp;gt;&lt;/code&gt;, but &lt;code&gt;IncludeAssets&lt;/code&gt; is set to include all asset types by default anyway.)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;contentFiles&lt;/code&gt; are included per language, per framework, based on the &lt;code&gt;TargetFramework&lt;/code&gt; you are building against (the same way the DLLs do). This means the files will only work with the same language as the project (by default) and the same target frameworks by default. My understanding is that this still follows the usual highest compatible resolution.&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t want your NuGet to pack content files, you can use the &lt;code&gt;&amp;lt;IncludeContentInPack&amp;gt;false&amp;lt;/IncludeContentInPack&amp;gt;&lt;/code&gt; setting to turn that feature off completely.&lt;/li&gt;
&lt;li&gt;you can set &lt;code&gt;Pack=&amp;quot;false&amp;quot;&lt;/code&gt; onto a Content element to exclude it from packaging as one of the contentFiles. You can also set &lt;code&gt;Pack=&amp;quot;true&amp;quot;&lt;/code&gt; on None and Compile elements as well for them to be included the same way.
As well as BuildAction &lt;code&gt;Compile&lt;/code&gt;, there are a couple of others: &lt;code&gt;Content&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Embedded Resource&lt;/code&gt;. The same way you can define a file to be one of these in your &lt;code&gt;csproj&lt;/code&gt;, the project that includes your &lt;code&gt;contentFiles&lt;/code&gt; will have them set to that specified item type.  &lt;code&gt;Content&lt;/code&gt; might be useful if you want a file to be copied to their build output folder for some reason. I can&amp;rsquo;t seem to think of a valid reason for &lt;code&gt;None&lt;/code&gt;, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It turns out it is that simple to do &lt;code&gt;contentFiles&lt;/code&gt; out of the box.&lt;/p&gt;
&lt;h3 id=&#34;build-props-and-targets&#34;&gt;build props and targets&lt;/h3&gt;
&lt;p&gt;You can arbitrarily include any file into any location in the NuGet package if you like. There is a special folder called &lt;code&gt;build&lt;/code&gt; that contains props and targets to extend MSBuild. For instance, we might want to have a props file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;None Include=&amp;quot;MyNewApp.props&amp;quot; PackagePath=&amp;quot;build/$(TargetFramework)&amp;quot; Pack=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wanted the same file to work for all targets, you could simply just use &lt;code&gt;PackagePath=&amp;quot;build&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When using props and targets, you want your entry file to be the same name as the project/package, so that it will get loaded by the project that consumes your NuGet package.&lt;/p&gt;
&lt;p&gt;More about how the &lt;code&gt;nuspec&lt;/code&gt; file is supposed to look for props and targets &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package#including-msbuild-props-and-targets-in-a-package&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note they recommend using a min client version to let clients know you are using this feature:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;MinClientVersion&amp;gt;2.5&amp;lt;/MinClientVersion&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, you can now augment the build props and tasks in your consumers&#39; projects, and use this approach to include any arbitrary files into your NuGet package.&lt;/p&gt;
&lt;h3 id=&#34;metadata-properties&#34;&gt;Metadata properties&lt;/h3&gt;
&lt;p&gt;The nice thing about using a &lt;code&gt;csproj&lt;/code&gt;, is that with this one file you can set all your assembly metadata, as well as NuGet package metadata.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#nuget-metadata-properties&#34;&gt;Additions to the csproj format&lt;/a&gt; page gives a great overview of (among other things) all the possible properties you can put into your &lt;code&gt;csproj&lt;/code&gt; files, and where exactly these will go into your file NuGet package metadata. This is the final piece that ensures you don&amp;rsquo;t actually have to hand-craft a &lt;code&gt;nuspec&lt;/code&gt; file at all and can keep all your pack information inside the &lt;code&gt;csproj&lt;/code&gt; file instead.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;If you follow everything here, you should get a &lt;code&gt;csproj&lt;/code&gt; file that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contains all your project and package metadata&lt;/li&gt;
&lt;li&gt;Can include, or exclude a compiled DLL from source code&lt;/li&gt;
&lt;li&gt;Can include &lt;code&gt;contentFiles&lt;/code&gt; including &lt;code&gt;Compile&lt;/code&gt; sources, and &lt;code&gt;EmbeddedResource&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;Can include build props and targets to condition how the consumer&amp;rsquo;s build will run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Hacking those NuGet packages!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NuGet Packing on Linux</title>
      <link>https://blogmigration.csmac.nz/post/nuget-packing-on-linux/</link>
      <pubDate>Mon, 01 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/nuget-packing-on-linux/</guid>
      <description>&lt;p&gt;For anyone who has been cutting-edge with .Net for a while will know that the nuget.exe runs under mono. And that you can use nuget.exe to package &lt;code&gt;*.nuspec&lt;/code&gt; files into &lt;code&gt;*.nupkg&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Anyone who has been doing dotnet cross-platform will also know that you can use &lt;code&gt;dotnet pack&lt;/code&gt; on both Windows and Linux to package your project into a NuGet package containing the &lt;code&gt;dll&lt;/code&gt;. It even does references and multi-targeting correctly out of the box.&lt;/p&gt;
&lt;p&gt;But did you know that you can also use dotnet pack to package any arbitrary &lt;code&gt;nuspec&lt;/code&gt; file as well?&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s look at a simple &lt;code&gt;nuspec&lt;/code&gt; file that only has package references (an aggregate package).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package xmlns=&amp;quot;http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd&amp;quot;&amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;id&amp;gt;MyNewApp&amp;lt;/id&amp;gt;
    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;authors&amp;gt;csMACnz&amp;lt;/authors&amp;gt;
    &amp;lt;description&amp;gt;An aggregate package example&amp;lt;/description&amp;gt;
    &amp;lt;tags&amp;gt;utils example&amp;lt;/tags&amp;gt;

    &amp;lt;dependencies&amp;gt;
      &amp;lt;dependency id=&amp;quot;Newtonsoft.Json&amp;quot; version=&amp;quot;11.0.2&amp;quot; /&amp;gt;
      &amp;lt;dependency id=&amp;quot;Beefeater&amp;quot; version=&amp;quot;0.5.0&amp;quot; /&amp;gt;
    &amp;lt;/dependencies&amp;gt;
  &amp;lt;/metadata&amp;gt;
  &amp;lt;files&amp;gt;
    &amp;lt;!-- empty files tag avoids copying all files --&amp;gt;
  &amp;lt;/files&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could use &lt;code&gt;nuget.exe pack&lt;/code&gt; but that wouldn&amp;rsquo;t work on Linux. Instead, we create a csproj file designed to do the pack for us in a standard &lt;code&gt;dotnet pack&lt;/code&gt; kind of way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;NuspecFile&amp;gt;newapp.nuspec&amp;lt;/NuspecFile&amp;gt;
    &amp;lt;NuspecProperties&amp;gt;&amp;lt;/NuspecProperties&amp;gt;
    &amp;lt;NuspecBasePath&amp;gt;&amp;lt;/NuspecBasePath&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The magic is these three properties (only one required, really):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;NuspecFile&amp;gt;&lt;/code&gt; - Required to tell dotnet to use the hand-crafted &lt;code&gt;nuspec&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;NuspecProperties&amp;gt;&lt;/code&gt; - (Optional) ability to generate and send &lt;code&gt;nuspec&lt;/code&gt; &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/reference/nuspec#replacement-tokens&#34;&gt;replacement tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;NuspecBasePath&amp;gt;&lt;/code&gt; - (Optional) relative base path to use for pack files (defaults to project folder)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details on all the things you can put into a &lt;code&gt;nuspec&lt;/code&gt; file, check out the docs: &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/reference/nuspec&#34;&gt;https://docs.microsoft.com/en-us/nuget/reference/nuspec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But we don&amp;rsquo;t stop there. If you run this you will see that we are still building our empty project. We can do a couple of things here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;NoBuild&amp;gt;true&amp;lt;/NoBuild&amp;gt;&lt;/code&gt; - Adding this will stop the build step being run during pack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;GeneratePackageOnBuild&amp;gt;true&amp;lt;/GeneratePackageOnBuild&amp;gt;&lt;/code&gt; - We can instead tell &lt;code&gt;dotnet build&lt;/code&gt; to run the pack as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of these two scenarios may suit you better. It depends.&lt;/p&gt;
&lt;p&gt;Using the above settings, you can basically produce any kind of NuGet package you want.&lt;/p&gt;
&lt;p&gt;For one last piece of tidy-up, you can disable the compile and remove the dll from the build output entirely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SkipCompilerExecution&amp;gt;true&amp;lt;/SkipCompilerExecution&amp;gt;&lt;/code&gt; - (Optional) disable compile entirely&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;CopyBuildOutputToOutputDirectory&amp;gt;false&amp;lt;/CopyBuildOutputToOutputDirectory&amp;gt;&lt;/code&gt; - stop the dll output to the output folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, at this stage I am still yet to find a reasonable way to remove the need for &lt;code&gt;&amp;lt;TargetFramework&amp;gt;&lt;/code&gt;, but something I am still experimenting with. There is a chance that if you are really customising your MSBuild commands, you would end up leveraging the &lt;code&gt;dotnet restore&lt;/code&gt;, and that requires a TargetFramework anyway, so not a big deal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Core Series - NuGet</title>
      <link>https://blogmigration.csmac.nz/post/dotnetcore-nuget/</link>
      <pubDate>Mon, 01 Aug 2016 08:18:33 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/dotnetcore-nuget/</guid>
      <description>&lt;p&gt;This is a series on the .Net Core 1.0 bits. Looking for &lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore2-getting-started&#34;&gt;.Net Core 2 Series&lt;/a&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-whats-in-the-box&#34;&gt;What&amp;rsquo;s in the box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-testing&#34;&gt;Using Multiple Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NuGet &amp;lt;=(We are here)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-multi-targeting&#34;&gt;Multi-targeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-publishing-portable-applications&#34;&gt;Publishing Portable Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogmigration.csmac.nz/dotnetcore-self-contained-applications&#34;&gt;Self-contained Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s set aside Application packing for later, and focus our attention on NuGet.&lt;/p&gt;
&lt;h3 id=&#34;our-demo-library&#34;&gt;Our Demo library&lt;/h3&gt;
&lt;p&gt;Again we will quickly whip up a library to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir mynewpackage
cd mynewpackage
dotnet new -t Lib
dotnet restore
dotnet build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some quick touch-ups to make it more interesting. Replace Library.cs with this again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;namespace mynewpackage
{
    public class Calculator
    {
        public int Add(int first, int second)
        {
            return first + second;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least now our package contains something interesting.&lt;/p&gt;
&lt;h3 id=&#34;simple-packing&#34;&gt;Simple Packing&lt;/h3&gt;
&lt;p&gt;It isn&amp;rsquo;t very difficult to turn our library into a &lt;code&gt;nupkg&lt;/code&gt; (pronounced &lt;a href=&#34;https://twitter.com/csharpfritz/status/519927456191758336&#34;&gt;NUP-KEG&lt;/a&gt;, of course).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet pack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This leaves us with a directory structure like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mynewpackage  
|-- Library.cs
|-- project.json
|-- project.lock.json
+-- bin
     +-- Debug
          |-- mynewpackage.1.0.0.nupkg
          |-- mynewpackage.1.0.0.symbols.nupkg
          +-- netstandard1.6
               |-- mynewpackage.deps.json
               |-- mynewpackage.dll
               +-- mynewpackage.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that I have left out the &lt;code&gt;obj&lt;/code&gt; folder), we can see two new files have been created under &lt;code&gt;/bin/Debug&lt;/code&gt;: &lt;code&gt;mynewpackage.1.0.0.nupkg&lt;/code&gt; and &lt;code&gt;mynewpackage.1.0.0.symbols.nupkg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are the NuGet packages. Pretty easy huh?  The version number comes from the &lt;code&gt;project.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0-*&amp;quot;,
  &amp;quot;buildOptions&amp;quot;: {
    &amp;quot;debugType&amp;quot;: &amp;quot;portable&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {},
  &amp;quot;frameworks&amp;quot;: {
    &amp;quot;netstandard1.6&amp;quot;: {
      &amp;quot;dependencies&amp;quot;: {
        &amp;quot;NETStandard.Library&amp;quot;: &amp;quot;1.6.0&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that was a &lt;code&gt;Debug&lt;/code&gt; build. To produce a release build instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet pack -c Release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have some new files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mynewpackage  
|-- Library.cs
|-- project.json
|-- project.lock.json
+-- bin
     +-- Debug
     |    |-- mynewpackage.1.0.0.nupkg
     |    |-- mynewpackage.1.0.0.symbols.nupkg
     |    +-- netstandard1.6
     |         |-- mynewpackage.deps.json
     |         |-- mynewpackage.dll
     |         +-- mynewpackage.pdb
     +-- Release
          |   mynewpackage.2.0.0.nupkg
          |   mynewpackage.2.0.0.symbols.nupkg
          +-- netstandard1.6
               |-- mynewpackage.deps.json
               |-- mynewpackage.dll
               |-- mynewpackage.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that we now have a &lt;code&gt;Release&lt;/code&gt; folder (containing a &lt;code&gt;netstandard1.6&lt;/code&gt; folder, thanks to an automatic build before the pack) and in the &lt;code&gt;Release&lt;/code&gt; folder, we again have &lt;code&gt;mynewpackage.1.0.0.nupkg&lt;/code&gt; and &lt;code&gt;mynewpackage.1.0.0.symbols.nupkg&lt;/code&gt; files.&lt;/p&gt;
&lt;h3 id=&#34;crack-open-a-nupkg&#34;&gt;Crack open a nupkg&lt;/h3&gt;
&lt;p&gt;What do these &lt;code&gt;nupkg&lt;/code&gt; files look like on the inside? Using a tool like &lt;a href=&#34;https://github.com/NuGetPackageExplorer/NuGetPackageExplorer&#34;&gt;NuGet Package Explorer&lt;/a&gt; we can take a look. The Release version looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mynewpackage.1.0.0.nupkg
|-- mynewpackage.nuspec
+-- lib
     +-- netstandard1.6
          +-- mynewpackage.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some things to observe. We only have a lib file for &lt;code&gt;netstandard1.6&lt;/code&gt; target profile. This means that our NuGet package only works with new .Net Core applications targeting NetStandard1.6 (and the upcoming 4.6.3).&lt;/p&gt;
&lt;p&gt;Changing our attention to the contents of the &lt;code&gt;nuspec&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package xmlns=&amp;quot;http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd&amp;quot;&amp;gt;
    &amp;lt;metadata&amp;gt;
        &amp;lt;id&amp;gt;mynewpackage&amp;lt;/id&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
        &amp;lt;authors&amp;gt;mynewpackage&amp;lt;/authors&amp;gt;
        &amp;lt;owners&amp;gt;mynewpackage&amp;lt;/owners&amp;gt;
        &amp;lt;requireLicenseAcceptance&amp;gt;false&amp;lt;/requireLicenseAcceptance&amp;gt;
        &amp;lt;description&amp;gt;mynewpackage&amp;lt;/description&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;group targetFramework=&amp;quot;.NETStandard1.6&amp;quot;&amp;gt;
                &amp;lt;dependency id=&amp;quot;NETStandard.Library&amp;quot; version=&amp;quot;1.6.0&amp;quot; /&amp;gt;
            &amp;lt;/group&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/metadata&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We didn&amp;rsquo;t override any properties in our &lt;code&gt;project.json&lt;/code&gt; file. But we can see here that the project folder name &lt;code&gt;mynewpackage&lt;/code&gt; is used to populate the package &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;authors&lt;/code&gt;, &lt;code&gt;owners&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;. Play around for yourself at setting the correct properties in the &lt;code&gt;project.json&lt;/code&gt; to produce your desired &lt;code&gt;nupkg&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;We also see that under dependencies there is a &lt;code&gt;targetFramework=&amp;quot;.NETStandard1.6&amp;quot;&lt;/code&gt; group, with a dependency on &lt;code&gt;NETStandard.Library&lt;/code&gt; version &lt;code&gt;1.6.0&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;and-the-next-time&#34;&gt;And the next time&amp;hellip;&lt;/h3&gt;
&lt;p&gt;We can build packages to be used by new .Net Core applications. But we probably want to build libraries that can be used from our .Net 4.0, Windows Phone and UWP applications as well.  Next up, we see how to extend our package to handle just these situations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SOLID-ifying your Nuget Packaging</title>
      <link>https://blogmigration.csmac.nz/post/solid-ifying-your-nuget-packaging/</link>
      <pubDate>Mon, 27 Apr 2015 07:54:17 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/solid-ifying-your-nuget-packaging/</guid>
      <description>&lt;p&gt;The other day we were talking about problems we (as a room of developers) had been having with NuGet, inter-package dependencies, and were quick to relate them back to &lt;strong&gt;DLL Hell&lt;/strong&gt;. But I had this slight epiphany from another comment, where it was observed that our &lt;strong&gt;X.Common package&lt;/strong&gt; had &lt;em&gt;&amp;lsquo;helper code&amp;rsquo;&lt;/em&gt; for database access, base class helpers, mathematical calculations, and domain logic common functions. Not to mention the dependencies it pulls in to allow some of this code to work (libraries, adapters, ORMs, frameworks etc).&lt;/p&gt;
&lt;p&gt;The second part of this problem, was that other packages pulled in this large common package for one small part, and ended up with all of it&amp;rsquo;s dependencies as well. The applications, once put together had packages that it had no necessity for, and dependency trees that where deep, intertwined, and prone to break when versions of common third-party libraries had breaking changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;We should be building our packages with a single responsibility, or split them up until they do&amp;rdquo;&lt;/em&gt; was my statement. At hearing this back out of my own mouth, my brain instantly started thinking about the &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;&lt;strong&gt;SOLID Principles&lt;/strong&gt;&lt;/a&gt; and the concept of &lt;a href=&#34;http://en.wikipedia.org/wiki/Composition_over_inheritance&#34;&gt;&lt;strong&gt;Composition  over Inheritance&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My mind was racing ahead of itself thinking through how applicable these OO concepts were to assembly and package architecture. And It looks like these principles apply at whatever scale you are looking at, where you have units of functionality, and composability.&lt;/p&gt;
&lt;p&gt;So here are my thoughts put into writing. Agree? Disagree? Have a read and please leave your thoughts in the comments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single responsibility&lt;/li&gt;
&lt;li&gt;Open-closed&lt;/li&gt;
&lt;li&gt;Liskov substitution&lt;/li&gt;
&lt;li&gt;Interface segregation&lt;/li&gt;
&lt;li&gt;Dependency inversion&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BONUS ROUND&lt;/strong&gt; - Composition over Inheritance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;single-responsibility&#34;&gt;Single responsibility&lt;/h3&gt;
&lt;p&gt;Each NuGet package should have one, and only one reason to change.  It should do one thing, and one thing well. Just like having a class called &lt;code&gt;&#39;Manager&#39;&lt;/code&gt; is a code smell, a package called &lt;code&gt;&#39;Common&#39;&lt;/code&gt; is also a smell. Maybe you have a &lt;code&gt;Core.Math&lt;/code&gt;, a &lt;code&gt;Core.Formatting&lt;/code&gt; and a &lt;code&gt;Core.NHibernateExtensions&lt;/code&gt; package that can be pulled out of your &lt;code&gt;&#39;Common&#39;&lt;/code&gt; and be much clearer what they are for, and which one you would add new code to when the need arises.&lt;/p&gt;
&lt;h3 id=&#34;open-closed&#34;&gt;Open-closed&lt;/h3&gt;
&lt;p&gt;I struggle a little with how this directly applies, but I can see one example that kind of makes sense.  If you have a requirement for your package component to log out information, you might think about including NLog so that you have defined that functionality. But now you are closed to extension, someone can&amp;rsquo;t come in and use entlib logging, or you would have to open it up and modify it to now support both of these, as required. But this doesn&amp;rsquo;t scale to a third, or fourth logging platform.&lt;/p&gt;
&lt;p&gt;Instead, have the Logging capabilities defined as a pluggable part of your package. Even supply a NO-OP implementation (or &lt;a href=&#34;http://en.wikipedia.org/wiki/Null_Object_pattern&#34;&gt;Null Object&lt;/a&gt;) so that this is now an opt-in function. You can then leave your component closed for modification, and open to extension by you, or anyone else building an adapter package, a &lt;code&gt;&#39;Feature.Logging.NLog&#39;&lt;/code&gt; and &lt;code&gt;&#39;Feature.Logging.EntLibLogging&#39;&lt;/code&gt; series of other small single-purpose adapter packages that their application can pull in when it wants to use your library with their particular logging framework. This doesn&amp;rsquo;t even need to be a package, since they could implement their adaptation directly in their application code if they want to.&lt;/p&gt;
&lt;p&gt;Extend this out from logging, to all the other cross-cutting concerns a large scale application might want your component to have the ability to instrument in, and there are many opportunities for this principle to be applied.&lt;/p&gt;
&lt;h3 id=&#34;liskov-substitution&#34;&gt;Liskov substitution&lt;/h3&gt;
&lt;p&gt;This is another hard one, but maybe we should look at this in terms of semantic versioning?  &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; defines the major version number as breaking changes, the minor as new features that are backwards compatible, and patch as backwards compatible bug fixes. So we say base class is a Major release (2.0.0), and it&amp;rsquo;s subclass(derived class) is the next Minor (2.1.0) or Patch (2.0.1) release.  Does this mean that this holds true?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;NuGet Dependencies&lt;/strong&gt; in a program should be replaceable with instances of &lt;strong&gt;new Minor or Patch versions of those packages&lt;/strong&gt; without altering the correctness of that program&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and extending from this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;NuGet Dependencies&lt;/strong&gt; in a &lt;em&gt;&lt;strong&gt;NuGet Package&lt;/strong&gt;&lt;/em&gt; should be replaceable with instances of &lt;strong&gt;new Minor or Patch versions of those packages&lt;/strong&gt; without altering the correctness of that &lt;em&gt;&lt;strong&gt;Package&lt;/strong&gt;&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is a fair substitution right? Exactly what Semantic Versioning has been defined to allow.  If some third party library has updated, my app should be able to consume a newer minor or patch version, without needing to modify the original application (even compilation of sed program).  And updating a third party library in the application, should not affect any of it&amp;rsquo;s other NuGet packages, even ones which were compiled with the compatible Major version that we updated.&lt;/p&gt;
&lt;h3 id=&#34;interface-segregation&#34;&gt;Interface segregation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“many client-specific interfaces are better than one general-purpose interface.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, should we say lets have lots of smaller packages, because that&amp;rsquo;s going to be better than one giant common package?  Maybe we want to take that even further? We may have a framework NuGet Package that solves 5 different problems. But we may want to only use one of these 5. If we create 5 interface projects, and depend on only the one we want, either someone else could implement a faster, or more efficient version of this one interface, and we can swap between them. If that new faster thing also had to implement all the other parts, we couldn&amp;rsquo;t do this.&lt;/p&gt;
&lt;p&gt;Yeah, this just sounds like the original pattern, but explicitly separating the interface of a packages functionality, from the implementation packages does sound valuable, and this even allows version independence that is much stronger to detect changes for. (This is sounding more like Liskov again, hmmm&amp;hellip;)&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the problem with trying to define precise examples with solid I think, I feel like Interface segregation is less of a concern when you are already following Single responsibility and Liskov substitution.&lt;/p&gt;
&lt;h3 id=&#34;dependency-inversion&#34;&gt;Dependency inversion&lt;/h3&gt;
&lt;p&gt;Ok, this one sounds the most obvious one right? In fact, I kind of covered this in my Open-Closed example. And kind of almost touched on it with Interface segregation as well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;one should “Depend upon Abstractions. Do not depend upon concretions.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;composition-over-inheritance&#34;&gt;Composition over Inheritance&lt;/h3&gt;
&lt;p&gt;We all get told we should compose our objects from other components, instead of deriving and deriving from base classes for behaviour inheritance. Packages are the same. Lets take dependencies on 50 &lt;strong&gt;small packages&lt;/strong&gt; and compose these into our application, and tie them together as required. These small packages are small because they follow all the above patterns, and their dependency tree is flat. at most they take only one or two (non-framework) packages as dependencies, which have no dependencies of their own. Definitely nothing too much more deeply nested then this if you can help it.&lt;/p&gt;
&lt;p&gt;This is much better that the alternative, of 100 packages, intertwined like the most spaghetti of code that you might have ever seen, with no way in sight of decoupling and de-tangling the mess.  The benefits of a flat structure and allowing the application to compose, is that you can get the maximum of reuse from any of these projects, they are truly independent components, and you can make the decision at the app level, if done well, about which logging framework your use, which ORM, or data access you choose, which database you use, how you host your code, and even what front-end technology you want to use, without any of these concerns having to be consistent across all your packages. These concerns are just more packages and tie-in code that you compose in.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;So where does that put us? Well here are some general rules and observations I would try to follow, if the packages are only just starting to take shape, or you are looking at tidying up your packaging scenarios.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a flat dependency structure, like you would a class hierarchy.&lt;/li&gt;
&lt;li&gt;Keep your packages small and single purpose.&lt;/li&gt;
&lt;li&gt;Use Semantic versioning properly, to help anyone who consumes your package.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t take dependencies on anything large, or that you don&amp;rsquo;t need to from inside a package.&lt;/li&gt;
&lt;li&gt;provide extension hooks from inside your package so that others can extend the functionality or swap out implementations of common concerns like data access and logging.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t force a hard dependency on your functionality, if an interface package would do, especially for version compatibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Did I get it wrong? Do you Agree? Anything I missed? Leave a comment and let me know.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>