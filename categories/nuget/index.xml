<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NuGet on csMacnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/nuget/</link>
    <description>Recent content in NuGet on csMacnz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Mon, 08 Oct 2018 05:00:00 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/nuget/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speciality NuGet Packing on .Net Core</title>
      <link>https://csmacnzblog.github.io/post/speciality-nuget-packing/</link>
      <pubDate>Mon, 08 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/speciality-nuget-packing/</guid>
      <description>I recently wrote about NuGet packing on linuxspecifically, and want to continue the theme with other things you can do with NuGet packaging.
As a quick recap you can use a .Net Core *.csproj as a wrapper around a *.nuspec file and use dotnet pack to pack it, cross-platform, without needing nuget.exe.
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;NuspecFile&amp;gt;mynewapp.nuspec&amp;lt;/NuspecFile&amp;gt; &amp;lt;GeneratePackageOnBuild&amp;gt;true&amp;lt;/GeneratePackageOnBuild&amp;gt; &amp;lt;SkipCompilerExecution&amp;gt;true&amp;lt;/SkipCompilerExecution&amp;gt; &amp;lt;CopyBuildOutputToOutputDirectory&amp;gt;false&amp;lt;/CopyBuildOutputToOutputDirectory&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;/Project&amp;gt; (See the other articlefor more detailed analysis of these properties.</description>
    </item>
    
    <item>
      <title>NuGet Packing on Linux</title>
      <link>https://csmacnzblog.github.io/post/nuget-packing-on-linux/</link>
      <pubDate>Mon, 01 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/nuget-packing-on-linux/</guid>
      <description>For anyone who has been cutting-edge with .Net for a while will know that the nuget.exe runs under mono. And that you can use nuget.exe to package *.nuspec files into *.nupkg files.
Anyone who has been doing dotnet cross-platform will also know that you can use dotnet pack on both Windows and Linux to package your project into a NuGet package containing the dll. It even does references and multi-targeting correctly out of the box.</description>
    </item>
    
    <item>
      <title>.Net Core Series - NuGet</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-nuget/</link>
      <pubDate>Mon, 01 Aug 2016 08:18:33 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-nuget/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet &amp;lt;=(We are here) Multi-targeting Publishing Portable Applications Self-contained Applications  Let&amp;rsquo;s set aside Application packing for later, and focus our attention on NuGet.
Our Demo library Again we will quickly whip up a library to use:</description>
    </item>
    
    <item>
      <title>SOLID-ifying your Nuget Packaging</title>
      <link>https://csmacnzblog.github.io/post/solid-ifying-your-nuget-packaging/</link>
      <pubDate>Mon, 27 Apr 2015 07:54:17 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/solid-ifying-your-nuget-packaging/</guid>
      <description>The other day we were talking about problems we (as a room of developers) had been having with NuGet, inter-package dependencies, and were quick to relate them back to DLL Hell. But I had this slight epiphany from another comment, where it was observed that our X.Common package had &amp;lsquo;helper code&amp;rsquo; for database access, base class helpers, mathematical calculations, and domain logic common functions. Not to mention the dependencies it pulls in to allow some of this code to work (libraries, adapters, ORMs, frameworks etc).</description>
    </item>
    
  </channel>
</rss>
