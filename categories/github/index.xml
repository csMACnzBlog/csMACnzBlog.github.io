<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub on csMACnz&#39;s Blog</title>
    <link>https://blogmigration.csmac.nz/categories/github/</link>
    <description>Recent content in GitHub on csMACnz&#39;s Blog</description>
    <image>
      <url>https://blogmigration.csmac.nz/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://blogmigration.csmac.nz</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 14 Aug 2016 21:51:20 +0000</lastBuildDate><atom:link href="https://blogmigration.csmac.nz/categories/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Projects - Consolable, ConcurrentConsole &amp; t4tinytypes</title>
      <link>https://blogmigration.csmac.nz/post/new-projects-consolable-concurrentconsole-t4tinytypes/</link>
      <pubDate>Sun, 14 Aug 2016 21:51:20 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/new-projects-consolable-concurrentconsole-t4tinytypes/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on some new projects, so thought I would do a quick elevator pitch for each.&lt;/p&gt;
&lt;h3 id=&#34;consolable&#34;&gt;Consolable&lt;/h3&gt;
&lt;p&gt;I was having an issue with environment variables as arguments, and with PowerShell replacing &lt;code&gt;&amp;quot;text&amp;quot;&lt;/code&gt; with &lt;code&gt;text&lt;/code&gt; (stripping double-quotes) and how these interacted with my command line arguments. Especially when the environment variable was empty, the error messages were just not clear enough.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;m building yet another CLI parsing library, but with a primary focus on error messaging. It should work well to provide the developer the arguments from the user, but should also provide the user with better help on where the mistake they have made is.&lt;/p&gt;
&lt;p&gt;Follow my progress &lt;a href=&#34;https://github.com/csMACnz/consolable&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;concurrentconsole&#34;&gt;ConcurrentConsole&lt;/h3&gt;
&lt;p&gt;I was wanting to build a chatbot. So naturally as a test harness I need a console app to test with. But it turns out my bot is asynchronous (I can keep talking, while it keeps thinking and returning new messages to an existing thread).  It turns out that concurrently printing text and allowing text entry is not an Out-Of-The-Box feature.&lt;/p&gt;
&lt;p&gt;Introducing ConcurrentConsole, a wrapper over System.Console to allow multithreaded writes while a thread is still reading from the user. Maintain your existing typed text, and even define your own prompt text (which can also be dynamically updated at runtime).&lt;/p&gt;
&lt;p&gt;Check it out &lt;a href=&#34;https://github.com/csMACnz/ConcurrentConsole&#34;&gt;on GitHub&lt;/a&gt; and &lt;a href=&#34;https://www.nuget.org/packages/csMACnz.ConcurrentConsole/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;t4tinytypes&#34;&gt;t4tinytypes&lt;/h3&gt;
&lt;p&gt;Something I have been meaning to do for a while was to automate my &lt;a href=&#34;http://blog.csmac.nz/semantics-vs-implementation-detail/&#34;&gt;tiny types&lt;/a&gt;. It can get tedious to build and maintain many small wrapper types, and creating the right definition while in the flow of building out your code can be distracting.&lt;/p&gt;
&lt;p&gt;t4tinytypes is a NuGet package of t4 templates that can be used with Visual Studio or the command-line (for dotnet cli) to generate and regenerate tiny types, simply, easily and flexibly (not to mention extensible).  I&amp;rsquo;m still working on testing samples to show all the ways it can be used, but it should be published as an early alpha release soon.&lt;/p&gt;
&lt;h3 id=&#34;while-youre-at-it&#34;&gt;While you&amp;rsquo;re at it&amp;hellip;&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s what&amp;rsquo;s new, feel free to influence me on what the think you would find valuable to have me finish first. But don&amp;rsquo;t forget the other little projects I&amp;rsquo;ve already put out there and would love feedback on, too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/Beefeater&#34;&gt;Beefeater&lt;/a&gt; - &amp;ldquo;Guard your methods&#39; Ins and Outs.&amp;rdquo; - return and optionality semantics helper library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/coveralls.net&#34;&gt;coveralls.net&lt;/a&gt; - a publisher for .Net code coverage to &lt;a href=&#34;https://coveralls.io/&#34;&gt;coveralls.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/BCLExtensions&#34;&gt;BCLExtensions&lt;/a&gt; - extensive extensions and helpers for primative types&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/csMACnz/coveritypublisher&#34;&gt;coveritypublisher&lt;/a&gt; - a publisher for &lt;a href=&#34;https://scan.coverity.com/&#34;&gt;Coverity Scan&lt;/a&gt; static analysis results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feedback appreciated :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fork off with your branches</title>
      <link>https://blogmigration.csmac.nz/post/fork-off-with-your-branches/</link>
      <pubDate>Sun, 05 Jun 2016 21:32:04 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/fork-off-with-your-branches/</guid>
      <description>&lt;p&gt;The nice thing about git is that branches are cheap and you can create many and varied branches for every little fix, format or feature. The annoying thing about GitHub is that every user creates many many many branches.&lt;/p&gt;
&lt;p&gt;One of my pet peeves at the moment is a large number of branches on our upstream repository. That is, the shared common one we all fork from and Pull Request into. When I started there were almost 200 branches! So many branches made it really hard to find out which branch was for what, and even harder to tell if any of the branches were not being used.&lt;/p&gt;
&lt;p&gt;These might seem like small things, but if you have a CI server &lt;em&gt;(I really hope you have a CI server)&lt;/em&gt; you might set up wildcard builds that automatically build every branch that matches a certain pattern, for example, &lt;code&gt;feature/*&lt;/code&gt; or &lt;code&gt;release/*&lt;/code&gt;. Now every one of these branches has a build that runs every time the code changes. You probably want to ensure they are up to date with master, so a script will run on a schedule &lt;em&gt;(or triggered off of a merge)&lt;/em&gt; and auto-merge master down to your branch. &lt;em&gt;(Why is this required? probably because you have so many branches in the first place! Investigate &lt;a href=&#34;https://www.google.co.uk/search?q=rebase&#34;&gt;git rebase&lt;/a&gt;&amp;hellip;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So now, every time the script runs, it triggers updates on every branch, which triggers a build. 200 branches? instant 200 builds in your CI queue. &lt;em&gt;(Who has 200 agents? not me.)&lt;/em&gt; Frustration sets in when you can&amp;rsquo;t get your normal build through because your server is busy, and will stay busy for a while.&lt;/p&gt;
&lt;p&gt;The other obvious overhead to me is a cognitive one. If an individual is tracking more than one branch or work, they have to context switch back and forward between then. I can understand 2 work streams due to external blockers on task one and be filling time with task 2, but having 3 or more branches is juggling too much work.  Taking this further, if you have a bunch of branches because the work is done and ready to release, get it shipped. It&amp;rsquo;s not done until it&amp;rsquo;s in production in front of customers &lt;em&gt;(even if only early adopter or beta users)&lt;/em&gt;.  using branches as a release task list isn&amp;rsquo;t sensible when everyone does it. Your branches get lost in the noise.  You may even forget to release a branch of changes until your manager chases you for something you thought was released!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s apply this to teams. A team can only be focussing on so many priorities (read branches) before they start dropping balls, or wasting a lot of time on communication and overhead on tracking these different tasks &lt;em&gt;(bugs, features etc)&lt;/em&gt;. The less active branches a team has to manage at once, the better. And you get a bit of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bystander_effect&#34;&gt;bystander effect&lt;/a&gt; on your branches.&lt;/p&gt;
&lt;p&gt;Frustrations aside, there are some real benefits from using a &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&#34;&gt;git flow&lt;/a&gt; or &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;GitHub Flow&lt;/a&gt; approach where there is a single trunk of development &lt;em&gt;(either a develop-release-master flow or a master-master-master flow)&lt;/em&gt; where you are subject to a continuous integration model. Things like &lt;a href=&#34;https://en.wikipedia.org/wiki/Feature_toggle&#34;&gt;feature flagging&lt;/a&gt; and dark releases are great ways to handle harder features and code refactors such are renames, formatting and class extraction are much easier when there is only one branch to work in.&lt;/p&gt;
&lt;p&gt;Some rules to work by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep your small change branches in your fork.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t push branches upstream&lt;/li&gt;
&lt;li&gt;collaborative feature branches? Use feature toggles to maintain continuous integrations.&lt;/li&gt;
&lt;li&gt;Refactoring? incrementally, ship often.&lt;/li&gt;
&lt;li&gt;No more big bang changes, please.&lt;/li&gt;
&lt;li&gt;Branches are cheap, but you don&amp;rsquo;t have to share them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another pet peeve is naming things.  If you have to have a branch, name it after your team, your username, or the bug tracking id for the story of work it relates to. cryptic &amp;lsquo;feature&amp;rsquo; or &amp;lsquo;bug&amp;rsquo; description names don&amp;rsquo;t help anyone. The diff says what the change is, so it is self-descriptive &lt;em&gt;(aka &lt;a href=&#34;https://en.wikipedia.org/wiki/Self-documenting_code&#34;&gt;self-documenting&lt;/a&gt;)&lt;/em&gt;, but I don&amp;rsquo;t know who owns it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;/rant&amp;gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TeamCity, GitHub and Pull Requests</title>
      <link>https://blogmigration.csmac.nz/post/teamcity-github-and-pull-requests/</link>
      <pubDate>Mon, 06 Apr 2015 12:29:27 +0000</pubDate>
      
      <guid>https://blogmigration.csmac.nz/post/teamcity-github-and-pull-requests/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been having fun setting up TeamCity builds, specifically trying to run a static analysis build that shows it&amp;rsquo;s results on a pull request. This lead me to discover some issues with the built-in TeamCity support.&lt;/p&gt;
&lt;p&gt;It is really easy to set up a build task that runs PowerShell as its build step. With this I can arbitrarily run code and get static analysis checking. It is even easy to push the results back to GitHub using the api (see the &lt;a href=&#34;https://developer.github.com/v3/repos/statuses/&#34;&gt;Statuses api on GitHub&lt;/a&gt; for just how easy). Again it is easy to trigger a build off of the &amp;lsquo;special&amp;rsquo; pull request branch github uses. A guide to getting all of these links working is &lt;a href=&#34;http://blog.jetbrains.com/teamcity/2013/02/automatically-building-pull-requests-from-github-with-teamcity/&#34;&gt;available on the teamcity blog&lt;/a&gt;. But triggering the git source control checking on TeamCity turned out the be the hard bit.&lt;/p&gt;
&lt;p&gt;There are Webhooks in GitHub. There are also Service Hooks. There is a &lt;a href=&#34;https://github.com/github/github-services/blob/master/lib/services/teamcity.rb&#34;&gt;TeamCity Service Hook&lt;/a&gt;. Unfortunately there are issues with both that requires some third set of code to actually make it work. Here is why.&lt;/p&gt;
&lt;p&gt;You would think that the existing team city hook would be exactly what you need. In the settings of your repository, you can configure this, with credentials, to either start a build, or just check for changes on the associated VCS Root. This check may actually trigger a build, depending on how your build triggers are set up.  The problem is that only the &lt;strong&gt;&amp;ldquo;push&amp;rdquo;&lt;/strong&gt; event will trigger this service hook to fire off.  Why is this an issue for Pull Requests? Because creating a Pull Request creates the &lt;strong&gt;&amp;ldquo;pull request&amp;rdquo;&lt;/strong&gt; event. This means that creating a pull request does not trigger a git check for changes, and so doesn&amp;rsquo;t trigger the Pull Request to run the build, which won&amp;rsquo;t publish the results back to the Pull Request.&lt;/p&gt;
&lt;p&gt;Ok, lets try the custom Web Hooks. Still a no-go. GitHub Web Hooks are ultra flexible. There is &lt;a href=&#34;https://developer.github.com/enterprise/2.1/webhooks/&#34;&gt;great documentation&lt;/a&gt; on setting up a Webhook. It event supports Secrets for signing, specifying specific events, and which format you want it to give you the information in.  But its a &lt;strong&gt;PUSH&lt;/strong&gt;.  This means you need a particular endpoint that receives that push, and processes it&amp;rsquo;s payload. There is nothing on TeamCity that matches that description.  You will have to write something to catch that response and trigger the behaviour you want to see happen.&lt;/p&gt;
&lt;p&gt;Now don&amp;rsquo;t get me wrong, this is exactly what you would expect. You need to determine what the business logic to respond to the event should be. But it means to solve my Pull Request problem, I now need to actually build and host this thing to make it all work.&lt;/p&gt;
&lt;p&gt;So for anyone else wondering why the existing tutorials don&amp;rsquo;t trigger your PR builds automatically, now you know why.  Enjoy building a middleman to make TeamCity do what you want as a result of what GitHub sends you :)  I suggest you read &lt;a href=&#34;https://github.com/github/github-services/blob/master/lib/services/teamcity.rb&#34;&gt;the implementation of the existing service&lt;/a&gt; for some ideas of what your middleman might look like.  This was highlighted for us even more glaringly, since we only trigger a forced fetch on TeamCity every 24 hours, so it would only run my build on a PR if I manually triggered it (or someone else happened to accept a merge or push something directly to GitHub). I&amp;rsquo;m sure this was also made worse by us always doing our Pull Requests between forks and trunk, so only on merging a PR would it trigger an update on TeamCity. And then there are the multiple VCS Roots, that updating one doesn&amp;rsquo;t actually trigger all the related builds. Meh.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>