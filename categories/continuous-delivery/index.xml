<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Delivery on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/continuous-delivery/</link>
    <description>Recent content in Continuous Delivery on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 22 Nov 2015 15:05:14 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/continuous-delivery/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On gitversioning subdirectories</title>
      <link>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</link>
      <pubDate>Sun, 22 Nov 2015 15:05:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</guid>
      <description>&lt;p&gt;We have lots of NuGet. Every time we build, we publish a new version. but every build does not change the source code of the code in that version. wouldn&amp;rsquo;t it be nice if we could detect that the subdirectory hasn&amp;rsquo;t changed and so has the same version it did last time we built it?&lt;/p&gt;
&lt;p&gt;We use &lt;a href=&#34;https://github.com/GitTools/GitVersion&#34;&gt;gitversion&lt;/a&gt;, so we already have a way to get the version for the current commit.  Maybe we can use that to get the version for a subdirectories latest commit?  Sure we can!&lt;/p&gt;
&lt;p&gt;To get the version for the latest commit, we need the latest commit.  Turns out you can use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$pathToFolder = &amp;quot;C:\dev\MyProject\MySubfolder&amp;quot;
$commitHash = git log -n 1 --format=&amp;quot;%H&amp;quot; -- $pathToFolder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we run a &lt;code&gt;git log&lt;/code&gt; command to get the full commit hash, which we can save into a variable &lt;code&gt;$commitHash&lt;/code&gt;.  Now we have something to give to &lt;code&gt;gitversion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a command in &lt;code&gt;gitversion&lt;/code&gt;, &lt;code&gt;\c&lt;/code&gt;, which takes a commit hash and runs for that instead of for the current commit. All we need to do is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$folderVersion = gitversion /c $commitHash | ConvertFrom-Json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and new we have an object in &lt;code&gt;$folderVersion&lt;/code&gt; that we can inspect and get out all the version information, from &lt;code&gt;$folderVersion.SemVer&lt;/code&gt;, &lt;code&gt;$folderVersion.NuGetVersionV2&lt;/code&gt;, and even &lt;code&gt;$folderVersion.FullBuildMetaData&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;What you do from here to integrate with the rest of your build scripts is up to you. One I have used is to go through that folder and replace version information, such as in *.nuspec files. Note here my *.nuspec file has a placeholder $version$ as the version number already in place.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$NewVersion = &amp;quot;&amp;quot; ## Version from some source, like gitversion
$Sha = &amp;quot;&amp;quot; ## You can include the sha the version is from into the nuspec file
$FileFullPath = &amp;quot;&amp;quot; ## filepath from some sort of search for *.nuspec files
$TmpFile = $FileFullPath + &amp;quot;.tmp&amp;quot;

[ xml ] $fileContents = Get-Content -Path $o.FullName

if ($fileContents.package.metadata.version -eq $null) {
  $child = $fileContents.CreateElement(&amp;quot;version&amp;quot;, $fileContents.DocumentElement.NamespaceURI)
  $fileContents.package.metadata.AppendChild($child)
  $fileContents.package.metadata.version = &amp;quot;$version$&amp;quot;
}
  
$NewDescription = $fileContents.package.metadata.description + &#39; (&#39; + $Sha + &#39;)&#39;;
$fileContents.package.metadata.description = $NewDescription

if($Version) {
  $fileContents.package.metadata.version = $NewVersion
}

$fileContents.Save($TmpFile)    
     
move-item $TmpFile $FileFullPath -force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful use-case is to execute GitVersion with &lt;code&gt;/updateassemblyinfo .\Properties\AssemblyInfo.cs&lt;/code&gt; as an argument, to target and update a specific project&amp;rsquo;s assembly info version as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resharper on AppVeyor</title>
      <link>https://csmacnzblog.github.io/post/resharper-on-appveyor/</link>
      <pubDate>Sat, 15 Aug 2015 17:16:08 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/resharper-on-appveyor/</guid>
      <description>&lt;p&gt;JetBrains have some great tools. One I am particularly fond of is &lt;a href=&#34;https://www.jetbrains.com/resharper/&#34;&gt;Resharper&lt;/a&gt;. Resharper is a Code Analysis, Refactoring, formatting and all round productivity boosting tool. It falls into the same camp as &lt;a href=&#34;https://www.devexpress.com/products/coderush/&#34;&gt;CodeRush&lt;/a&gt; and &lt;a href=&#34;http://www.telerik.com/products/justcode.aspx&#34;&gt;JustCode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are using &lt;a href=&#34;https://www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt;, which is the Continuous Integration server from JetBrains, then you will find build tasks available to run ReSharper&amp;rsquo;s duplicate finder and inspection tools across your solution. This is really helpful, and can even do things like high-water marks on error counts, and failing builds on errors.&lt;/p&gt;
&lt;p&gt;But my open source projects don&amp;rsquo;t run on TeamCity, they run on AppVeyor. I get all the benefit out of my ReSharper License on my PC with Visual Studio, but the build server sees none of that. Enter the &lt;a href=&#34;https://www.jetbrains.com/resharper/features/command-line.html&#34;&gt;Resharper Command Line Tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I mentioned the command line tools &lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/#resharpercli&#34;&gt;during my open source CI tools series&lt;/a&gt; and so thought I would outline how it can be used, and how I&amp;rsquo;ve come to use it with &lt;a href=&#34;http://appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt;, my CI server of choice.&lt;/p&gt;
&lt;p&gt;Gotchas&lt;/p&gt;
&lt;p&gt;I get this fascinating error intermitently : &lt;a href=&#34;https://youtrack.jetbrains.com/issue/RSRP-429298&#34;&gt;issue RSRP-429298&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TeamCity, GitHub and Pull Requests</title>
      <link>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</link>
      <pubDate>Mon, 06 Apr 2015 12:29:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been having fun setting up TeamCity builds, specifically trying to run a static analysis build that shows it&amp;rsquo;s results on a pull request. This lead me to discover some issues with the built-in TeamCity support.&lt;/p&gt;
&lt;p&gt;It is really easy to set up a build task that runs PowerShell as its build step. With this I can arbitrarily run code and get static analysis checking. It is even easy to push the results back to GitHub using the api (see the &lt;a href=&#34;https://developer.github.com/v3/repos/statuses/&#34;&gt;Statuses api on GitHub&lt;/a&gt; for just how easy). Again it is easy to trigger a build off of the &amp;lsquo;special&amp;rsquo; pull request branch github uses. A guide to getting all of these links working is &lt;a href=&#34;http://blog.jetbrains.com/teamcity/2013/02/automatically-building-pull-requests-from-github-with-teamcity/&#34;&gt;available on the teamcity blog&lt;/a&gt;. But triggering the git source control checking on TeamCity turned out the be the hard bit.&lt;/p&gt;
&lt;p&gt;There are Webhooks in GitHub. There are also Service Hooks. There is a &lt;a href=&#34;https://github.com/github/github-services/blob/master/lib/services/teamcity.rb&#34;&gt;TeamCity Service Hook&lt;/a&gt;. Unfortunately there are issues with both that requires some third set of code to actually make it work. Here is why.&lt;/p&gt;
&lt;p&gt;You would think that the existing team city hook would be exactly what you need. In the settings of your repository, you can configure this, with credentials, to either start a build, or just check for changes on the associated VCS Root. This check may actually trigger a build, depending on how your build triggers are set up.  The problem is that only the &lt;strong&gt;&amp;ldquo;push&amp;rdquo;&lt;/strong&gt; event will trigger this service hook to fire off.  Why is this an issue for Pull Requests? Because creating a Pull Request creates the &lt;strong&gt;&amp;ldquo;pull request&amp;rdquo;&lt;/strong&gt; event. This means that creating a pull request does not trigger a git check for changes, and so doesn&amp;rsquo;t trigger the Pull Request to run the build, which won&amp;rsquo;t publish the results back to the Pull Request.&lt;/p&gt;
&lt;p&gt;Ok, lets try the custom Web Hooks. Still a no-go. GitHub Web Hooks are ultra flexible. There is &lt;a href=&#34;https://developer.github.com/enterprise/2.1/webhooks/&#34;&gt;great documentation&lt;/a&gt; on setting up a Webhook. It event supports Secrets for signing, specifying specific events, and which format you want it to give you the information in.  But its a &lt;strong&gt;PUSH&lt;/strong&gt;.  This means you need a particular endpoint that receives that push, and processes it&amp;rsquo;s payload. There is nothing on TeamCity that matches that description.  You will have to write something to catch that response and trigger the behaviour you want to see happen.&lt;/p&gt;
&lt;p&gt;Now don&amp;rsquo;t get me wrong, this is exactly what you would expect. You need to determine what the business logic to respond to the event should be. But it means to solve my Pull Request problem, I now need to actually build and host this thing to make it all work.&lt;/p&gt;
&lt;p&gt;So for anyone else wondering why the existing tutorials don&amp;rsquo;t trigger your PR builds automatically, now you know why.  Enjoy building a middleman to make TeamCity do what you want as a result of what GitHub sends you :)  I suggest you read &lt;a href=&#34;https://github.com/github/github-services/blob/master/lib/services/teamcity.rb&#34;&gt;the implementation of the existing service&lt;/a&gt; for some ideas of what your middleman might look like.  This was highlighted for us even more glaringly, since we only trigger a forced fetch on TeamCity every 24 hours, so it would only run my build on a PR if I manually triggered it (or someone else happened to accept a merge or push something directly to GitHub). I&amp;rsquo;m sure this was also made worse by us always doing our Pull Requests between forks and trunk, so only on merging a PR would it trigger an update on TeamCity. And then there are the multiple VCS Roots, that updating one doesn&amp;rsquo;t actually trigger all the related builds. Meh.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 7. Lifecycle Management</title>
      <link>https://csmacnzblog.github.io/post/net-os-7-lifecycle-management/</link>
      <pubDate>Tue, 03 Mar 2015 19:42:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-7-lifecycle-management/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-3-test/&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-4-publish-deploy/&#34;&gt;Publish &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-5-documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lifecycle Management &amp;lt;=(We are here)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lifecycle-management&#34;&gt;Lifecycle Management&lt;/h2&gt;
&lt;p&gt;If all your development is done with GitHub, then here are some ALM tools that integration well to surface different views into your lifecycle. But don&amp;rsquo;t think you are limited to GitHub, as some of this will integrate with most source control systems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Waffle&lt;/li&gt;
&lt;li&gt;Trello&lt;/li&gt;
&lt;li&gt;Issue Stats&lt;/li&gt;
&lt;li&gt;Sourcegraph&lt;/li&gt;
&lt;li&gt;Open HUB&lt;/li&gt;
&lt;li&gt;Bountysource&lt;/li&gt;
&lt;li&gt;Gratipay&lt;/li&gt;
&lt;li&gt;Tip4Commit&lt;/li&gt;
&lt;li&gt;Dash&lt;/li&gt;
&lt;li&gt;Shields.io&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;waffle&#34;&gt;Waffle&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://waffle.io/&#34;&gt;Waffle&lt;/a&gt; is an issue tracking board. But not as a stand along system, no no. They use your issues on GitHub as their database, surfacing the information based on conventions.  They also use webhooks to automatically create, update and close your issues based on pull requests and labels. Each of your issues is a card, and interacting with Waffle you can move your cards around, edit the details and add labels and comments to track them easier.  A nice feature is you can point Waffle at anyone&amp;rsquo;s repository, even if they don&amp;rsquo;t use it, to see their issues displayed as cards. Very cool. I have been &lt;a href=&#34;https://waffle.io/csmacnz/coveralls.net&#34;&gt;using it with Coveralls.net&lt;/a&gt;, and you can also &lt;a href=&#34;https://waffle.io/dotnet/roslyn&#34;&gt;see it working with the Roslyn repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;trello&#34;&gt;Trello&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; is a Kanban style card board, which is feature rich, and free to use. Collaborate with others in a private board. This is a modern web application, and works well in what it does. Cards support drag and drop and it keeps track of the history as changes are made. You can make your board public or keep it private. The only issue with using this for your public open source repository is the duplication between here, and issues in GitHub. For private projects, this could be a great Kanban tracking solution (though I suggest for that purpose you also check out &lt;a href=&#34;http://kanbanflow.com/&#34;&gt;KanbanFlow&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;issue-stats&#34;&gt;Issue Stats&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.issuestats.com/&#34;&gt;Issue Stats&lt;/a&gt; is kind of meta. Its designed to analyse and compare your issues and pull requests in GitHub, and tell you hoy long it takes to close them. It also provides a simple graph of the distribution of time to close, as well as &lt;a href=&#34;http://www.issuestats.com/analysis&#34;&gt;graphs and status&lt;/a&gt; across all the repositories to see interesting stats comparing languages. Simple but effective. Again check out how the &lt;a href=&#34;http://www.issuestats.com/github/dotnet/roslyn&#34;&gt;Roslyn Repository&lt;/a&gt; looks via Issue Stats.&lt;/p&gt;
&lt;h3 id=&#34;sourcegraph&#34;&gt;Sourcegraph&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcegraph.com/&#34;&gt;Sourcegraph&lt;/a&gt; is another service that integrates with GitHub repositories. It provides a code search engine on top of your repository. The unique twist is it can then search all the other repositories it knows about to find usages of your methods, giving you real code examples of how it is used. A really cool premise. Sourcegraph supports Java (Maven), Python, JavaScript (Node.js), Go, and Ruby, but I will continue to hassle them about their lack of C# support.&lt;/p&gt;
&lt;h3 id=&#34;open-hub&#34;&gt;Open HUB&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openhub.net/&#34;&gt;Open HUB&lt;/a&gt; is another project comparison system. It allows you to claim your contributions to open source projects, as well as showing statistics on the projects that it has in its system. I have my &lt;a href=&#34;https://www.openhub.net/p/coverallsdotnet&#34;&gt;Coveralls.Net&lt;/a&gt; and &lt;a href=&#34;https://www.openhub.net/p/BCLExtensions-dotnet&#34;&gt;BCLExtensions&lt;/a&gt; libraries on here.&lt;/p&gt;
&lt;h3 id=&#34;bountysource&#34;&gt;Bountysource&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bountysource.com/&#34;&gt;Bountysource&lt;/a&gt; puts developers and funding together. Roughly speaking, someone puts up a bounty on an issue or feature and whoever fulfils it gets the bounty. If you have an issue on an open source project that isn&amp;rsquo;t being fixed, you can put up some money to encourage it to be fixed faster. An interesting concept, and looks like it works for some projects, but not for others.&lt;/p&gt;
&lt;h3 id=&#34;gratipay&#34;&gt;Gratipay&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://gratipay.com&#34;&gt;Gratipay&lt;/a&gt; is a pure and simple donation system. You have an account, and you can add and withdraw money. Then you can pledge an amount per week to an individual or team, and others can do the same back. You may end up with a net profit, or net spend, as you see fit.&lt;/p&gt;
&lt;h3 id=&#34;tip4commit&#34;&gt;Tip4Commit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tip4commit.com/&#34;&gt;Tip4Commit&lt;/a&gt; is another donation service for open source projects. This one works in Bitcoins.&lt;/p&gt;
&lt;h3 id=&#34;dash&#34;&gt;Dash&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.thedash.com/&#34;&gt;Dash&lt;/a&gt; gives you Dashboard As A Service. Add all the widgets to track the metrics that matter to you in a dashboard you can look at to track your progress.  There is a nice &lt;a href=&#34;https://www.thedash.com/dashboard/eevIT7ceUO&#34;&gt;Example Fitness Dashboard&lt;/a&gt; that shows you what can be done. The only gripe I have with this is the lack of development platforms that work out of the box.  You can create custom results, but they require you to host and run your own proxy to transform the data into a format it can display. Otherwise a nice dashboard service.&lt;/p&gt;
&lt;h3 id=&#34;shieldsio&#34;&gt;Shields.io&lt;/h3&gt;
&lt;p&gt;Most projects online, especially the ones above, provide badges for you to display on your projects to show off their service, give you visibility on your coverage number, your build success or failure status, and other useful information &lt;a href=&#34;http://shields.io/&#34;&gt;Shields.io&lt;/a&gt; is not so much a tool, as it is Badges As A Service (BAAS? I should stop making these up I think). Using their service, you can unify all your badges to look nice together, and even theme them with a few options like flat, rounded and such.  More and more services are being exposed through Shields.io every time I go back, and you can even DIY with special urls that take the display text, style and colour as query parameters like this: &lt;img src=&#34;https://img.shields.io/badge/FOSS-7/7-FF00FF.svg&#34; alt=&#34;A Sample Custom Badge &#34;&gt;&lt;/p&gt;
&lt;p&gt;For a good list of a whole bunch of places to get free for open source things, check out &lt;a href=&#34;http://ossperks.com/&#34;&gt;OSS Perks&lt;/a&gt;. And that&amp;rsquo;s all she wrote. This is the last post in the series, that was designed to be a companion to my &lt;a href=&#34;http://www.meetup.com/WelliDotNet/events/219398813&#34;&gt;.Net User Group Talk&lt;/a&gt;. The slides from my talk are &lt;a href=&#34;http://prezi.com/y1v19jvfgel1&#34;&gt;available on prezi&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 6. Metrics</title>
      <link>https://csmacnzblog.github.io/post/net-os-6-metrics/</link>
      <pubDate>Sun, 01 Mar 2015 18:37:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-6-metrics/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-3-test/&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-4-publish-deploy/&#34;&gt;Publish &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-5-documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metrics &amp;lt;=(We are here)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-7-lifecycle-management/&#34;&gt;Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;p&gt;Cyclomatic Complexity, Coverage and Static Analysis are all processes you should regularly expose your code base to, even as far as every build, if not at least nightly.  Here are a few services that offer to give you this insight into your code base.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coveralls&lt;/li&gt;
&lt;li&gt;Coverity Scan&lt;/li&gt;
&lt;li&gt;Resharper CLI&lt;/li&gt;
&lt;li&gt;Nemo (SonarQube)&lt;/li&gt;
&lt;li&gt;Nitriq&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;coveralls&#34;&gt;Coveralls&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://coveralls.io/&#34;&gt;Coveralls&lt;/a&gt; gives you a place to publish your Continuous Coverage results.  On each build, for each branch, you can push your coverage results up to Coveralls, and see coverage for each source file, as well as changes in coverage over time in each branch of development. They integrate with various source control to pull in the original source files, including GitHub, which is free to use for public GitHub repositories. They have even released an enterprise version. Coveralls has an open API, so there are many languages that are supported. I took that as a challange, so now they have .Net support as well.  Check out my &lt;a href=&#34;https://github.com/csmacnz/coveralls.net&#34;&gt;Coveralls.Net&lt;/a&gt; (available on &lt;a href=&#34;https://www.nuget.org/packages/coveralls.net&#34;&gt;NuGet&lt;/a&gt;) to get your .Net coverage pushed up to their service.&lt;/p&gt;
&lt;h3 id=&#34;coverity-scan&#34;&gt;Coverity Scan&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://scan.coverity.com/&#34;&gt;Coverity Scan&lt;/a&gt; gives your free (for open source) Static Analysis of your .Net code base. You can run this up to several times a day to analyse your code for memory leaks, releasing resources, and other potential defects, and track these results over time. As of a few days ago their tools are &lt;a href=&#34;https://github.com/appveyor/ci/issues/144&#34;&gt;now available on AppVeyor VMs&lt;/a&gt; and I have a &lt;a href=&#34;https://github.com/csMACnz/coveritypublisher&#34;&gt;CoverityPublisher&lt;/a&gt; tool you can use to get your results zipped up and submitted to Coverity.&lt;/p&gt;
&lt;h3 id=&#34;resharper-cli&#34;&gt;Resharper CLI&lt;/h3&gt;
&lt;p&gt;Not a service per se, but &lt;a href=&#34;https://www.jetbrains.com/resharper/features/command-line.html&#34;&gt;ReSharper Command Line Tools&lt;/a&gt; give you the power of resharper for your build scripts. Since this is &lt;a href=&#34;https://chocolatey.org/packages/resharper-clt.portable&#34;&gt;available via Chocolatey&lt;/a&gt; it is easy to integrate with your build scripts, which &lt;a href=&#34;https://github.com/csMACnz/coveralls.net/blob/master/build.tasks.ps1#L143&#34;&gt;I have done for Coveralls.Net&lt;/a&gt;. The two main utilities are dupfinder, and inspectcode. Inspect code is able to use your solution&amp;rsquo;s .DotSettings file, and run your configuration over your code base, the same as ReSharper does, and provide the results as xml. If you look at &lt;a href=&#34;https://github.com/csMACnz/coveralls.net/blob/master/build.tasks.ps1#L148&#34;&gt;my usage&lt;/a&gt; you will see this is easy to integrate into your build server, and get it to trigger build failures if thresholds are reached, to help maintain the quality and consistency of your code.&lt;/p&gt;
&lt;h3 id=&#34;nemo-sonarqube&#34;&gt;Nemo (SonarQube)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt; is a hosted . &lt;a href=&#34;http://nemo.sonarqube.org/&#34;&gt;Nemo&lt;/a&gt; is a cloud hosted instance of SonarQube for open source projects (like &lt;a href=&#34;teamcity.codebetter.com&#34;&gt;teamcity.codebetter.com&lt;/a&gt; is for TeamCity). This is something I need to investigate further, but the gist of this is an Open Source set of tools to give you a large amount of insight into your code base via static analysis. Using the Nemo tools, you can get this over your Open Source project on GitHub and identify issues and concerns you want to get fixed up. I have had trouble finding guides to get added by if you want to get on it I suggest getting in touch with &lt;a href=&#34;https://www.cloudbees.com/&#34;&gt;CloudBees&lt;/a&gt;, who seem to be hosting it.&lt;/p&gt;
&lt;h3 id=&#34;nitriq&#34;&gt;Nitriq&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.nitriq.com/&#34;&gt;Nitriq&lt;/a&gt; is another console app and GUI tool to perform Static Analysis on your .Net applications. This is a free tool. This is a free alternative to a tool like &lt;a href=&#34;http://www.ndepend.com/&#34;&gt;NDepend&lt;/a&gt;. Another tool on my list of things to have a play with, integrating this into my build scripts would add value that paying for something like NDepend would add. If you were wanting to start a new SAAS, this is type of dashboarding would be a great one to look into starting. Just make sure it is free for open source projects. (&lt;a href=&#34;https://scrutinizer-ci.com/&#34;&gt;They already exist&lt;/a&gt; but don&amp;rsquo;t support .Net)&lt;/p&gt;
&lt;h3 id=&#34;honourable-mention&#34;&gt;Honourable Mention&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt; (Ruby, Javascript, PHP) and &lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt; (Scala, Javascript, Python, PHP, CSS) are two more analysis tools, But unfortunately do not support .Net.&lt;/p&gt;
&lt;p&gt;With Code Analysis out of the way, we only have Lifecycle Management left, but it&amp;rsquo;s a biggie.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 5. Documentation</title>
      <link>https://csmacnzblog.github.io/post/net-os-5-documentation/</link>
      <pubDate>Sun, 01 Mar 2015 16:56:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-5-documentation/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-3-test/&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-4-publish-deploy/&#34;&gt;Publish &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Documentation &amp;lt;=(We are here)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-7-lifecycle-management/&#34;&gt;Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Whether you had a console app, a GUI, or an &lt;a href=&#34;https://www.nuget.org/packages/BCLExtensions&#34;&gt;Extension Library&lt;/a&gt; (shameless plug, oh well), you will want, if not need, documentation. People need to know how to get started and what gotchas to look out for.  So here are a few ways to share with your users how to use your awesome tool/app/library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the Docs&lt;/li&gt;
&lt;li&gt;apiary&lt;/li&gt;
&lt;li&gt;readme&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;https://pages.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;read-the-docs&#34;&gt;Read the Docs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://readthedocs.org/&#34;&gt;Read The Docs&lt;/a&gt; is a documentation service, that can produce Continuous Documentation, by building off of webhooks in your source control, based on a conventional folder of &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;   via &lt;a href=&#34;http://www.mkdocs.org/&#34;&gt;MkDocs&lt;/a&gt; or &lt;a href=&#34;http://en.wikipedia.org/wiki/ReStructuredText&#34;&gt;reStructuredText&lt;/a&gt; with &lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;Sphinx&lt;/a&gt;, a python documentation engine. They even &lt;a href=&#34;http://read-the-docs.readthedocs.org/en/latest/index.html&#34;&gt;dogfood their own documentation&lt;/a&gt; on their site. You can have active documentation available pointing at stable and latest, as well as versioned from each release using tags. As a bonus, this service is free.&lt;/p&gt;
&lt;h3 id=&#34;apiary&#34;&gt;apiary&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://apiary.io/&#34;&gt;apiary&lt;/a&gt; focuses on API documentation for your services. As well as documenting your contracts, you can show examples of how to use it as well. They also have a mock service based on your definition that anyone using your service can use a test harness, even if you haven&amp;rsquo;t written your service yet. A DSL called the API Blueprint Language is an adaptation of markdown with some specific mark-up constraints to produce the documentation. apiary is free for one admin + unlimited users, but if you want some of the more advanced features like custom templates, user and role management and other advanced features, you will need to pay $100 a month for up to 50 users, at a minimum. You can even use GitHub at a backing store for your documentation.&lt;/p&gt;
&lt;h3 id=&#34;readme&#34;&gt;readme&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://readme.io/&#34;&gt;readme&lt;/a&gt; is another hosted documentation service. This one is only free until you go live, but if your looking for something free for your open source projects, they offer to upgrade you to a Developer Hub tier plan for free (normally $59 a month), which gives you 5 versions, 10 admins, and custom html/css support. Otherwise at $15 a month you get 3 versions and 1 user, and a few less features.  readme includes a Markdown editor, crowd-sourcing using User suggestions, GitHub sync and like apiary, it also has the ability for in-line code samples, and an API explorer for users to test your rest APIs.&lt;/p&gt;
&lt;h3 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;I already mentioned this is terms of a deployment location, but &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; probably fits better in the documentation section. Using a branch called gh-pages in your repository, you can host the source your documentation in your repository, and have it rendered and hosted by GitHub itself.  There are various rendering engines and approaches for this including an automated generator and Jekyll., as well as manually checking in html files.&lt;/p&gt;
&lt;p&gt;So there you have a few different options to host different types of documentation. Luckily documentation is pretty language agnostic, so there are plenty of options for .Net Open Source (although I did exclude &lt;a href=&#34;http://inch-ci.org/&#34;&gt;Inch CI&lt;/a&gt; for its lack of .Net support, primarily Ruby, but now with Javascript support).  Next up we will look at capturing code metrics to analyse your quality and complexity of your code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 4. Publish &amp; Deploy</title>
      <link>https://csmacnzblog.github.io/post/net-os-4-publish-deploy/</link>
      <pubDate>Sat, 28 Feb 2015 21:43:34 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-4-publish-deploy/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-3-test/&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publish &amp;amp; Deploy &amp;lt;=(We are here)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-5-documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-7-lifecycle-management/&#34;&gt;Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;publish--deploy&#34;&gt;Publish &amp;amp; Deploy&lt;/h2&gt;
&lt;p&gt;Once we are happy with our code, had it tested and happy with what we have, we need a way to distribute it to our customers.  For Websites and Web applications, we want to deploy it onto the web somewhere where it can run.  I will cover a few choices available to .Net developers that I have come across.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Appveyor&lt;/li&gt;
&lt;li&gt;OnCheckin&lt;/li&gt;
&lt;li&gt;Azure&lt;/li&gt;
&lt;li&gt;AppHarbor.com&lt;/li&gt;
&lt;li&gt;GitHub Pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your code is a library, or a utility or console application, then you may want to distribute it to other developers and IT Pros to use and enjoy.  There are several ways to make these available through direct downloads and package managers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NuGet&lt;/li&gt;
&lt;li&gt;Chocolatey&lt;/li&gt;
&lt;li&gt;PsGet&lt;/li&gt;
&lt;li&gt;Github Releases&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;appveyor&#34;&gt;AppVeyor&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt; is my go-to build server. For some extra information in AppVeyor, there is &lt;a href=&#34;http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx&#34;&gt;this great article from scott hanselman&lt;/a&gt; and it also &lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build/#appveyor&#34;&gt;features in the build section&lt;/a&gt; of this series.  In terms of publishing and deploying applications, AppVeyor has a very detailed &lt;a href=&#34;http://www.appveyor.com/docs/deployment&#34;&gt;Deployment&lt;/a&gt; documentation, and can take your build artifacts and push them almost anywhere you can think of. FTP, Amazon, Azure, to SQL, GitHub Releases (mentioned below) and custom scripts for when you have an API available to publish to.  You can publish from artifacts after a successful build manually, or add it as the final build step on every build, or with conditions.  They even provide their own NuGet feed if you want to use the build outputs as in-house betas during development.&lt;/p&gt;
&lt;h3 id=&#34;oncheckin&#34;&gt;OnCheckin&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://oncheckin.com/&#34;&gt;OnCheckin&lt;/a&gt; is an Australian company that provides continuous delivery from check to deployment, and manages all the steps in between for you.  It looks to be very customisable, and provides one site for free. It supports config transforms for the deployment side, and Bitbucket and GitHub for source control, as well as private SVN and git, and Team Foundation Server. You can set up your host provider manually or using a publish profile, such as connecting to an Azure website, or any private host you may have.&lt;/p&gt;
&lt;h3 id=&#34;azure&#34;&gt;Azure&lt;/h3&gt;
&lt;p&gt;You can host just about anything in &lt;a href=&#34;http://azure.microsoft.com/en-us/&#34;&gt;Azure&lt;/a&gt; these days. From compute, to websites, Linux or windows VMs, even backing stores for your mobile apps.  In terms of places to deploy to, Azure is a great option, easy to use, flashy dashboards and plenty of configuration tweaking to be had, If that&amp;rsquo;s your thing.  Publishing a website to Azure with visual studio deploy couldn&amp;rsquo;t be simpler. There are even a bunch of ways to get Azure to pull in changes when you commit to your source control, &lt;a href=&#34;http://azure.microsoft.com/blog/2013/03/19/new-deploy-to-windows-azure-web-sites-from-dropbox/&#34;&gt;deploy from Dropbox&lt;/a&gt; and heaps of other options. And its not too expensive either, depending on your load and traffic, and how many peripheral services you need.&lt;/p&gt;
&lt;h3 id=&#34;appharbor&#34;&gt;AppHarbor&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://appharbor.com/&#34;&gt;AppHarbor&lt;/a&gt; is a Platform As A Service (PAAS) for .Net applications. I haven&amp;rsquo;t had a chance to use this myself, but it does look like a nice offering. For their free plan, you get a single web worker, with a domain of &lt;em&gt;myapp&lt;/em&gt;.apphb.com. For $10 a month you can add unlimited custom domains, and SSL for another $10.If you want load balanced across two web workers, or one web and one background worker, it $50 a month. But you can basically scale up and out and pay for the privilege in any configuration you choose. As well as integration into the likes of GitHub, CodePlex and Bitbucket, it has an ecosystem of add-ons available (free and paid services) to extend your application.&lt;/p&gt;
&lt;h3 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;For the ultimate in continuous deployment there is &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.  Just push changes to your git repository on GitHub and your changes go live.  Each GitHub user gets one user site using a repository called &lt;em&gt;username&lt;/em&gt;.github.io where &lt;em&gt;username&lt;/em&gt; is the user or organisation name of the GitHub account.  As well as this, you can have one per project, and this is done using a branch names gh-pages inside your project&amp;rsquo;s repository.  Since this is hosted by GitHub it makes it easy and free to not only have a site for each of your projects, but your own personal site or blog at no cost to you. That is as long as you don&amp;rsquo;t mind the whole thing being open source (or at least source open).&lt;/p&gt;
&lt;h3 id=&#34;nuget&#34;&gt;NuGet&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet&lt;/a&gt; is Microsoft&amp;rsquo;s package manager for Visual Studio Projects. It is where you can find code files/snippets to install in your project, dll dependencies to link to, utility applications, and more recently plugins/extensions into extensibility points in Visual Studio. Going Forward, NuGet will be the way all dependencies are installed and resolved.  As well as the main public repository of packages at &lt;a href=&#34;https://www.nuget.org/&#34;&gt;www.nuget.org&lt;/a&gt;, The software is open source and free to use so you can host your own repository, or user other providers available such as &lt;a href=&#34;https://www.myget.org/&#34;&gt;www.myget.org&lt;/a&gt;.  The Visual Studio tooling even supports pointing at a folder or network share to resolve packages.&lt;/p&gt;
&lt;h3 id=&#34;chocolatey&#34;&gt;Chocolatey&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; is a twist on NuGet. Rather than being for your code, it is for your machine.  Easily installed from cmd or PowerShell, you can use the command choco install &lt;em&gt;foo&lt;/em&gt; to install applications you want to be able to use on the machine. Two flavours of apps are available, though not all are available in both. There is the portable packages, that run from their own folder and do not require installing. Then there is the usual installed application, usually based on msi or other windows installers.  A Typical package looks like a NuGet package, and contains scripts and instructions to download installers and run them on the machine.  Some of them do require human intervention to click through wizards.  On a build machine, Chocolatey has been very useful for me to install utilities, such as PSake, GitVersion and Nuget. The bonus is I can run the same script on a new development machine or VM, and get all the required utilities installed and ready to go automatically.  Chocolately &lt;a href=&#34;https://www.kickstarter.com/projects/ferventcoder/chocolatey-the-alternative-windows-store-like-yum&#34;&gt;ran a Kickstarter&lt;/a&gt; late last year to get funding for a new 2.0 approach under the name &amp;lsquo;The Chocolatey Experience&amp;rsquo;.  I also use it regularly now on windows to install tools like paint.net, Inkscape, notepad++ and other tools like that, without having to find and download the latest installers myself. Very cool.&lt;/p&gt;
&lt;h3 id=&#34;psget&#34;&gt;PsGet&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://psget.net/&#34;&gt;PsGet&lt;/a&gt; is a package manager for PowerShell. Pretty simple and easy to use. Allows you to pull down and install PowerShell Modules from PowerShell. Their directory list of packages &lt;a href=&#34;https://github.com/psget/psget&#34;&gt;is just a GitHub Repository&lt;/a&gt; and it is easy &lt;a href=&#34;https://github.com/psget/psget/wiki/How-to-add-your-module-to-the-directory&#34;&gt;to add your packages&lt;/a&gt; to it.  I use this mainly to &lt;a href=&#34;http://haacked.com/archive/2011/12/13/better-git-with-powershell.aspx/&#34;&gt;get Posh-Git installed&lt;/a&gt;, but there are other great PowerShell packages in there as well.&lt;/p&gt;
&lt;h3 id=&#34;github-releases&#34;&gt;GitHub Releases&lt;/h3&gt;
&lt;p&gt;Each repository on GitHub has the ability to set up &lt;a href=&#34;https://help.github.com/categories/releases/&#34;&gt;GitHub Releases&lt;/a&gt; based off of tags. These can have files attached, and are a simple as easy way to host the downloadable source and executables or libraries for each specific release version.  As mentioned above you can even publish to here from a release build on AppVeyor either manually or automatically.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s what I&amp;rsquo;ve got for publishing and deployments. Again this is nowhere near definitive, but a good cross section to get you a little more aware.  Next up we move onto other tools to help with developing you code further, starting with Documentation.&lt;/p&gt;
&lt;h2 id=&#34;updates&#34;&gt;Updates&lt;/h2&gt;
&lt;p&gt;Obviously I am going to keep finding tools I&amp;rsquo;ve missed, bit it looks like I should mention &lt;a href=&#34;https://octopusdeploy.com/&#34;&gt;Octopus Deploy&lt;/a&gt;, a deployment engine to automate your environment deployments. As well as the expensive paid versions, there is a Community Edition that lets you deploy 5 projects to up to 10 &amp;lsquo;Tentacles&amp;rsquo; for up to 5 users. Might be worth checking out as well.&lt;/p&gt;
&lt;p&gt;Another CI Service you might want to looks at is &lt;a href=&#34;https://buildhive.cloudbees.com/&#34;&gt;BuildHive&lt;/a&gt; from CloudBees, Who provide hosted Jenkins build server. They also have some &lt;a href=&#34;https://www.cloudbees.com/resources/foss&#34;&gt;open source offerings&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 3. Test</title>
      <link>https://csmacnzblog.github.io/post/net-os-3-test/</link>
      <pubDate>Wed, 25 Feb 2015 20:55:52 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-3-test/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test &amp;lt;=(We are here)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-4-publish-deploy/&#34;&gt;Publish &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-5-documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-7-lifecycle-management/&#34;&gt;Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;test&#34;&gt;Test&lt;/h2&gt;
&lt;p&gt;Once we Have our &lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Build Server&lt;/a&gt; and &lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build&#34;&gt;Build Scripts&lt;/a&gt; all chosen and set up, we can add value by running our tests to check the integrity of our code.  Once we have these tests running every build for every check-in, we can monitor the health of our code base, of our features and branches.  There are plenty of options to choose from for test frameworks so lets have a quick look at a few specifically.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSTest&lt;/li&gt;
&lt;li&gt;NUnit&lt;/li&gt;
&lt;li&gt;xUnit&lt;/li&gt;
&lt;li&gt;Fixie&lt;/li&gt;
&lt;li&gt;SpecFlow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as a secondary to test, usually we execute our test runs in the context of a coverage application, so we can capture and report on the metrics from how much of our code is covered by our tests. There is plenty of discussion about the value of this, but most people would agree that knowing you have low coverage and that encouraging the writing of more tests is better than not knowing your coverage at all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenCover&lt;/li&gt;
&lt;li&gt;SharpCover&lt;/li&gt;
&lt;li&gt;monocov&lt;/li&gt;
&lt;li&gt;XR.Mono.Cover&lt;/li&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mstest&#34;&gt;MSTest&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms182489.aspx&#34;&gt;MSTest&lt;/a&gt; is the de facto, ships with Visual Studio out-of-the-box test framework most people use.  It has the built in templates, a basic set of features that gets you most of the way there, and just works.  That is until you move to mono.  The is a slight coupling to visual studio if you decide to base your tests on this test framework, which means if you want to go cross platform you need to rewrite all your tests.  Maybe a good starting point, but you will eventually want to move off this either for compatibility or features. Having said that, you will still get a long way with MSTest.&lt;/p&gt;
&lt;h3 id=&#34;nunit&#34;&gt;NUnit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.nunit.org/&#34;&gt;NUnit&lt;/a&gt; is a popular open source alternative to MSTest. The framework takes the basic principles of MSTest and extends them in a few ways to enhance the flexibility of its use. It basically gives you the ultimate in flexibility in how you wish to organise your tests, including parameterised test case attribution to your tests, all the setup and teardown options and all the runners and integration to tools you need. Version 3.0 (a complete rewrite) is currently in alpha.&lt;/p&gt;
&lt;h3 id=&#34;xunit&#34;&gt;xUnit&lt;/h3&gt;
&lt;p&gt;Another slightly less popular but rising test framework is &lt;a href=&#34;http://xunit.github.io/&#34;&gt;xUnit&lt;/a&gt;. This one is a bit more opinionated, and tries to cut the scope of available features compared to NUnit and MSTest around Setup and Teardown, opting for constructor and destructor as a more native approach. However it replaces per method Setup and Teardown with a slightly different dependency model using Fixtures (implementing IUseFixture&lt;!-- raw HTML omitted --&gt; and/or IClassFixture&lt;!-- raw HTML omitted --&gt; in your test class).  This has become my go-to test framework, with NuGet packages, visual studio and Resharper runners and command line tools available. Works on mono as well as .Net.  Version 2.0 is in RC3 at the time of this writing(although it did take 2 years to get out of alpha, there has been steady progress over the last few months).&lt;/p&gt;
&lt;h3 id=&#34;fixie&#34;&gt;Fixie&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://fixie.github.io/&#34;&gt;Fixie&lt;/a&gt; is something I&amp;rsquo;ve only come across in passing. It looks to be a very promising test framework, and I encourage you to take it for a test drive if your looking for something to try. My understanding is it is the bare minimum scaffolding to run tests. You are then left to write your conventions for defining and finding what is a test, and defining your own assertion library (or just pick one from NuGet). It allows you to write your own expressions to wrap test methods with classes (for Setup and Teardown) and defining your own parameter injection resolution.&lt;/p&gt;
&lt;p&gt;If you find your highly opinionated in how you want your tests to work, and don&amp;rsquo;t quite like some small parts of your chosen framework, this might be the one to use to get things exactly right.&lt;/p&gt;
&lt;h3 id=&#34;specflow&#34;&gt;SpecFlow&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; is a Specification by Example, Behaviour driven development style test framework.  It uses natural language text files to produce and consume methods containing partial test steps that a developer can implement. this approach means that someone can write up the acceptances tests as tests and not have to write code. They can even compose the existing methods from previous tests into new acceptance tests my chaining them together in new ways using the &lt;a href=&#34;https://cukes.info/gherkin.html&#34;&gt;Gherkin DSL&lt;/a&gt;. If you buy into this approach then it might be worth giving this one a go. Usually these test are used with User Automation Testing, where you can describe use actions in plain English and be able to test this behaviour.&lt;/p&gt;
&lt;h3 id=&#34;opencover&#34;&gt;OpenCover&lt;/h3&gt;
&lt;p&gt;This appears to be the best open source coverage tool available. &lt;a href=&#34;https://github.com/OpenCover/opencover/&#34;&gt;OpenCover&lt;/a&gt; works with most if not all of the test frameworks, and even has a &lt;a href=&#34;https://github.com/OpenCoverUI/OpenCover.UI&#34;&gt;OpenCover.UI&lt;/a&gt; extension for visual studio being actively worked on. The only downside I have found is it uses C++ COM to communicate with .Net, and so does not work with mono.&lt;/p&gt;
&lt;h3 id=&#34;sharpcover&#34;&gt;SharpCover&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gaillard/SharpCover&#34;&gt;SharpCover&lt;/a&gt; is another alternative open source coverage tool. This one is built on mono.cecil and works cross platform. I am yet to actually try this one out, so cannot give much feedback other than that it is cross platform, and hasn&amp;rsquo;t had a release in over a year. But I did get a quick response from the &lt;a href=&#34;https://github.com/gaillard/SharpCover/issues/8&#34;&gt;issue I raise recently&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;xrmonocover&#34;&gt;XR.Mono.Cover&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/inorton/XR.Baboon&#34;&gt;XR.Mono.Cover&lt;/a&gt; looks really promising. This appears to be a mono-only coverage, but claims to work on mono on windows as well. Again I have no experience to share here. It does have a GUI component and stores its data in a SQLite database for easier data analysis later on. It is a bit light on updates, so either it doesn&amp;rsquo;t have any issues, or no ones really using it.&lt;/p&gt;
&lt;h3 id=&#34;monocov&#34;&gt;monocov&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mono/monocov&#34;&gt;Monocov&lt;/a&gt; is an open source coverage tool for mono.  I &lt;a href=&#34;https://csmacnzblog.github.io/monocov-travis-ci-winning/&#34;&gt;managed to get this working&lt;/a&gt; despite it being several years unmaintained, and it is pretty broken.  If you really want to do coverage on mono I would look into &lt;a href=&#34;https://github.com/inorton/XR.Baboon&#34;&gt;XR.Mono.Cover&lt;/a&gt; and &lt;a href=&#34;https://github.com/gaillard/SharpCover&#34;&gt;SharpCover&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;visual-studio&#34;&gt;Visual Studio&lt;/h3&gt;
&lt;p&gt;Visual Studio has had coverage capabilities is some of its higher SKUs for a while. And as well as the GUI coverage you can use in the test runner, it also has command line tooling you can use. you can even produce a coverage report using a flag on the vstest.console runner.  Not really open source, but a nice option if you have it available.&lt;/p&gt;
&lt;h3 id=&#34;and-more&#34;&gt;And More&lt;/h3&gt;
&lt;p&gt;As usual this is just a cross section of Frameworks and coverage out there. For a reference list there is the &lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#.NET_programming_languages&#34;&gt;List of unit testing frameworks, .Net&lt;/a&gt; section on Wikipedia that lists a few, as well as the various runners available. Before picking the one to go with, I suggest verifying it fits into your preferred way of running tests. Most have a pretty good command-line option, integration points into CI Servers, and the Resharper and Visual Studio test runners. it is worth checking out &lt;a href=&#34;https://www.jetbrains.com/dotcover/&#34;&gt;dotcover&lt;/a&gt; and &lt;a href=&#34;https://www.ncover.com/&#34;&gt;NCover&lt;/a&gt; because they have available &lt;a href=&#34;https://www.jetbrains.com/dotcover/buy/license_opensource.html&#34;&gt;free licensing for open source&lt;/a&gt; projects.&lt;/p&gt;
&lt;p&gt;And as one last optional extra, there is a tool to generate coverage reports from most of the coverage tools I mentioned above called &lt;a href=&#34;https://github.com/danielpalme/ReportGenerator&#34;&gt;ReportGenerator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next up is how we publish and deploy our newly built and tested applications!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 2. Build</title>
      <link>https://csmacnzblog.github.io/post/net-os-2-build/</link>
      <pubDate>Tue, 24 Feb 2015 20:30:15 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-2-build/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control&#34;&gt;Source Control&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Build &amp;lt;=(We are here)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-3-test/&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-4-publish-deploy/&#34;&gt;Publish &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-5-documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-7-lifecycle-management/&#34;&gt;Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;build&#34;&gt;Build&lt;/h2&gt;
&lt;p&gt;So not we have our source control sorted (and if you don&amp;rsquo;t check back on &lt;a href=&#34;https://csmacnzblog.github.io/-net-os-1-source-control/&#34;&gt;part 1&lt;/a&gt;) We can start writing code. And once we have some code together we need a way to build it.  If your a Visual Studio developer like me, you might think &amp;lsquo;I have foo.csproj, and it builds just fine!&amp;rsquo;.  Well that&amp;rsquo;s great, if your wanting to depend on a visual studio GUI. But if you want to reach Continuous * Nirvana, you need a build server, and it needs to run autonomously.  As well as needing this build server, we probably want scripts to automate our build process. And over time we can add to these scripts with other steps, like running tests, packaging deployables, and running static analysis.&lt;/p&gt;
&lt;p&gt;I will quickly run through a few build script options I&amp;rsquo;ve used, and although not definitive, are plenty powerful to get the job done. These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSBuild&lt;/li&gt;
&lt;li&gt;bat/sh&lt;/li&gt;
&lt;li&gt;psake(/PowerShell)&lt;/li&gt;
&lt;li&gt;FAKE&lt;/li&gt;
&lt;li&gt;Node.js (Grunt/gulp)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as far as builder servers go, (skipping over the self-hosted servers like &lt;a href=&#34;https://www.jetbrains.com/teamcity/&#34;&gt;TeamCity&lt;/a&gt; and &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; Build Servers), there are some great Build Server as a Service (BSAAS) options that you can use to host your public open source repositories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Travis-CI&lt;/li&gt;
&lt;li&gt;AppVeyor&lt;/li&gt;
&lt;li&gt;Atlassian Bamboo&lt;/li&gt;
&lt;li&gt;TeamCity.CodeBetter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;msbuild&#34;&gt;MSBuild&lt;/h3&gt;
&lt;p&gt;Unless you&amp;rsquo;ve been blinding using Visual Studio like magic, you will be aware that this is the way *.csproj files get turned into dlls and assemblies. And all of this can be done on command line as well, either with devenv.exe, or with the MSBuild tool itself. A good baseline in absence of anything else.&lt;/p&gt;
&lt;h3 id=&#34;batsh&#34;&gt;bat/sh&lt;/h3&gt;
&lt;p&gt;the simple cmd.exe command shell is the most basic place to start stringing simple commands one after the other. If all you need is to run devenv.exe or MSBuild.exe with the &amp;lsquo;build my solution&amp;rsquo; command, followed by a call to something else to &amp;lsquo;run my tests&amp;rsquo;, then maybe you can get away with something as simple as a .bat file.  If your more into mono, then the shell capabilities of Linux and probably all too familiar.  You can even get some powerful behaviour out of &lt;a href=&#34;http://ss64.com/nt/syntax.html&#34;&gt;batch scripting&lt;/a&gt; if you want to go down that road.&lt;/p&gt;
&lt;h3 id=&#34;psake--powershell&#34;&gt;psake (+ PowerShell)&lt;/h3&gt;
&lt;p&gt;I used &lt;a href=&#34;https://github.com/psake/psake&#34;&gt;psake&lt;/a&gt; about 3 years ago with a project and it did seem quite heavy handed. It was also already established when I got there. After being if TFS build script land for a while I came back to try psake again on my &lt;a href=&#34;https://github.com/csMACnz&#34;&gt;own projects&lt;/a&gt; and when starting from scratch I finally see the power and simplicity this has.  Not only is is just PowerShell, so I can run any arbitrary command line, PowerShell or .net code I need, but its also a simple yet powerful task orchestration system.  I think I&amp;rsquo;m going to be more than happy having all my projects using this as their build system.&lt;/p&gt;
&lt;h3 id=&#34;fake&#34;&gt;FAKE&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://fsharp.github.io/FAKE/&#34;&gt;FAKE&lt;/a&gt; follows the tradition of other *ake build tools (&lt;a href=&#34;http://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;, &lt;a href=&#34;http://www.cmake.org/&#34;&gt;cmake&lt;/a&gt;, &lt;a href=&#34;http://docs.seattlerb.org/rake/&#34;&gt;rake&lt;/a&gt; etc) but uses the F# language to do it. If you have ever wanted to learn F#, or are already using it, this is a nice choice to write your build scripts in. There are plenty of projects using this, and since its all just IL, people are using it with their mono builds too.  I haven&amp;rsquo;t used this myself but it does seem like a nice way to write your build scripts.&lt;/p&gt;
&lt;h3 id=&#34;nodejs-gruntgulp&#34;&gt;Node.js (Grunt/gulp)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; is all the rage, and using one of the popular task runners like &lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt; or &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt; gives you powerful pipe lining capabilities to get your projects put together. These are especially useful if your project includes a lot of Javascript and css, and you want to be able to bundle it all together, to compile it from a language like CoffeeScript, Less or Sass.  I have &lt;a href=&#34;http://blog.csmac.nz/gulp--net/&#34;&gt;an article I wrote last year&lt;/a&gt; on gulp, although have since switched to psake, due to lack of web technologies in the project.  But worth looking into if your solution is more web-focused.&lt;/p&gt;
&lt;p&gt;And on to the build servers.&lt;/p&gt;
&lt;h3 id=&#34;appveyor&#34;&gt;AppVeyor&lt;/h3&gt;
&lt;p&gt;Ever since Scott Hanselman did &lt;a href=&#34;http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx&#34;&gt;this great write-up on AppVeyor&lt;/a&gt; I&amp;rsquo;ve started using it with my open source projects.  For .Net developers, &lt;a href=&#34;http://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt; is the simplest, most powerful Build Server experience I&amp;rsquo;ve seen for a C# project, that just works out of the box.  On top of that, you can configure it to do just about anything with extra scripting, on top of the configuration extensions they already have available to configure in their settings GUI. This is my go-to Solution for my CI, and I can&amp;rsquo;t see myself being easily swayed towards anything else in the short term.&lt;/p&gt;
&lt;h3 id=&#34;travis-ci&#34;&gt;Travis-CI&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis-CI&lt;/a&gt; only just opened up beta support for .Net back in December 2014 (less than 3 months ago at the time of this writing) and already they have support to build and test Xamarin, portable class libraries and anything that will run against the mono runtime.  This is a great way to ensure your open source library will actually build and run on mono and that your not doing anything that will break for your mono users, without knowing about it.  I even have my integration tests running against one of my projects on .Net and mono with AppVeyor, and again with mono on Travis-CI on every commit, which really neat to see.&lt;/p&gt;
&lt;h3 id=&#34;atlassian-bamboo&#34;&gt;Atlassian Bamboo&lt;/h3&gt;
&lt;p&gt;Atlassian, not to be left out from a ALM opportunity, have a build server called &lt;a href=&#34;https://www.atlassian.com/software/bamboo&#34;&gt;Bamboo&lt;/a&gt;. In fact keep an eye out in almost every most I think I&amp;rsquo;ll be finding an Atlassian product to call out.  They seem to be &lt;a href=&#34;https://www.atlassian.com/opensource/overview&#34;&gt;right behind open source&lt;/a&gt; and it is great to see. Although I use their products at work, I haven&amp;rsquo;t really had the chance to use Bamboo with any projects, so If your interested you will have to follow this one on your own.  But I would be keen to hear back from anyone who has used it on how they found it.&lt;/p&gt;
&lt;h3 id=&#34;teamcitycodebetter&#34;&gt;TeamCity.CodeBetter&lt;/h3&gt;
&lt;p&gt;Just when you thought you couldn&amp;rsquo;t keep using your beloved TeamCity, the team at CodeBetter have &lt;a href=&#34;http://codebetter.com/codebetter-ci/&#34;&gt;collaborated with JetBrains on this hosted version&lt;/a&gt;, &lt;a href=&#34;http://teamcity.codebetter.com/&#34;&gt;TeamCity.CodeBetter.com&lt;/a&gt; and its free for open source projects to register and get their CI running here.  Personally it is a few hoops to just through, and AppVeyor is much simpler so I don&amp;rsquo;t think I will make the leap. But its an open available if you want it.&lt;/p&gt;
&lt;h3 id=&#34;so-there-it-is&#34;&gt;So there it is&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m sure there are more out there (I know there are but the others I found don&amp;rsquo;t support .Net), and would love to hear about them if you find them.&lt;/p&gt;
&lt;p&gt;In conclusion, I find AppVeyor is the one I&amp;rsquo;ll keep using, because its got a great range of features, and I&amp;rsquo;ve managed to see and make change on what comes in the build VM when it boots, which is awesome.  For mono I will keep using Travis-CI and see how it goes, and hopefully help them extend their support for C# along the way too.&lt;/p&gt;
&lt;p&gt;Now the have source control, and a place for continuous integration, next up is testing!&lt;/p&gt;
&lt;h2 id=&#34;updates&#34;&gt;Updates&lt;/h2&gt;
&lt;p&gt;I totally forgot to mention one other awesome tool for CI builds -  &lt;a href=&#34;https://github.com/ParticularLabs/GitVersion/wiki/GitFlowExamples#major-release&#34;&gt;GitVersion&lt;/a&gt;! This awesome library (available as a &lt;a href=&#34;https://chocolatey.org/packages/GitVersion.Portable/2.0.1&#34;&gt;Chocolatey Package&lt;/a&gt;) determines the ideal version number for your current build, and gives you various permutations so you can use it exactly how you want to inside your build scripts. It integrates with various build servers, and (mostly) just works.  There is plenty of guidance on their wiki on github, and they support Git Flow and GitHub Flow branching strategies. Recommended.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 1. Source Control</title>
      <link>https://csmacnzblog.github.io/post/net-os-1-source-control/</link>
      <pubDate>Sun, 22 Feb 2015 21:13:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-1-source-control/</guid>
      <description>&lt;p&gt;This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects.  But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source Control  &amp;lt;=(We are here)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build/&#34;&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-3-test/&#34;&gt;Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-4-publish-deploy/&#34;&gt;Publish &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-5-documentation/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-6-metrics/&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://csmacnzblog.github.io/-net-os-7-lifecycle-management/&#34;&gt;Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;source-control&#34;&gt;Source Control&lt;/h2&gt;
&lt;p&gt;There are lots of different ways to host your source control online, and source control isn&amp;rsquo;t really language specific, so we dont have any options ruled out in this.  I&amp;rsquo;m sure this is nothing new to most people, but I will list off a few options with a little bit of detail.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CodePlex&lt;/li&gt;
&lt;li&gt;BitBucket&lt;/li&gt;
&lt;li&gt;Visual Studio Online&lt;/li&gt;
&lt;li&gt;Assembla&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;codeplex&#34;&gt;CodePlex&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.codeplex.com/&#34;&gt;www.codeplex.com&lt;/a&gt; is Microsoft&amp;rsquo;s attempt at open source hosting of source control. It started back in 2006 and has been a very Microsoft-centric place to go find the source code for your favorite open source project. As well as the source, there are usually hosted downloads of the latest and historical versions, as well as documentation, and raising issues. For instance, this is where you would find &lt;a href=&#34;https://nuget.codeplex.com/&#34;&gt;nuget&lt;/a&gt; (although they too are on &lt;a href=&#34;https://github.com/NuGet&#34;&gt;Github&lt;/a&gt;). They provide hosting of Git, Team Foundation Server, or Mercurial repositories (although git is recommended over Mercurial because it is faster, more reliable and has better tooling).&lt;/p&gt;
&lt;p&gt;As best I can tell, the only hosting option is a free public repository, but it also doesn&amp;rsquo;t cost anything to do so, either.&lt;/p&gt;
&lt;p&gt;This seems to have lost traction over the last while, with a large number of projects seemingly having &lt;a href=&#34;https://json.codeplex.com/&#34;&gt;moved to Github&lt;/a&gt;. And with their &lt;a href=&#34;http://blogs.msdn.com/b/codeplex/&#34;&gt;last blog post&lt;/a&gt; being over two years old, the place looks &lt;a href=&#34;https://codeplex.codeplex.com/workitem/27634&#34;&gt;rather dorment&lt;/a&gt;. Having said that, you can still create a repository if you like.&lt;/p&gt;
&lt;h3 id=&#34;bitbucket&#34;&gt;BitBucket&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://bitbucket.org&#34;&gt;bitbucket.org&lt;/a&gt; is the offering of ALM company &lt;a href=&#34;https://www.atlassian.com/&#34;&gt;Atlassian&lt;/a&gt; (the ones who do &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;Jira&lt;/a&gt;, &lt;a href=&#34;https://www.atlassian.com/software/confluence&#34;&gt;Confluence&lt;/a&gt;, and &lt;a href=&#34;https://www.atlassian.com/software/hipchat&#34;&gt;HipChat&lt;/a&gt;). You can choose between Git and Mercurial as your source control, and your repositories can either be public or private as you choos, and give you access to issue tracking, wiki, and chat capabilities.&lt;/p&gt;
&lt;p&gt;In Terms of &lt;a href=&#34;https://bitbucket.org/plans&#34;&gt;pricing&lt;/a&gt;, BitBucket gives you unlimited repositories. The catch is instead you pay per user. For instance, up to 5 users is free, then you pay $10 a month for up to 10 users, all the way up to $100 for 100 users, or Unlimited users at a price of $200 a month.&lt;/p&gt;
&lt;p&gt;BitBucket does have integrations with different tools, other than Atlassians own offerings. If you care about integration with other tools then things like &lt;a href=&#34;https://www.flowdock.com/&#34;&gt;Flowdock&lt;/a&gt;, &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; and others have capabilities to integrate.&lt;/p&gt;
&lt;p&gt;It is also worth noting that Atlassian also offer a product called &lt;a href=&#34;https://www.atlassian.com/software/stash&#34;&gt;Stash&lt;/a&gt; which is a self-hosted source control platform option.&lt;/p&gt;
&lt;h3 id=&#34;visual-studio-online&#34;&gt;Visual Studio Online&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.visualstudio.com/&#34;&gt;www.visualstudio.com&lt;/a&gt; is Microsoft&amp;rsquo;s TFS in the cloud. But it is more then that, since the cadence is much faster for Visual Studio Online that it gets features about 6 months ahead of it&amp;rsquo;s on-premise older brother.&lt;/p&gt;
&lt;p&gt;As well as the obvious Team Foundation Version Control support, you can also create a git repository, which is compatible with the rest of the Visual Studio ecosystem these days as well.&lt;/p&gt;
&lt;p&gt;Like BitBucket, &lt;a href=&#34;http://www.visualstudio.com/pricing/visual-studio-online-pricing-vs&#34;&gt;the pricing&lt;/a&gt; is on a per user basis, and like BitBucket, the free limit is 5. The key here is that they offer private repositories. If you are an MSDN subscriber, you also get to be added to repositories, without affecting this user limit. So that means 5 + Unlimited MSDN users. You also get unlimited stakeholders, 60 minutes a month of build time, as well as 20k virtual user minutes a month for load testing. These benefits are thanks to the Azure platform that runs the associated build server environments. After the 5 users, you pay $20, $45 or $60 per month per user for basic, professional (includes a professional visual studio license) or advanced (extra testing benefits).&lt;/p&gt;
&lt;p&gt;Although this is a great option for a small development shop or an indie develop, this probably isn&amp;rsquo;t the right fit for your open source development. But for everything else, this plus &lt;a href=&#34;http://www.visualstudio.com/products/visual-studio-community-vs&#34;&gt;Visual Studio Community 2013&lt;/a&gt; is a great combination for an indie developer, building free or paid apps.&lt;/p&gt;
&lt;h3 id=&#34;assembla&#34;&gt;Assembla&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.assembla.com/&#34;&gt;www.assembla.com&lt;/a&gt; is another ALM solution like Atlassian. But as well as all their paid solutions, they have a free plan which gives you a basic repository hosting solution with unlimited users, but none of the ALM style offerings they have. They also limit you to a 1Gb sized repository. They offer Git, SVN or &lt;a href=&#34;http://www.perforce.com/&#34;&gt;Perforce&lt;/a&gt; hosting.&lt;/p&gt;
&lt;p&gt;As with Visual Studio Online, these guys are a private repository hosting solution. Their &lt;a href=&#34;https://www.assembla.com/plans&#34;&gt;paid plans&lt;/a&gt; range from $24-$200 a month, and scale up your storage and user limit the more you pay.&lt;/p&gt;
&lt;p&gt;This is another one of those great for private stuff, and enterprise stuff, not so much for the open source kinda deals.&lt;/p&gt;
&lt;h3 id=&#34;github&#34;&gt;Github&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;www.github.com&#34;&gt;www.github.com&lt;/a&gt; is git as a service. As a distributed source control, git itself doesn&amp;rsquo;t do a central repository per se, but with their concept of pull requests and easy to create forks, its a great place to backup your repositories to as a hub for sharing and collaboration.&lt;/p&gt;
&lt;p&gt;Public repositories are free, and &lt;a href=&#34;https://github.com/pricing&#34;&gt;their priceing&lt;/a&gt; for personal plans ranges from $7 a month for up to 5 private repositories, to $50 a month for up to 50 repositories. They also have a organisational tier which gets up to $200 for 125 repositories.&lt;/p&gt;
&lt;p&gt;The nice thing about Github, is that it is popular. Its the new hotness, and everyone is using it.  And because everyone is using it, everyone is integrating with it.  If you want to pick the source control provider with the most integration points available to you, Github is probably the right choice.&lt;/p&gt;
&lt;p&gt;Github also offer an &lt;a href=&#34;https://enterprise.github.com/&#34;&gt;Enterprise&lt;/a&gt;, self-hosted solution.&lt;/p&gt;
&lt;h3 id=&#34;and-more&#34;&gt;And More&lt;/h3&gt;
&lt;p&gt;This is only a handful of repository hosts out there, mainly ones I&amp;rsquo;ve had anything to do with over the last 5 years. But there are a ton more source control hosters out there, at varying levels of &amp;lsquo;free&amp;rsquo; and for more information on these there is a page on Wikipedia -
&lt;a href=&#34;http://en.wikipedia.org/wiki/Comparison_of_source_code_software_hosting_facilities&#34;&gt;Comparison of source code software hosting facilities&lt;/a&gt;.  Since I haven&amp;rsquo;t really had anything to do with the rest I&amp;rsquo;ll leave the investigation up to the reader.&lt;/p&gt;
&lt;p&gt;My picks from the above: I use Visual Studio Online for all my apps, websites and other private work, and github for everything else.&lt;/p&gt;
&lt;p&gt;So thats it for Source Control. Next up is &lt;a href=&#34;https://csmacnzblog.github.io/-net-os-2-build/&#34;&gt;Building your hosted Source&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>monocov &#43; Travis-CI = WINNING</title>
      <link>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</link>
      <pubDate>Sun, 08 Feb 2015 15:29:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</guid>
      <description>&lt;p&gt;After much frustration, I now have &lt;a href=&#34;https://github.com/mono/monocov&#34;&gt;monocov&lt;/a&gt; running on my Travis-CI build, and I&amp;rsquo;m going to share with you how I did it.&lt;/p&gt;
&lt;p&gt;TL;DR
The coverage results don&amp;rsquo;t seem accurate just yet, but jump to the end to see the full script to get it going on your build.&lt;/p&gt;
&lt;p&gt;As I mentioned in a &lt;a href=&#34;http://blog.csmac.nz/introducing-coveralls-net&#34;&gt;previous post&lt;/a&gt;, I am building a &lt;a href=&#34;https://coveralls.io&#34;&gt;coveralls.io&lt;/a&gt; publisher for .Net code coverage.  This means (to me any way) that I need to support mono coverage as well.  The best suggested coverage tool &lt;a href=&#34;http://www.mono-project.com/docs/debug+profile/profile/code-coverage/&#34;&gt;mentioned online&lt;/a&gt; for mono is monocov, despite being officially unmaintained since May 2011.  But I stuck with it.&lt;/p&gt;
&lt;p&gt;So I started building a &lt;a href=&#34;https://github.com/csMACnz/Coveralls.net-Samples&#34;&gt;sample library&lt;/a&gt; with CI on github and very easily got examples working for AppVeyor on windows.  But I wanted to get monocov working as a sample with Travis-CI before I built support for it.  I found pretty quickly that monocov is not installed on Travis-ci, and in fact there is no package available to install it either that I could find.&lt;/p&gt;
&lt;p&gt;Thanks to github forks, I found someone else had forked and updated the source for monocov to work with a newer Xamarin version of the mono installation.  So naturally I forked this fork so I could make my own changes if necessary.&lt;/p&gt;
&lt;p&gt;Using a few tricks I was able to get my Travis-CI build to clone down the git fork, build it and install it on the build server.  I did have to change a compile setting and set a variable based on &lt;a href=&#34;http://keithnordstrom.com/getting-the-monocov-profiler-to-link-on-ubuntu-13&#34;&gt;this blog post&lt;/a&gt;, and I had to pull down the &lt;a href=&#34;https://www.nuget.org/packages/Mono.Cecil/&#34;&gt;mono.cecil nuget package&lt;/a&gt; so I had the Mono.Cecil.dll file required by the C# side of monocov. I also made to install gtk-sharp2 for the GUI library to build with make, although I don&amp;rsquo;t use it. After all these steps I finally got it to a point where it was installed.  The Travis-CI code ended up using these instructions in the install section:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- sudo apt-get install gtk-sharp2
- curl -sS https://api.nuget.org/packages/mono.cecil.0.9.5.4.nupkg &amp;gt; /tmp/mono.cecil.0.9.5.4.nupkg.zip
- unzip /tmp/mono.cecil.0.9.5.4.nupkg.zip -d /tmp/cecil
- cp /tmp/cecil/lib/net40/Mono.Cecil.dll .
- cp /tmp/cecil/lib/net40/Mono.Cecil.dll /tmp/cecil/
- git clone --depth=50 git://github.com/csMACnz/monocov.git ../../csMACnz/monocov
- cd ../../csMACnz/monocov
- cp /tmp/cecil/Mono.Cecil.dll .
- ./configure
- make
- sudo make install
- cd ../../csMACnz/Coveralls.net-Samples 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note I changed directories a few times, and pulled monocov into a directory beside my actual repo build folder.&lt;/p&gt;
&lt;p&gt;To get it to run over my tests, I had to use a couple of options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set the load library path as seen in the &lt;a href=&#34;http://keithnordstrom.com/getting-the-monocov-profiler-to-link-on-ubuntu-13&#34;&gt;blog post&lt;/a&gt; I mentioned earlier.&lt;/li&gt;
&lt;li&gt;&amp;ndash;profile=monocov:outfile=monocovCoverage.cov to get monocov to run and output to a specified file&lt;/li&gt;
&lt;li&gt;,+[GameOfLife],+[GameOfLife.xUnit.Tests] as part of the coverage to specify which assemblies to record coverage for&lt;/li&gt;
&lt;li&gt;/noshadow so it didn&amp;rsquo;t use a temp directory for the results, since it has to locate the dll in step 2&lt;/li&gt;
&lt;li&gt;run a second step afterwards to convert the *.cov file into a folder of detailed xml files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting code for this looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- export LD_LIBRARY_PATH=/usr/local/lib
- mono --debug --profile=monocov:outfile=monocovCoverage.cov,+[GameOfLife],+[GameOfLife.xUnit.Tests] ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./src/GameOfLife.xUnit.Tests/bin/Release/GameOfLife.xUnit.Tests.dll  /noshadow
- monocov --export-xml=monocovCoverage monocovCoverage.cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So whats the next steps? Well now I have actual results I will get &lt;a href=&#34;https://github.com/csMACnz/coveralls.net&#34;&gt;coveralls.net&lt;/a&gt; support written and get it published to nuget and usable on my Travis-CI build, so it is passing.  After that I will look at the accuracy of the existing code, since my initial results haven&amp;rsquo;t really looked that accurate.&lt;/p&gt;
&lt;p&gt;In summary, and If you just skipped to the end, my full &lt;code&gt;travis.yml&lt;/code&gt; file running monocov over my .net project on Travis-CI looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: csharp
solution: ./src/GameOfLife.sln
install:
  - nuget restore ./src/GameOfLife.sln
  - chmod +x ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe
  - sudo apt-get install nunit-console
  - sudo apt-get install gtk-sharp2
  - curl -sS https://api.nuget.org/packages/mono.cecil.0.9.5.4.nupkg &amp;gt; /tmp/mono.cecil.0.9.5.4.nupkg.zip
  - unzip /tmp/mono.cecil.0.9.5.4.nupkg.zip -d /tmp/cecil
  - cp /tmp/cecil/lib/net40/Mono.Cecil.dll .
  - cp /tmp/cecil/lib/net40/Mono.Cecil.dll /tmp/cecil/
  - git clone --depth=50 git://github.com/csMACnz/monocov.git ../../csMACnz/monocov
  - cd ../../csMACnz/monocov
  - cp /tmp/cecil/Mono.Cecil.dll .
  - ./configure
  - make
  - sudo make install
  - cd ../../csMACnz/Coveralls.net-Samples
script:
  - xbuild /p:Configuration=Release ./src/GameOfLife.sln
  - export LD_LIBRARY_PATH=/usr/local/lib
  - mono --debug --profile=monocov:outfile=monocovCoverage.cov,+[GameOfLife],+[GameOfLife.xUnit.Tests] ./src/packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./src/GameOfLife.xUnit.Tests/bin/Release/GameOfLife.xUnit.Tests.dll  /noshadow
  - monocov --export-xml=monocovCoverage monocovCoverage.cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope someone finds this useful, and stay tuned for the coveralls.io update.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Travis-ci, C# and PCL</title>
      <link>https://csmacnzblog.github.io/post/travis-ci-c-and-pcl/</link>
      <pubDate>Tue, 23 Dec 2014 10:10:46 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/travis-ci-c-and-pcl/</guid>
      <description>&lt;p&gt;As any good library should do, I&amp;rsquo;m building my &lt;a href=&#34;http://github.com/csmacnz/bclextensions&#34;&gt;BCLExtensions project&lt;/a&gt;(extensions for the .net base class library) using PCL (Portable class library, Profile328 to be exact).  It works great on my &lt;a href=&#34;https://ci.appveyor.com/project/MarkClearwater/bclextensions&#34;&gt;AppVeyor CI builds&lt;/a&gt;, which is a great .Net windows build server.&lt;/p&gt;
&lt;p&gt;I recently discovered &lt;a href=&#34;http://docs.travis-ci.com/user/languages/csharp/&#34;&gt;Travis-CI has added beta C# support&lt;/a&gt; so I connected it up with my &lt;a href=&#34;http://github.com/csmacnz/bclextensions&#34;&gt;GitHub prooject&lt;/a&gt;, which is designed to eventually work with mono anyway, and gave it a go. But no, that&amp;rsquo;s a no go.  The awesome error I was getting was this cryptic thing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;	Target GetReferenceAssemblyPaths:
		/usr/lib/mono/xbuild/12.0/bin/Microsoft.Common.targets:  warning : Unable to find framework corresponding to the target framework moniker &#39;.NETPortable,Version=v4.0,Profile=Profile328&#39;. Framework assembly references will be resolved from the GAC, which might not be the intended behavior.
		/usr/lib/mono/xbuild/12.0/bin/Microsoft.Common.targets: error : PCL Reference Assemblies not installed.
	Task &amp;quot;GetReferenceAssemblyPaths&amp;quot; execution -- FAILED
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Turns out since I&amp;rsquo;m using PCL (remember how i said i was using PCL), which the Xamarin mono bits on linux don&amp;rsquo;t come with, and there are no debian packages that contain these PCL frameworks, the bits I need are not there on the Travis build vm.  It wont compile without them. Damn.&lt;/p&gt;
&lt;p&gt;Luckily for me, thanks to some fast work from the Travis-CI guys, I got the following added to my .travis.yml file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;	install:
		- curl -sS http://storage.bos.xamarin.com/bot-provisioning/PortableReferenceAssemblies-2014-04-14.zip &amp;gt; /tmp/pcl-assemblies.zip
		- unzip /tmp/pcl-assemblies.zip -d /tmp/pcl-assemblies &amp;amp;&amp;amp; mv /tmp/pcl-assemblies/PortableReferenceAssemblies-2014-04-14 /tmp/pcl-assemblies/.NETPortable
		- export XBUILD_FRAMEWORK_FOLDERS_PATH=/tmp/pcl-assemblies/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They even put it in a &lt;a href=&#34;https://github.com/csmacnz/BCLExtensions/pull/2&#34;&gt;nice PR&lt;/a&gt; for me.  This allowed the build server to download the PCL references from Xamarin, set the environment variable for the location of the assemblies (well done xbuild for including that little gem in their source, and all my builds came to life.&lt;/p&gt;
&lt;p&gt;The only other hurdle i had was my mstest projects wouldn&amp;rsquo;t compile, no mstest on mono.  This was easily fixed by changing to xUnit, which is cross platform, and I&amp;rsquo;m loving as a test framework so far. easy to add using nuget packages and this in your .yml:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    install:
        - nuget restore MySolution.sln
        - chmod +x ./packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe
    script:
        - xbuild /p:Configuration=Release ./MySolution.sln
        - mono ./packages/xunit.runners.1.9.2/tools/xunit.console.clr4.exe ./MyProject.Tests/bin/Release/MyProject.Tests.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now today I got an &lt;a href=&#34;https://github.com/csmacnz/BCLExtensions/pull/2#issuecomment-67963660&#34;&gt;update from the guys at Travis&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/akoeplinger&#34;&gt;@akoeplinger&lt;/a&gt; commented&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/csmacnz&#34;&gt;@csmacnz&lt;/a&gt; just FYI, we are now installing the new referenceassemblies-pcl Debian package from Xamarin in the Travis C# support, so this workaround shouldn&amp;rsquo;t be necessary any longer :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I will be able to remove all this and pretend it never happened. At least I&amp;rsquo;ve documented it in the mean-time, and know it is here if a similar issue crops up in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hey, I found this thing called Coveralls.io</title>
      <link>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</link>
      <pubDate>Sun, 14 Dec 2014 19:50:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</guid>
      <description>&lt;p&gt;In my pursuit to &lt;a href=&#34;//blog.csmac.nz/gulp-vs-net/&#34;&gt;find a build task runner for my code coverage&lt;/a&gt; I stumbled on this whole other side of the internet I didn&amp;rsquo;t know about (from a .Net developer&amp;rsquo;s perspective). I&amp;rsquo;ve been using &lt;a href=&#34;http://www.appveyor.com/&#34;&gt;AppVeyor.com&lt;/a&gt; for my open-source CI build, which is a great option for anyone with a project on the Microsoft Stack. The cool thing about this (and other similar services) is that if you have an open source project on GitHub, you can use these services with your project for free!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m aware this isn&amp;rsquo;t new, and there are others like &lt;a href=&#34;http://travis-ci.org/&#34;&gt;Travis-CI.org&lt;/a&gt; which run all the other platforms, but I didn&amp;rsquo;t realise how prolific it really was! Especially how exclusive of microsoft languages they all are. Travis-CI for instance, doesn&amp;rsquo;t seem to support .Net by looking on their &lt;a href=&#34;http://docs.travis-ci.com/&#34;&gt;docs page&lt;/a&gt;, though there does seem to be &lt;a href=&#34;http://docs.travis-ci.com/user/languages/csharp/&#34;&gt;mono support in beta&lt;/a&gt; (and that didnt exist when i looked a week ago, so will keep an eye on this).&lt;/p&gt;
&lt;p&gt;But my main reason for this post, is that I found this cool new (to me any way) Continuous Code Coverage host called &lt;a href=&#34;https://coveralls.io/&#34;&gt;coveralls.io&lt;/a&gt;. With a cool name like that, and a badge for my project, I&amp;rsquo;m sold. But wait, lets check &lt;a href=&#34;https://coveralls.zendesk.com/hc/en-us&#34;&gt;those docs&lt;/a&gt; again.  Yip as I thought, no C# support.  They even have C/C++, this is wrong!&lt;/p&gt;
&lt;p&gt;Ah but whats this? They have an api? And they want you to add missing support? I think I have to help with this. So now I have looked at the java and python implementations, a little bit of the api documentation, and I now have a project placeholder to support C# from various Code Coverage xml output formats to post that data up to coveralls, at &lt;a href=&#34;https://github.com/csmacnz/coveralls.net&#34;&gt;coveralls.net on github&lt;/a&gt;.  I&amp;rsquo;ve even got my badges, for coveralls.io ready to go.&lt;/p&gt;
&lt;p&gt;So fastforward another week and I have a working prototype done. It&amp;rsquo;s even showing &lt;a href=&#34;https://coveralls.io/r/csMACnz/coveralls.net&#34;&gt;coverage on coveralls.io&lt;/a&gt;, supporting opencover xml format.&lt;/p&gt;
&lt;p&gt;So whats left now? finish building it to be reusable by my other projects, publish it to nuget and chocolately and wherever else I need to, and start getting people integrating it into their .Net builds. Probably build out other C# coverage report formats as well, so your not forced to use opencover. Wish me luck!&lt;/p&gt;
&lt;h6 id=&#34;small-side-note&#34;&gt;small side note&lt;/h6&gt;
&lt;p&gt;So I also found this other continuous code quality metrics thing for python called &lt;a href=&#34;https://landscape.io/&#34;&gt;landscape.io&lt;/a&gt;. When will we see this type of thing available for .Net as well? Turns out right now. Check out
&lt;a href=&#34;https://scan.coverity.com/projects/3696&#34;&gt;Coverity Scan Static Analysis&lt;/a&gt; (&lt;a href=&#34;https://scan.coverity.com/projects/3696&#34;&gt;mine&lt;/a&gt; needs you to create an account to use, but no permissions to view.)&lt;/p&gt;
&lt;p&gt;And two more for fun: &lt;a href=&#34;https://waffle.io/&#34;&gt;waffle.io&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://readthedocs.org/&#34;&gt;readthedocs.org&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>