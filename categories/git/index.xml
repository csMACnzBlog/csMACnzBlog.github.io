<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/git/</link>
    <description>Recent content in git on csMACnz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Sun, 05 Jun 2016 21:32:04 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fork off with your branches</title>
      <link>https://csmacnzblog.github.io/post/fork-off-with-your-branches/</link>
      <pubDate>Sun, 05 Jun 2016 21:32:04 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/fork-off-with-your-branches/</guid>
      <description>The nice thing about git is that branches are cheap and you can create many and varied branches for every little fix, format or feature. The annoying thing about GitHub is that every user creates many many many branches.
One of my pet peeves at the moment is a large number of branches on our upstream repository. That is, the shared common one we all fork from and Pull Request into.</description>
    </item>
    
    <item>
      <title>On gitversioning subdirectories</title>
      <link>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</link>
      <pubDate>Sun, 22 Nov 2015 15:05:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</guid>
      <description>We have lots of NuGet. Every time we build, we publish a new version. but every build does not change the source code of the code in that version. wouldn&amp;rsquo;t it be nice if we could detect that the subdirectory hasn&amp;rsquo;t changed and so has the same version it did last time we built it?
We use gitversion, so we already have a way to get the version for the current commit.</description>
    </item>
    
    <item>
      <title>Code Camp Christchurch - An Introduction to git</title>
      <link>https://csmacnzblog.github.io/post/code-camp-christchurch-an-introduction-to-git/</link>
      <pubDate>Fri, 15 May 2015 13:59:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/code-camp-christchurch-an-introduction-to-git/</guid>
      <description>I presented today at Code Camp Christchurch on git. I will try and translate some of the topics into new tutorial posts over the coming weeks, but you can find a rough transcript of the content from my presentation in my post git is not scary.
I refered to some links in my talk, and wanted to make them available here. So on with it then.
The Git Parable This is a nice little story that steps through the process of producing a full featured source control system that resembles git.</description>
    </item>
    
    <item>
      <title>Git is not scary</title>
      <link>https://csmacnzblog.github.io/post/git-is-not-scary/</link>
      <pubDate>Sun, 10 May 2015 18:14:28 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/git-is-not-scary/</guid>
      <description>It may not be simple, it may not be easy, but git is not scary. Now, I&amp;rsquo;ve been using git for less than a year now, professionally. I had dabbled in git personal projects for the year before that. My primary Source control had mostly been TFS (Team Foundation Server), and I had been exposed to subversion on a major project before too. Full disclosure, I&amp;rsquo;ve never used Visual SourceSafe. Just Sayin&#39;.</description>
    </item>
    
    <item>
      <title>git lol</title>
      <link>https://csmacnzblog.github.io/post/git-lol/</link>
      <pubDate>Wed, 22 Apr 2015 07:33:49 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/git-lol/</guid>
      <description>I saw Scott Chacon use git lol on an introduction to git video, and thought it looked like a neat alias idea. I did some searching and came across this blog post by Franz Bettag, in which he creates an alias for git log called git lol. I&amp;rsquo;m not sure if he came up with it, but it looks like Scott Chacon is the person from whom people seem to learn about it.</description>
    </item>
    
    <item>
      <title>Aliasing your &#39;git status&#39;</title>
      <link>https://csmacnzblog.github.io/post/aliasing-your-git-status/</link>
      <pubDate>Sat, 18 Apr 2015 13:26:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/aliasing-your-git-status/</guid>
      <description>Anyone else have the bad habit of typing in git statsu or git stauts? Or maybe you just end up typing git status all the time at the command line, and wonder if there was a better way. Well, there is.
Aliases Most command-line shells have the concept of aliasing. This means you type one thing, and it represents an alternative way to call another command, maybe with implicit parameters baked in that you use all the time.</description>
    </item>
    
    <item>
      <title>TeamCity, GitHub and Pull Requests</title>
      <link>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</link>
      <pubDate>Mon, 06 Apr 2015 12:29:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</guid>
      <description>I&amp;rsquo;ve been having fun setting up TeamCity builds, specifically trying to run a static analysis build that shows it&amp;rsquo;s results on a pull request. This lead me to discover some issues with the built-in TeamCity support.
It is really easy to set up a build task that runs PowerShell as its build step. With this I can arbitrarily run code and get static analysis checking. It is even easy to push the results back to GitHub using the api (see the Statuses api on GitHub for just how easy).</description>
    </item>
    
    <item>
      <title>Git Housekeeping</title>
      <link>https://csmacnzblog.github.io/post/git-housekeeping/</link>
      <pubDate>Mon, 29 Dec 2014 09:36:45 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/git-housekeeping/</guid>
      <description>Those who are using Git but still new to the concept will no doubt have realised that files are treated differently to normal source control tools, and that they transition between different known states, according to git. I am going to try and explain these states, and give commands on how to transition between them.
I needed these commands recently because I wanted to reset my changes and hadn&amp;rsquo;t really thought about how these states affect what it is that gets &amp;lsquo;reset&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>
