<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/categories/terraform/</link>
    <description>Recent content in Terraform on csMACnz&#39;s Blog</description>
    <image>
      <url>https://csmacnzblog.github.io/favicon.png</url>
      <title>csMACnz&#39;s Blog</title>
      <link>https://csmacnzblog.github.io</link>
    </image>
    <ttl>1440</ttl>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Tue, 13 Jul 2021 19:18:43 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/categories/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Failed to query available provider packages - Terraform NewRelic Provider :facepalm:</title>
      <link>https://csmacnzblog.github.io/post/terraform-newrelic-provider-facepalm/</link>
      <pubDate>Tue, 13 Jul 2021 19:18:43 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/terraform-newrelic-provider-facepalm/</guid>
      <description><p>Recently I tried upgrading from Terraform 0.12 to 1.0.1. I think the key here is leaving 0.12.</p>
<p>Anyway, there was a breaking change in 0.13 around how providers worked, and we got this cryptic error.</p>
<p>(Caveat: I don&rsquo;t actually know how much of this has to do with a newrelic provider update as well or instead, but was what we got the week of 2021/07/12.)</p>
<pre><code class="language-powershell">Initializing provider plugins...
- Reusing previous version of newrelic/newrelic from the dependency lock file
- Finding latest version of hashicorp/newrelic...
- Using previously-installed newrelic/newrelic v2.23.0
‚ï∑
‚îÇ Error: Failed to query available provider packages
‚îÇ
‚îÇ Could not retrieve the list of available versions for provider hashicorp/newrelic: provider registry registry.terraform.io does not have a provider 
‚îÇ named registry.terraform.io/hashicorp/newrelic
‚îÇ
‚îÇ Did you intend to use newrelic/newrelic? If so, you must specify that source address in each module which requires that provider. To see which      
‚îÇ modules are currently depending on hashicorp/newrelic, run the following command:
‚îÇ     terraform providers
|
</code></pre>
<p>So I&rsquo;d already added this at my root module but this error still occurred.</p>
<pre><code class="language-hcl">terraform {
  required_providers {
    newrelic = {
      source  = &quot;newrelic/newrelic&quot;
      version = &quot;2.23.0&quot;
    }
  }
}

provider &quot;newrelic&quot; {
  api_key    = &quot;12345&quot;
  account_id = &quot;12345&quot;
}
</code></pre>
<p>It took a while to find the right docs to understand this one.</p>
<p>The key message from above is the <code>You must specify that source address in each module which requires that provider.</code> message. We are using modules, and the breaking change to 0.13 and above is that modules can specify <code>required_providers</code>.</p>
<p>What they don&rsquo;t tell you clearly, is that when trying to resolve &ldquo;newrelic&rdquo; provider by default, it will look for &ldquo;hashicorp/newrelic&rdquo;. However the actual provider source is &ldquo;newrelic/newrelic&rdquo;. So to make this work the optional <code>required_providers</code> is actually mandatory, and actually needs the <code>source  = &quot;newrelic/newrelic&quot;</code> property.</p>
<pre><code class="language-hcl">terraform {
  required_providers {
    newrelic = {
      source = &quot;newrelic/newrelic&quot;
    }
  }
}
</code></pre>
<p>Adding this to every module that uses newrelic solved the problem.</p>
<p>If you are doing this, you might also need to migrate your state over as well. Do this after running <code>terraform init</code> from inside your config folder. This migrates the data in your state file to correctly map to the new provider.</p>
<pre><code class="language-powershell">terraform state replace-provider newrelic newrelic/newrelic
</code></pre>
<p>More details here: <a href="https://www.terraform.io/docs/cli/commands/state/replace-provider.html">https://www.terraform.io/docs/cli/commands/state/replace-provider.html</a></p>
<p>If you do migrate 0.12 to 0.13 first, instead of stupidly jumping straight to 1.0.1, you can follow a more useful migration guide and the <code>0.13upgrade</code> command instead. ü§¶‚Äç‚ôÇÔ∏è</p>
<p><a href="https://www.terraform.io/docs/cli/commands/0.13upgrade.html">https://www.terraform.io/docs/cli/commands/0.13upgrade.html</a>
<a href="https://www.terraform.io/upgrade-guides/0-13.html">https://www.terraform.io/upgrade-guides/0-13.html</a></p>
</description>
    </item>
    
  </channel>
</rss>