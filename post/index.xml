<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on csMACnz&#39;s Blog</title>
    <link>https://csmacnzblog.github.io/post/</link>
    <description>Recent content in Posts on csMACnz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-nz</language>
    <lastBuildDate>Tue, 13 Jul 2021 19:18:43 +0000</lastBuildDate><atom:link href="https://csmacnzblog.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Failed to query available provider packages - Terraform NewRelic Provider :facepalm:</title>
      <link>https://csmacnzblog.github.io/post/terraform-newrelic-provider-facepalm/</link>
      <pubDate>Tue, 13 Jul 2021 19:18:43 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/terraform-newrelic-provider-facepalm/</guid>
      <description>Recently I tried upgrading from Terraform 0.12 to 1.0.1. I think the key here is leaving 0.12.
Anyway, there was a breaking change in 0.13 around how providers worked, and we got this cryptic error.
(Caveat: I don&amp;rsquo;t actually know how much of this has to do with a newrelic provider update as well or instead, but was what we got the week of 2021/07/12.)
Initializing provider plugins...- Reusing previous version of newrelic/newrelic from the dependency lock file- Finding latest version of hashicorp/newrelic.</description>
    </item>
    
    <item>
      <title>Kotlin, TeamCity and reflection</title>
      <link>https://csmacnzblog.github.io/post/kotlin-teamcity-and-reflection/</link>
      <pubDate>Tue, 11 May 2021 17:42:06 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/kotlin-teamcity-and-reflection/</guid>
      <description>I&amp;rsquo;ve been getting stuck into upskilling in Kotlin. Mostly for TeamCity build automation and trying to produce quality tested code in a space where automation was retrofitted in.
Today&amp;rsquo;s fun little problem was the error message:
 Runtime error RootProjectId: kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns$3[92]: java.lang.AssertionError: Built-in class kotlin.Any is not found
 The canonical stack overflow question that (at the time of writing this) had no answer: https://stackoverflow.com/questions/67199546/why-am-i-getting-java-lang-assertionerror-built-in-class-kotlin-any-is-not-fou
The repro was the simplest piece of code in the end.</description>
    </item>
    
    <item>
      <title>Bluetooth Devices keep disconnecting</title>
      <link>https://csmacnzblog.github.io/post/bluetooth-devices-keep-disconnecting/</link>
      <pubDate>Mon, 09 Nov 2020 07:11:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/bluetooth-devices-keep-disconnecting/</guid>
      <description>It all started when I installed Windows Update 20H2 in October 2020.
I&amp;rsquo;ve had a stable machine (HP ZBook laptop for reference) for months and months with the same Bluetooth hardware, no issues. But that fateful day I installed the 20H2 update from Microsoft, everything changed.
Suddenly I was having disconnect issues. I have a Bluetooth keyboard and Bluetooth mouse connected (I think they are both low energy?) And I found that one of them would reconnect, and the other wouldn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Nullable and notnull Serialisation Properties</title>
      <link>https://csmacnzblog.github.io/post/nullable-and-notnull-serialisation-properties/</link>
      <pubDate>Sun, 26 Jul 2020 02:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/nullable-and-notnull-serialisation-properties/</guid>
      <description>The C# 8 feature Nullable has been well received by myself and others into our workflows and has improved code bases immensely. However, there is one niggly workaround that I&amp;rsquo;m not a fan of, and that is = default!;
problem definition // This class is used to serialise/deserialise a payload from a serverpublic class MyContractDTO{public string Value { get; set; } = default!;} My codebase is now littered with this code hack to get it to compile because nullable says it can&amp;rsquo;t guarantee that this property is not null.</description>
    </item>
    
    <item>
      <title>We are all 10x engineers, but I don&#39;t think it means what you think it means</title>
      <link>https://csmacnzblog.github.io/post/we-are-all-10x/</link>
      <pubDate>Mon, 15 Jul 2019 09:50:55 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/we-are-all-10x/</guid>
      <description>If your reading this blog, and used twitter in the past few days, you have probably already seen this tweet, or some of the replies coming through from the community:
As a developer who tries to be good at their job, I have thoughts on this. As a Human, I like to be heard. (Note that being heard is not the same thing as being agreed with, or being right.) So here I am giving my opinion on this idea of a 10x developer, and specifically these &amp;ldquo;10 signs&amp;rdquo; put up online.</description>
    </item>
    
    <item>
      <title>Microsoft and dotnet: 4 is the new 9</title>
      <link>https://csmacnzblog.github.io/post/untitled-4/</link>
      <pubDate>Mon, 08 Jul 2019 22:54:03 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/untitled-4/</guid>
      <description>Dotnet core 3.0 is about to drop, but we already have lots of information about vnext specifically that it&amp;rsquo;s going to be dotnet 5.
It wasn&amp;rsquo;t that many years ago that Microsoft seemingly forgot how to.count. Windows 8 with all its modern UI was succeeded with not Windows 9, but instead a version named Windows 10. Not sure what the aversion to the number 9 was, buta they are up to their old tricks again with .</description>
    </item>
    
    <item>
      <title>(Untitled)</title>
      <link>https://csmacnzblog.github.io/post/untitled-2/</link>
      <pubDate>Mon, 08 Jul 2019 22:44:20 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/untitled-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Snuffleupagus-Oriented Programming</title>
      <link>https://csmacnzblog.github.io/post/snuffleupagus-oriented-programming/</link>
      <pubDate>Mon, 08 Jul 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/snuffleupagus-oriented-programming/</guid>
      <description>Sometimes naming something is the best way to start talking about a topic that lots of people do but don&amp;rsquo;t realise or haven&amp;rsquo;t pulled together as a concept. This is one of those ideas that finally has a good (?) name.
How do you build out a new API? Here we are meaning programming contracts effectively. You can hack away until you have something functional, and then start consuming it. Better yet, build it out as code to do a job and then ship it to someone else to try and use.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: Pattern matching</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-pattern-matching/</link>
      <pubDate>Mon, 01 Jul 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-pattern-matching/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Pattern matching is a powerful feature that has been unlocked against various language constructs in C#.</description>
    </item>
    
    <item>
      <title>Looking Back on C#: async and await</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp-async-await/</link>
      <pubDate>Mon, 24 Jun 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp-async-await/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Multithreaded programming has always been a difficult thing to get your head around, and there are many pitfalls easily stumbled into.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: refs enhancements</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-refs/</link>
      <pubDate>Mon, 17 Jun 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-refs/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
We talked about the out variables in the previous post in the series, but there are a few other enhancements related to ref as well.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: Out variables</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-out-variables/</link>
      <pubDate>Mon, 10 Jun 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-out-variables/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
What are out parameters? Sometimes you want a method to pass back a value by reference.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: Local functions</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-local-functions/</link>
      <pubDate>Mon, 03 Jun 2019 10:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-local-functions/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Lambdas - a recap All the way back in C# 3 we were given lambdas.</description>
    </item>
    
    <item>
      <title>µCon 2019 - Day 3</title>
      <link>https://csmacnzblog.github.io/post/mucon-2019-part2/</link>
      <pubDate>Fri, 31 May 2019 10:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/mucon-2019-part2/</guid>
      <description>Good morning day 3. So much to absorb already from Day 1 and 2 but it isn&amp;rsquo;t over yet.
This morning&amp;rsquo;s Keynote &amp;ldquo;Crossing the River by Feeling the Stones&amp;rdquo; from Simon Wardley is a must see. This was a very educational look at the value of maps, and the importance of knowing the landscape, looking at Evolutionary Flow and not just Process Flow when looking at optimisations. I would recommend the talk from Susanne Kaiser &amp;ldquo;Preparing for a future Microservices journey&amp;rdquo; from the day before as a nice companion to this keynote talk, as she used &amp;ldquo;Wardley Maps&amp;rdquo; to specifically look at the evolution towards microservices.</description>
    </item>
    
    <item>
      <title>µCon 2019 - Day 1 &amp; 2</title>
      <link>https://csmacnzblog.github.io/post/mucon-2019-part1/</link>
      <pubDate>Thu, 30 May 2019 20:05:21 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/mucon-2019-part1/</guid>
      <description>After a restful night at a London hotel (I learned my lesson from the last time I came in for a London conference) coffee and breakfast at the Business Design Centre in London, muCon 2019 kicks off. muCon (or µCon) is a Conference on Microservices, DDD &amp;amp; Software Architecture. From what I gather, this year for the first time it is an amalgamation of a DDD and Microservices conference into one.</description>
    </item>
    
    <item>
      <title>Programming Heroes: A new hope</title>
      <link>https://csmacnzblog.github.io/post/untitled-3/</link>
      <pubDate>Tue, 28 May 2019 21:33:36 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/untitled-3/</guid>
      <description>Notes:
Programming Heroes toxic yes, beneficial maybe? https://hackernoon.com/thoughts-on-software-development-heroes-5ec656c2e31a
https://dev.to/davidk01/never-be-a-hero-coder-52n http://gamesfromwithin.com/cowboy-coders-and-the-hero-programmer-culture
https://www.i-programmer.info/news/231-methodology/11257-do-we-need-software-heroes.html
Based on Michael Feathers keynote #muCon https://skillsmatter.com/skillscasts/13288-keynote-socio-technique-and-structure
Power of two two person team
Mobbing producing a hypermind and a authentic hero
Open source has heroes most of the engagement
20% do 80% of the work.
Cohesion between collaborating heroes is powerful
Code looks like it is written by one person.
At a recent conference the topic of the Hero Developer came up.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: throw expressions</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-throw-expressions/</link>
      <pubDate>Mon, 27 May 2019 10:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-throw-expressions/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Throwing Exceptions is both a blessing and a curse in C#. You can throw from anywhere to unwind the stack.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: More Expression body members</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-more-expression-body-members/</link>
      <pubDate>Mon, 20 May 2019 10:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-more-expression-body-members/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
We already had a look at how we can use Expression body members in C# 6.</description>
    </item>
    
    <item>
      <title>Looking Back on C# 7: Tuples upgraded</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp7-tuples-upgraded/</link>
      <pubDate>Sun, 19 May 2019 19:54:45 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp7-tuples-upgraded/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Tuples deconstruction discards https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#tuples https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#discards</description>
    </item>
    
    <item>
      <title>Looking Back on C# 6: Expression body members</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp6-expression-body-members/</link>
      <pubDate>Sun, 12 May 2019 22:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp6-expression-body-members/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Method blocks are one of the most fundamental components of C#. They get used for all class methods, for property getters and setters, constructors, destructors, so many places.</description>
    </item>
    
    <item>
      <title>Looking back on C# 6: Initializers</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp6-initializers/</link>
      <pubDate>Mon, 29 Apr 2019 11:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp6-initializers/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
Initializers have had a few upgrades since the early C# days. But before we look at more recent changes, we will review what came before.</description>
    </item>
    
    <item>
      <title>Looking back on C# 6: String interpolation</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp6-string-interpolation/</link>
      <pubDate>Sun, 14 Apr 2019 11:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp6-string-interpolation/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
String Interpolation is a great feature that I now use everywhere I can (Except logging - see below).</description>
    </item>
    
    <item>
      <title>Looking back on C# 6: Static Imports</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp6-static-imports/</link>
      <pubDate>Mon, 08 Apr 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp6-static-imports/</guid>
      <description>With C# 8 on our doorstep, I wanted to go through some of the C# 6 and 7 language features I have been using that you may have missed.
Another feature that I avoided for a while, but have really starting to use a lot more. using brings a namespace into the scope of the file. This allows us to write Console.WriteLine(&amp;quot;Hi&amp;quot;); instead of System.Console.WriteLine(&amp;quot;Hi&amp;quot;);. But with this language feature, we introduce a Static class into scope.</description>
    </item>
    
    <item>
      <title>Looking back on C# 6: nameof expressions</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp6-nameof-expressions/</link>
      <pubDate>Tue, 02 Apr 2019 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp6-nameof-expressions/</guid>
      <description>With C# 8 on our doorstep, I wanted to go through some of the C# 6 and 7 language features I have been using that you may have missed.
This is such a small feature but I use it everywhere.
The nameof expression keyword acts like a function, that takes any reference as its argument, and evaluates to the string representing the name of the reference, rather than it&amp;rsquo;s evaluated value.</description>
    </item>
    
    <item>
      <title>Silverlight 6 with .NetStandard support Announced</title>
      <link>https://csmacnzblog.github.io/post/silverlight-6-with-netstandard-support-announced/</link>
      <pubDate>Sun, 31 Mar 2019 16:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/silverlight-6-with-netstandard-support-announced/</guid>
      <description>Microsoft announced today that they are working on Silverlight 6, which is to include .NetStandard support up to at least NetStandard 2.0.
Development Manager Loof Lirpa on the Silverlight Development team has confirmed that there is a Silverlight version 6 in the works, and it will be compatible with the .Net Standard and the dotnet cli.
&amp;ldquo;We have been working hard behind the scenes for a while, because it is important for us to get this right and be as compatible as possible, we didn&amp;rsquo;t want to announce anything until we were certain it was going to be possible to do.</description>
    </item>
    
    <item>
      <title>Looking back on C# 6: Elvis Operator</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-csharp6-elvis-operator/</link>
      <pubDate>Mon, 25 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-csharp6-elvis-operator/</guid>
      <description>With C# 8 on our doorstep, I wanted to go through some of the C# 6 and 7 language features I have been using that you may have missed.
We start with the Elvis Operator from C# 6. The real name is Null Conditional Operator I believe, but I prefer the former.
It is always good to first look at what the simplest, common code scenario the feature addresses.
var widget = service.</description>
    </item>
    
    <item>
      <title>Looking back on C#</title>
      <link>https://csmacnzblog.github.io/post/looking-back-on-c/</link>
      <pubDate>Mon, 18 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-back-on-c/</guid>
      <description>With C# 8 on our doorstep, I figure it is a good time to reflect on recent additions to the language that have come before. There are some great improvements you may have missed, some that I really enjoy using, and some I consider have reached canonical usage status that I think are all worth some reflection.
It was back in 2016 with the release of Roslyn, a complete rewrite C# compiler platform written in C# that we started to see a ramp up on language features not seen since .</description>
    </item>
    
    <item>
      <title>So you wanna be a Rockstar (Developer)?</title>
      <link>https://csmacnzblog.github.io/post/so-you-wanna-be-a-rockstar-developer/</link>
      <pubDate>Tue, 05 Feb 2019 20:13:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/so-you-wanna-be-a-rockstar-developer/</guid>
      <description>Have you been to see rock bands perform live? There are a lot of subtleties to their performance that you might not have noticed. And it is relevant to software…</description>
    </item>
    
    <item>
      <title>Looking forward to dotnet in 2019</title>
      <link>https://csmacnzblog.github.io/post/looking-forward-to-dotnet-in-2019/</link>
      <pubDate>Thu, 17 Jan 2019 20:40:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/looking-forward-to-dotnet-in-2019/</guid>
      <description>It&amp;rsquo;s a new year, and we already have a bunch of dotnet releases to look forward to, thanks to the open development processes that Microsoft is using these days with dotnet.
The three big releases I am looking forward to are C# 8 and .Net Core 3.0, and a NetStandard2.1. (Not to mention there is a .Net Framework 4.8 as well. But I&amp;rsquo;ve moved on.)
C# 8 It feels like we&amp;rsquo;ve been talking about C# 8 for a while, with 7.</description>
    </item>
    
    <item>
      <title>Sharing audio to Google Hangouts (or Meets)</title>
      <link>https://csmacnzblog.github.io/post/sharing-audio-to-google-hangouts-or-meets/</link>
      <pubDate>Mon, 15 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/sharing-audio-to-google-hangouts-or-meets/</guid>
      <description>I work remotely, and I&amp;rsquo;ve used a bunch of solutions over the last few years to be able to route audio from my computer into a meeting call in Google Hangouts. From hardware to virtual audio cable software, every solution has been finicky at best, and wrecks day-to-day audio and video at worst, and requires a bunch of mucking around every time I want to enable or disable the setup.</description>
    </item>
    
    <item>
      <title>Speciality NuGet Packing on .Net Core</title>
      <link>https://csmacnzblog.github.io/post/speciality-nuget-packing/</link>
      <pubDate>Mon, 08 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/speciality-nuget-packing/</guid>
      <description>I recently wrote about NuGet packing on linux specifically, and want to continue the theme with other things you can do with NuGet packaging.
As a quick recap you can use a .Net Core *.csproj as a wrapper around a *.nuspec file and use dotnet pack to pack it, cross-platform, without needing nuget.exe.
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;&amp;lt;PropertyGroup&amp;gt;&amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;&amp;lt;NuspecFile&amp;gt;mynewapp.nuspec&amp;lt;/NuspecFile&amp;gt;&amp;lt;GeneratePackageOnBuild&amp;gt;true&amp;lt;/GeneratePackageOnBuild&amp;gt;&amp;lt;SkipCompilerExecution&amp;gt;true&amp;lt;/SkipCompilerExecution&amp;gt;&amp;lt;CopyBuildOutputToOutputDirectory&amp;gt;false&amp;lt;/CopyBuildOutputToOutputDirectory&amp;gt;&amp;lt;/PropertyGroup&amp;gt;&amp;lt;/Project&amp;gt; (See the other article for more detailed analysis of these properties.</description>
    </item>
    
    <item>
      <title>NuGet Packing on Linux</title>
      <link>https://csmacnzblog.github.io/post/nuget-packing-on-linux/</link>
      <pubDate>Mon, 01 Oct 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/nuget-packing-on-linux/</guid>
      <description>For anyone who has been cutting-edge with .Net for a while will know that the nuget.exe runs under mono. And that you can use nuget.exe to package *.nuspec files into *.nupkg files.
Anyone who has been doing dotnet cross-platform will also know that you can use dotnet pack on both Windows and Linux to package your project into a NuGet package containing the dll. It even does references and multi-targeting correctly out of the box.</description>
    </item>
    
    <item>
      <title>My first DDD Event and how I made the decision to work a 16 hour Saturday</title>
      <link>https://csmacnzblog.github.io/post/my-first-ddd-event-and-how-i-made-the-decision-to-work-a-16-hour-day/</link>
      <pubDate>Mon, 24 Sep 2018 02:36:52 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/my-first-ddd-event-and-how-i-made-the-decision-to-work-a-16-hour-day/</guid>
      <description>In my hand, I have a couple of train tickets. The reservations indicate that I left the house at 5 am Saturday morning to make the first train from Birmingham to Cambridge, and wouldn&amp;rsquo;t get home again until 9 pm. And that is exactly what I did.
I&amp;rsquo;ve been making more of an effort this year to attend conferences and community events. I had a blast at NDC Oslo 2018 (1,2) meeting some amazing people, off the back of that I heard about Birmingham Alt.</description>
    </item>
    
    <item>
      <title>HostBuild your dotnet Consoles like you WebHostBuild your web apps.</title>
      <link>https://csmacnzblog.github.io/post/hostbuild-your-dotnet-consoles-like-you-webhostbuild-your-web-apps/</link>
      <pubDate>Mon, 17 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hostbuild-your-dotnet-consoles-like-you-webhostbuild-your-web-apps/</guid>
      <description>I wrote a while back on getting your Windows Services building with .Net Core which is a nice way to use the new SDK pipeline but still host on Windows without much fuss.
But what If you like the approach but want to run on Linux?
Well after some stumbling around in the dotnet core docs, I found information about HostBuilder, which looks a lot like the WebHostBuilder and WebHost that we use with AspNetCore.</description>
    </item>
    
    <item>
      <title>Agile Jogging to complement your Sprinting</title>
      <link>https://csmacnzblog.github.io/post/agile-jogging-to-compliment-your-sprinting/</link>
      <pubDate>Mon, 10 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/agile-jogging-to-compliment-your-sprinting/</guid>
      <description>Way back when I was first introduced to everything agile from Jezz Santos, we complemented the terminology of our &amp;ldquo;sprint&amp;rdquo; with that of a &amp;ldquo;jog&amp;rdquo;.
Sprinting Sprinting or sprints are the idea of a (usually) timeboxed length of real-world time (5 days, 3 weeks etc) that produces a cadence of focused teamwork on a particular selection of stories. Usually, these stories are prioritised, and the team should be working on the top-most unfinished work.</description>
    </item>
    
    <item>
      <title>Time-tracking Analysis - Parsing and Presenting a Heatmap of your working week from Toggl Data</title>
      <link>https://csmacnzblog.github.io/post/time-tracking-analysis/</link>
      <pubDate>Mon, 27 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/time-tracking-analysis/</guid>
      <description>As a remote worker, I need to keep myself honest. This is as much &amp;ldquo;Make sure I do my hours&amp;rdquo; as it is &amp;ldquo;Don&amp;rsquo;t overwork!&amp;rdquo;. Anyone who has worked from home or remotely for a period of time understands what I mean completely.
To monitor this, I use Toggl. Toggl is time-tracking as a service, which includes cloud tracking data storage, annotating time against projects and clients, and Client applications for most if not all platforms including web, mobile and desktop.</description>
    </item>
    
    <item>
      <title>Method calls. Less chaining, more Functional.</title>
      <link>https://csmacnzblog.github.io/post/method-calls-less-chaining-more-functional/</link>
      <pubDate>Mon, 20 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/method-calls-less-chaining-more-functional/</guid>
      <description>It came up in a recent code review that we had a method that did stuff, then called a method that did stuff, that then called a method. Eventually, the last method in the chain bubbled back up and out.
This is a bit of an anti-pattern in my eyes. Essentially you are coupling these methods (functions) together.
As a quick diversion, let&amp;rsquo;s look at the idea of layered architecture.</description>
    </item>
    
    <item>
      <title>A fake FileSystem abstraction you can trust.</title>
      <link>https://csmacnzblog.github.io/post/untitled/</link>
      <pubDate>Tue, 14 Aug 2018 21:56:35 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/untitled/</guid>
      <description>https://github.com/aspnet/FileSystem</description>
    </item>
    
    <item>
      <title>Retry Policies with Polly</title>
      <link>https://csmacnzblog.github.io/post/retry-policies-with-polly/</link>
      <pubDate>Mon, 13 Aug 2018 04:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/retry-policies-with-polly/</guid>
      <description>I originally set out to write about Polly. Then I started reading their documentation. I quickly realised that I couldn&amp;rsquo;t write anything as detailed and accurate as they already had available. So instead, I&amp;rsquo;m going to give more of a super high level, with links to relevant reading.
You can find their Documentation on their Github at github.com/App-vNext/Polly, as well as plenty more resources at www.thepollyproject.org/.
The elevator pitch is this:</description>
    </item>
    
    <item>
      <title>Beefeater - Guard your methods&#39; Ins and Outs.</title>
      <link>https://csmacnzblog.github.io/post/beefeater-guards-your/</link>
      <pubDate>Mon, 06 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/beefeater-guards-your/</guid>
      <description>A little while back I started paying attention to Rust and got all inspired to have a bit of that it C#. The result was this library I called Beefeater.
This library contains helpers to add semantics to the optionality of your parameters and results from method calls. I built it on NetStandard1.0 for maximum compatibility.
Some of this will soon become obsolete with C# 8 features such as the C# 8 nullable reference types, but much of it gives you the power you need right now.</description>
    </item>
    
    <item>
      <title>A Little Town called Milton</title>
      <link>https://csmacnzblog.github.io/post/a-little-town-called-milton/</link>
      <pubDate>Mon, 23 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-little-town-called-milton/</guid>
      <description>There is a small town in the South Island of New Zealand called Milton. The main road runs right through the town in one side and out the other. Its a nice enough place to stop on a road trip.
There is a unique feature to this main road in Miton, you see. When you get to the middle of the town and the road has a massive kink in it.</description>
    </item>
    
    <item>
      <title>.Net on Docker - What&#39;s in my Dockerfile? Tips and Tricks</title>
      <link>https://csmacnzblog.github.io/post/dotnet-docker-tips-and-tricks/</link>
      <pubDate>Mon, 16 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnet-docker-tips-and-tricks/</guid>
      <description>I&amp;rsquo;ve started getting into building Docker Containers as deployment packages. These are some learnings that I want to share, hopefully helping countless others with a better build, test and debug cycle with .Net on Docker with Visual Studio.
Start with the defaults Use the built-in tools in Visual Studio to docker-ify and docker-compose your projects. The defaults all work, and provide a nice reference implementation of how to do things.</description>
    </item>
    
    <item>
      <title>More .Net on Docker - AspNet Core Debugging Tips and Tricks</title>
      <link>https://csmacnzblog.github.io/post/dotnet-docker-aspnetcore-tips-and-tricks/</link>
      <pubDate>Sun, 15 Jul 2018 22:02:30 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnet-docker-aspnetcore-tips-and-tricks/</guid>
      <description>Last time we covered some basics of Dockerfile with a console application. Let&amp;rsquo;s continue our journal with AspNet Core.
Develop-time dependencies We are using React and the .Net WebPack Hot Reloader. While at development time this requires node, at runtime it doesn&amp;rsquo;t. Here is a couple of fun facts about Visual Studio debugging I combine in an interesting way.
Visual Studio Run (F5) on a docker-compose builds locally. This means it doesn&amp;rsquo;t actually use or do what your Dockerfile says.</description>
    </item>
    
    <item>
      <title>Some cool tricks with your Windows Shells</title>
      <link>https://csmacnzblog.github.io/post/some-cool-tricks-with-your-windows-shell/</link>
      <pubDate>Mon, 09 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/some-cool-tricks-with-your-windows-shell/</guid>
      <description>I&amp;rsquo;ve been getting more and more back to the command line, doing more with PowerShell and even Bash scripting on Docker and WSL (Windows Subsystem for Linux). There are a few of the tricks I have learned recently that help me every day.
F8 searches history! That&amp;rsquo;s right! When you type into the command line (this work in cmd and PowerShell) and then press F8, it will do a back-in-time search for a historical command that begins with what you typed.</description>
    </item>
    
    <item>
      <title>Geeking out on a Saturday at the Birmingham Alt.Net Unconference</title>
      <link>https://csmacnzblog.github.io/post/geeking-out-at-altnetbrum-2018/</link>
      <pubDate>Tue, 03 Jul 2018 04:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/geeking-out-at-altnetbrum-2018/</guid>
      <description>Unlike some unfortunate people who found out on the day and missed out, I had the opportunity to attend the Alt.Net Unconference in Birmingham this Saturday.
Now I know some of you think Saturday Conferences are too far outside your work time. But hear me out on this first. This is a free event, which means no expensive expense approval. It included lunch so no personal cost apart from transport to get there.</description>
    </item>
    
    <item>
      <title>Reference Data and Microservices</title>
      <link>https://csmacnzblog.github.io/post/reference-data-and-microservices/</link>
      <pubDate>Mon, 02 Jul 2018 21:01:10 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/reference-data-and-microservices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Clean Startup in your AspNetCore</title>
      <link>https://csmacnzblog.github.io/post/clean-startup-in-your-aspnetcore/</link>
      <pubDate>Mon, 02 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/clean-startup-in-your-aspnetcore/</guid>
      <description>I want to talk about this point made about Keeping a Clean Startup.cs in Asp.Net Core by K. Scott Alan. Mostly I want to agree and elaborate on it.
(Warning! I used the British English customised below. If this doesn&amp;rsquo;t match your sensibilities, just use customize instead.)
The Idea The basic idea is that we have a Startup.cs file, where we configure our application. This becomes a dumping ground for all sorts of configuration of both services, and pipeline if we let it.</description>
    </item>
    
    <item>
      <title>NDC Oslo 2018 - Day 2 &amp; 3</title>
      <link>https://csmacnzblog.github.io/post/ndc-oslo-2018-part2/</link>
      <pubDate>Sun, 24 Jun 2018 20:16:48 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ndc-oslo-2018-part2/</guid>
      <description>Day 2 Day 2 of NDC Oslo. A bit less productive than the first. I needed a longer lunch and missed a couple of slots, but made the most of talking to some of the speakers for a bit over the break. There is so much going on that it just felt necessary.
Never-the-less, I did still pack in a few good choices throughout the day.
Rise of the Tech Influencer First up was Michelle Sandford with her talk &amp;ldquo;Rise of the Tech Influencer - Small steps you can take to increase your reach&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>NDC Oslo 2018 - Day 1</title>
      <link>https://csmacnzblog.github.io/post/ndc-oslo-2018/</link>
      <pubDate>Wed, 13 Jun 2018 06:34:40 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ndc-oslo-2018/</guid>
      <description>With 10 streams on, there has been a lot to choose from at NDC in Oslo. But as day one ends, I&amp;rsquo;ve now voted with my feet. And since I can&amp;rsquo;t be in two places at once (though the overflow does technically make this possible) these are the decisions I made, and a few takeaways from each.
Day 1 I was pretty much jumping from one session to the next today but had a little time to walk the stalls first.</description>
    </item>
    
    <item>
      <title>Coveralls.Net 1.0.0 Release</title>
      <link>https://csmacnzblog.github.io/post/coveralls-net-1-0-0-release/</link>
      <pubDate>Mon, 04 Jun 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/coveralls-net-1-0-0-release/</guid>
      <description>Christmas 2014. I was building out projects on GitHub in open source. The obsession with open source even went on to spawn a Series of Blog Posts. Each tool or library I was building lead onto another tool or library to make the build pipeline, or development process better. Often putting down one project while I sorted out another one first. This has continued at a slow pace for the last 3 years.</description>
    </item>
    
    <item>
      <title>AWS Summit London 2018</title>
      <link>https://csmacnzblog.github.io/post/aws-summit-london-2018/</link>
      <pubDate>Sun, 20 May 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/aws-summit-london-2018/</guid>
      <description>I recently attended the AWS Summit in London and thought I would give some notes on the event from my perspective.
As a developer working for a company that uses AWS, there was plenty to get out of an event such as this, and the free attendance makes a great business case to get the time to go.
I really enjoyed the schedule of talks that I attended, and the keynote was a good overview of the state of things as AWS, with some exciting insight into partners in Automotive, and Healthcare.</description>
    </item>
    
    <item>
      <title>Develop your Rust in Docker</title>
      <link>https://csmacnzblog.github.io/post/develop-your-rust-in-docker/</link>
      <pubDate>Mon, 14 May 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/develop-your-rust-in-docker/</guid>
      <description>I decided a while ago that the next language I would try to learn is Rust. I don&amp;rsquo;t want to go too much into Rust other than to repeat its own summary:
 Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. &amp;ndash; https://www.rust-lang.org/
 But like all things, there are bits that need to be installed. I want to get started, I don&amp;rsquo;t want to muck around with installers.</description>
    </item>
    
    <item>
      <title>You can&#39;t out-exercise a bad diet</title>
      <link>https://csmacnzblog.github.io/post/you-cant-out-exercise-a-bad-diet/</link>
      <pubDate>Thu, 10 May 2018 20:41:55 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/you-cant-out-exercise-a-bad-diet/</guid>
      <description>I heard a great quote yesterday:
 You can&amp;rsquo;t out-exercise a bad diet
 And this is a great metaphor for technical debt.
We all agree that you need to pay down your tech debt in your software. And it&amp;rsquo;s great to commit to addressing a little technical debt during each sprint. The problem is that this is the exercise. And if you still have a bad diet of cutting corners and taking shortcuts, your stuck with an overweight system (a monolith, if you like).</description>
    </item>
    
    <item>
      <title>Code Katas</title>
      <link>https://csmacnzblog.github.io/post/code-kata/</link>
      <pubDate>Mon, 07 May 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/code-kata/</guid>
      <description>Our team recently went through the Bowling Game Kata (as seen on Clean Code) from Uncle Bob. Here are some interesting learnings and takeaways from the session that I picked up on.
Practice makes perfect The only way to get good at something is to practice. The concept of doing a Code Kata is to practice the art of TDD and Red-Green-Refactor. By practising, it will become easier to do against real code in real scenarios.</description>
    </item>
    
    <item>
      <title>Automated OCD with Stylecop</title>
      <link>https://csmacnzblog.github.io/post/automated-ocd-with-stylecop/</link>
      <pubDate>Mon, 30 Apr 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/automated-ocd-with-stylecop/</guid>
      <description>I never really got into Stylecop or FXCop. I did make use of some of the Resharper autoformatting configuration, and static analysis features, and have in the past automated and configured this.
But since starting to use Visual Studio Code, I have been looking for more and more ways to get the benefits of the Visual Studio Gui tools, but as command-line alternatives. This leads me to the Roslyn Analyzers.</description>
    </item>
    
    <item>
      <title>A Windows Service using netcoreapp on dotnet</title>
      <link>https://csmacnzblog.github.io/post/a-windows-service-on-dotnet/</link>
      <pubDate>Sun, 22 Apr 2018 07:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-windows-service-on-dotnet/</guid>
      <description>I wrote Building a Windows Service with .Net Core and had a bit of flack because I was only using .Net core to build a .Net 4.5.2 application. Technically the title is still valid, it was a windows service, and I built it using .Net Core tools. But since people came looking for the answer to actually hosting a NetCoreApp application as a Windows Service, I thought it best to follow up with that article as well.</description>
    </item>
    
    <item>
      <title>Developers are not lazy, they&#39;re efficient</title>
      <link>https://csmacnzblog.github.io/post/developers-are-not-lazy-theyre-efficient/</link>
      <pubDate>Mon, 09 Apr 2018 08:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/developers-are-not-lazy-theyre-efficient/</guid>
      <description>Well, mostly.
I hear the excuse a lot from developers, &amp;ldquo;Oh, because I am lazy&amp;rdquo;. This seems to be some sort of way of justifying the way we do some of our development, automation scripts, bash power-user commands like grep and awk, even writing a program to solve something we could do ourselves manually. Unfortunately, even copy+paste development. We don&amp;rsquo;t do ourselves any favours using the term lazy though, since not all words can have their meanings reversed, unlike literally.</description>
    </item>
    
    <item>
      <title>My C# naming conventions</title>
      <link>https://csmacnzblog.github.io/post/my-c-naming-conventions/</link>
      <pubDate>Sun, 25 Mar 2018 05:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/my-c-naming-conventions/</guid>
      <description>I have opinions!
I&amp;rsquo;ve been meaning to write this article for a while. I have various opinions about code formatting, and they may or may not conform to the norm. Also, they change occasionally as and when I get a good explanation of why a different way is better, or when I discover a technique while learning a language that I just have to incorporate into my C# code.
Firstly, let&amp;rsquo;s just say that there are Guidelines and Opinions.</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - Self-contained Applications</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-self-contained-applications/</link>
      <pubDate>Sun, 18 Mar 2018 20:18:22 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-self-contained-applications/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications &amp;lt;=(We are here)  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
The Problem Distributing the fruits of your labour is one of the rewarding parts of building any kind of software.</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - Publishing Portable Applications</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-publishing-portable-applications/</link>
      <pubDate>Sun, 11 Mar 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-publishing-portable-applications/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications &amp;lt;=(We are here) Self-contained Applications  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
We can now take everything we have learned and start publishing our applications. Luckily, there is a command for that too.</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - Multi-targeting</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-multi-targeting/</link>
      <pubDate>Tue, 06 Mar 2018 22:35:53 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-multi-targeting/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting &amp;lt;=(We are here) Publishing Portable Applications Self-contained Applications  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
Last time we learned how to package our libraries as NuGet packages. But it was only targeting netstandard2.</description>
    </item>
    
    <item>
      <title>On Screen Shortcut keys for presentations and recordings</title>
      <link>https://csmacnzblog.github.io/post/on-screen-shortcut-keys-for-presentations-and-recordings/</link>
      <pubDate>Mon, 26 Feb 2018 04:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-screen-shortcut-keys-for-presentations-and-recordings/</guid>
      <description>I used this tool a while ago that let me show on-screen what keyboard shortcuts and combinations I was pressing so that others could see them, especially during presentations, and on video recordings.
But for the life of me today, on a new machine, I couldn&amp;rsquo;t remember what it was called. Searching didn&amp;rsquo;t help. For future reference, I will remember I wrote this article, and hopefully, others searching for &amp;ldquo;show shortcut keys on screen&amp;rdquo; will find this article as well.</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - NuGet</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-nuget/</link>
      <pubDate>Mon, 19 Feb 2018 04:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-nuget/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet &amp;lt;=(We are here) Multi-targeting Publishing Portable Applications Self-contained Applications  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
Let&amp;rsquo;s set aside Application packing for later, and focus our attention on NuGet.
Our Demo library Again we will quickly whip up a library to use:</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - Testing</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-testing/</link>
      <pubDate>Mon, 12 Feb 2018 04:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-testing/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing &amp;lt;=(We are here) NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
The Setup Like before, we will rattle off a new project.
mkdir MyTestApplicationRepo cd MyTestApplicationRepo mkdir MyLib cd MyLib dotnet new classlib cd .</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - Using Multiple Projects</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-using-multiple-projects/</link>
      <pubDate>Mon, 05 Feb 2018 04:45:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-using-multiple-projects/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects &amp;lt;=(We are here) Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
We know how to create new projects, we know how to build and run our application and we know (roughly) what the content in the csproj file means.</description>
    </item>
    
    <item>
      <title>A PowerShell Watch Command</title>
      <link>https://csmacnzblog.github.io/post/a-powershell-watch-command/</link>
      <pubDate>Tue, 30 Jan 2018 19:36:30 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-powershell-watch-command/</guid>
      <description>I use dotnet-watch a bunch and have used a version via grunt/gulp a little in the past as well.
In front of me, I had some TypeScript, tsc and an app.ts file. I wanted to watch it and trigger tsc automatically. But there was no csproj, no NuGet, and no npm in sight.
I went searching far and wide for solutions, and some clever people have some insight to add to the quest:</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - What&#39;s in the box</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-whats-in-the-box/</link>
      <pubDate>Mon, 22 Jan 2018 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-whats-in-the-box/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started What&amp;rsquo;s in the box &amp;lt;=(We are here) Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  (At the time of writing, 2.1.4. I use windows, you don&amp;rsquo;t have to!)
Last time we created a new application. Once with dotnet CLI and once with Visual Studio.</description>
    </item>
    
    <item>
      <title>.Net Core Series - Self-contained Applications</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-self-contained-applications/</link>
      <pubDate>Sun, 21 Jan 2018 20:05:52 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-self-contained-applications/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications &amp;lt;=(We are here)  This was meant to be an article on Self-contained applications in .Net Core 1, with project.json files.
Since .Net Core 1.1 switched to csproj, and .Net Core 2.0 introduces some huge improvements, I&amp;rsquo;ve decided to not write this article.</description>
    </item>
    
    <item>
      <title>Subcutaneous Testing against React &#43; .Net Applications with Storyteller - A Reply</title>
      <link>https://csmacnzblog.github.io/post/storytellerreduxsample/</link>
      <pubDate>Thu, 28 Dec 2017 23:41:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/storytellerreduxsample/</guid>
      <description>A week or two ago Jeremy Miller posted an article Subcutaneous Testing against React + .Net Applications. It outlined some early R&amp;amp;D on the new Storyteller.Redux, which allows you to run Storyteller tests against Redux stores using WebSockets.
While he had a proven way of communicating between React/Redux and Storyteller, It was lacking the all-important AspNetCore integration that was just casually mentioned. So I figured I would pull on that thread and see what is actually possible.</description>
    </item>
    
    <item>
      <title>Pro-tips for working in PowerShell</title>
      <link>https://csmacnzblog.github.io/post/pro-tips-for-working-in-powershell/</link>
      <pubDate>Tue, 12 Dec 2017 00:15:58 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/pro-tips-for-working-in-powershell/</guid>
      <description>utilies, scripts, configs I use
*visual studio devenv (link to existing article?)
functions gs watch (link) sudo bash
powershell gallery ps-get post-git post-dotnet https://www.powershellgallery.com/packages/posh-dotnet/1.2.3
git-lol (link)</description>
    </item>
    
    <item>
      <title>TypeScript over JavaScript, Always</title>
      <link>https://csmacnzblog.github.io/post/typescript-over-javascript-always/</link>
      <pubDate>Mon, 11 Dec 2017 22:49:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/typescript-over-javascript-always/</guid>
      <description>Prelude As a developer, JavaScript is inevitable. Unless you&amp;rsquo;re a dba or mobile app developer I suppose, but I digress.
When working with JavaScript applications, you certainly have to be using a build pipeline of some description. If you are not at least bundling and minifying you are certainly doing it wrong, and if that process isn&amp;rsquo;t automated somehow then your not doing it right.
Using new language features makes JavaScript palatable, so you are already using ES6 (or newer) features, and because compatibility on the web is hard, you have a transpiler step already to convert all your code to ES5 (or ES3, I don&amp;rsquo;t judge compatibility decisions).</description>
    </item>
    
    <item>
      <title>There can be only one return; 0 RLY?</title>
      <link>https://csmacnzblog.github.io/post/there-can-be-only-one-return/</link>
      <pubDate>Sun, 03 Dec 2017 22:15:55 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/there-can-be-only-one-return/</guid>
      <description>My opinions and choices on style of coding evolves and changes over time. By blogging about this now, I can refer back later when I change my mind. I can also elicit the opinions of others to influence me to change my ways if I happen to be wrong and not know it yet.
Lets talk about returns. There is an opinion that methods should only have a single return. This gives them a precise flow of control, and forces you to essentially either process data through a few processes and return the final result (which can be very functional) or store a result variable and correctly populate it within control flow logic (&amp;lsquo;if&amp;rsquo;/&amp;lsquo;else&amp;rsquo;, &amp;lsquo;switch&amp;rsquo;, &amp;lsquo;while&amp;rsquo; commands, for instance).</description>
    </item>
    
    <item>
      <title>In C#, your structs should be immutable.</title>
      <link>https://csmacnzblog.github.io/post/in-c-your-structs-should-be-immutable/</link>
      <pubDate>Sun, 26 Nov 2017 20:35:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/in-c-your-structs-should-be-immutable/</guid>
      <description>I wrote some code. It was simple code. I had a collection. I iterated over the collection and updated the values. I did this several times in an outer loop.
The code didn&amp;rsquo;t work.
Why didn&amp;rsquo;t it work? My collection was an array of Structs. When I pulled an item out in the for loop, it was copied. When I updated the copy, the changes went away at the end of the scope.</description>
    </item>
    
    <item>
      <title>.Net Core SDK 2.* Series - Getting Started</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore2-getting-started/</link>
      <pubDate>Mon, 20 Nov 2017 07:00:25 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore2-getting-started/</guid>
      <description>This is a series on the latest 2.* .Net Core bits, Following on from the original .Net Core Series
 Getting Started &amp;lt;=(We are here) What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  (At the time of writing, 2.0.3. I use windows, you don&amp;rsquo;t have to!)
Introduction I originally wrote a series on .Net Core when it was still a 1.* version. Now there is a 2.</description>
    </item>
    
    <item>
      <title>Couldn&#39;t Connect. Get Connected to your Wireless Display Adapter</title>
      <link>https://csmacnzblog.github.io/post/fix-wireless-display-connection/</link>
      <pubDate>Mon, 13 Nov 2017 06:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/fix-wireless-display-connection/</guid>
      <description>I was having trouble with connecting my laptops to a remote display with Miricast.
Specifically, I was trying to use the functionality built into Windows 10 to connect to a wireless display and had a Microsoft Wireless Display Adapter V2 plugged into my TV.
It would say Connecting to ... for a while and then fail with a message Couldn&#39;t connect.
I managed to find a support article from Microsoft, which has some great troubleshooting steps to follow.</description>
    </item>
    
    <item>
      <title>A story about an intern and dotnet</title>
      <link>https://csmacnzblog.github.io/post/a-story-about-an-intern-and-dotnet/</link>
      <pubDate>Mon, 06 Nov 2017 06:30:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-story-about-an-intern-and-dotnet/</guid>
      <description>Jack the intern was thrilled. He sat at his computer in front of a cmd prompt ready to learn.
&amp;ldquo;It&amp;rsquo;s your first day, and we need you to work out all this new dotnet command line stuff&amp;rdquo;. Jack recalled the words of his new Boss, Joe. &amp;ldquo;We are far too busy to figure this out, we have code to ship, but this should keep you busy for a few months while we ship the Widgets 2.</description>
    </item>
    
    <item>
      <title>Ghost Blog Upgrade to 1.* (1.8.4 in fact)</title>
      <link>https://csmacnzblog.github.io/post/ghost-blog-upgrade-to-v1/</link>
      <pubDate>Sat, 09 Sep 2017 10:07:33 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ghost-blog-upgrade-to-v1/</guid>
      <description>While I&amp;rsquo;ve been hapily blogging away on Ghost version 0.8.0 hosted on azure (very much ad-hoc hosting approach) the Ghost Blog team made the leap to a 1.* version, with a very breaking changes along the way, especially to their upgrade process. They&amp;rsquo;ve made it all the way to 1.8.4 and so I figured it was time I upgraded.
This was going to be a nightmare if it wasn&amp;rsquo;t for two things.</description>
    </item>
    
    <item>
      <title>dotnet build, targeting full .Net 4.5.1 on nanoserver docker</title>
      <link>https://csmacnzblog.github.io/post/dotnet-build-targeting-full-net451-on-nanoserver-2/</link>
      <pubDate>Fri, 31 Mar 2017 01:18:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnet-build-targeting-full-net451-on-nanoserver-2/</guid>
      <description>I have been struggling to get dotnet build to work on nanoserver via docker. I had already given up on git, because I can perform git tasks outside the container first.
Basically I was trying this:
docker run -v &amp;quot;$(pwd):C:/work&amp;quot; -w C:/work -it --rm microsoft/dotnet:1.1.1-sdk-nanoserver powershell build.ps1 This maps the current repository directory to a folder called work on the container, and runs the build inside it. This approach means:</description>
    </item>
    
    <item>
      <title>Migrating onto dotnet tools 1.0.0</title>
      <link>https://csmacnzblog.github.io/post/migrating-onto-dotnet-tools-1-0-0/</link>
      <pubDate>Sat, 11 Mar 2017 23:52:52 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/migrating-onto-dotnet-tools-1-0-0/</guid>
      <description>Since Visual Studio 2017 is out, and we have a 1.0.0 tools release for .Net Core, I&amp;rsquo;m going to try and migrate a simple project from the pre-release tooling, onto the new tooling.
The biggest difference is that instead of using a project.json file, the new tooling now uses a .csproj file instead. It will take a few more posts to go into the differences and re-learn how this works, so for now lets just get something building.</description>
    </item>
    
    <item>
      <title>Building a Windows Service with .Net Core</title>
      <link>https://csmacnzblog.github.io/post/building-a-windows-service-with-net-core/</link>
      <pubDate>Sun, 12 Feb 2017 04:29:12 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/building-a-windows-service-with-net-core/</guid>
      <description>While we are all wanting to get onto the new hotness that is .Net Core cross platform applications, the reality is that our servers are running windows, and we use a combination of Scheduled tasks, IIS, and Windows Services to host our applications. Most .Net Core applications are console apps that work well for Scheduled tasks, and there are tonnes of tutorials for hosting in IIS. I&amp;rsquo;ve got for you here the how-to for Windows Services.</description>
    </item>
    
    <item>
      <title>.Net Core Series - Publishing Portable Applications</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-publishing-portable-applications/</link>
      <pubDate>Tue, 07 Feb 2017 04:30:50 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-publishing-portable-applications/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications &amp;lt;=(We are here) Self-contained Applications  We can now take everything we have learned and start publishing our applications. Luckily, there is a command for that too.
The Setup I don&amp;rsquo;t know why I bother saying anything here, this is pretty straight-forward by now.</description>
    </item>
    
    <item>
      <title>Microsoft &amp; Google, Android Wear support is missing</title>
      <link>https://csmacnzblog.github.io/post/microsoft-google-android-wear-support-is-missing/</link>
      <pubDate>Thu, 19 Jan 2017 23:50:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/microsoft-google-android-wear-support-is-missing/</guid>
      <description>Ok, so I know I am in the minority as a Windows Phone user, but sometimes I just get frustrated and I wish Microsoft at least tried to achieve parity with their platforms, and not leave it to others who just won&amp;rsquo;t bother.
I have a really nice Acer Liquid Jade Primo Windows 10 mobile phone. Continuum, Hexa Core Processor, 3GB memory, nice 5.5&amp;quot; screen, great camera.
Yesterday I went shopping and saw the really nice Fossil Q watches.</description>
    </item>
    
    <item>
      <title>How to Constructors</title>
      <link>https://csmacnzblog.github.io/post/how-to-constructors/</link>
      <pubDate>Mon, 16 Jan 2017 02:44:32 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/how-to-constructors/</guid>
      <description>Constructors for services are a really handy way to pass in configuration, variation and dependencies. Here are some ways I have learned to use Constructors and some ideas on testing.
What shouldn&amp;rsquo;t be in a Constructor Execution. Any complex execution of code should not be in a constructor. This includes asynchronous method calls (which either has to block synchronously, or runs off to nowhere), web requests, and complex calculations.
Why? Why not run your whole application in a constructor?</description>
    </item>
    
    <item>
      <title>FiraCode, my new favorite VS Code dev font</title>
      <link>https://csmacnzblog.github.io/post/firacode-my-new-favorite-vscode-font/</link>
      <pubDate>Tue, 03 Jan 2017 21:26:42 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/firacode-my-new-favorite-vscode-font/</guid>
      <description>I&amp;rsquo;ve been using Fira Code as my new dev font. And I&amp;rsquo;m sticking with it.
FiraCode is available on GitHub, and is a based on the concept of ligatures, targeting at programming symbols.
In short, ligatures are where two or more actual characters are printed as a single printable character, originating in print where certain letters in certain orders would have a special stamp to use in the printing press to represent them.</description>
    </item>
    
    <item>
      <title>&#34;failed to peek context header from STDIN&#34; and how to fix</title>
      <link>https://csmacnzblog.github.io/post/failed-to-peek-context-header-from-stdin-and-how-to-fix/</link>
      <pubDate>Tue, 29 Nov 2016 04:12:29 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/failed-to-peek-context-header-from-stdin-and-how-to-fix/</guid>
      <description>The docker guidance says you can run docker build piping the dockerfile:
#On linux$ docker build - &amp;lt; Dockerfile and on Windows it says to do this:
#PowerShellGet-Content Dockerfile | docker build - Nice. But I&amp;rsquo;ve been getting this error all day&amp;hellip;
&amp;gt; Get-Content Dockerfile | docker build -unable to prepare context: failed to peek context header from STDIN: Incorrect function. WAT After much pain, I figured out the error is because I was running inside conemu.</description>
    </item>
    
    <item>
      <title>Learnin&#39; in the machine</title>
      <link>https://csmacnzblog.github.io/post/learnin-in-the-machine/</link>
      <pubDate>Thu, 17 Nov 2016 09:15:53 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/learnin-in-the-machine/</guid>
      <description>&amp;ldquo;We go live in 6 hours! What&amp;rsquo;s the problem?&amp;rdquo;
Jerry Gainsborough had just burst into the development team&amp;rsquo;s pod area and started shouting at the very tired, very forlorn looking group of developers. This project was coming to an end after a long 18 months of hard work, many hours of overtime and a lot of Red Bull.
John, the team lead, was about to open his mouth when Jerry, the Projects major stakeholder and self-appointed project manager started on again.</description>
    </item>
    
    <item>
      <title>Podcasts, I&#39;m addicted.</title>
      <link>https://csmacnzblog.github.io/post/podcasts-im-addicted/</link>
      <pubDate>Mon, 07 Nov 2016 03:14:31 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/podcasts-im-addicted/</guid>
      <description>My name is Mark and I am a podcast addict.
TL;DR I listen to many podcasts. If you want some suggestions for weekly/monthly listening I recommend:
 Hanselminutes .Net Rocks! Yet Another Podcast Merge Conflict Accidental Tech Podcast The Incomparable  And some podcasts that have finished
 This Developer&amp;rsquo;s Life (27 episodes) We&amp;rsquo;re Alive (A story about zombies) (48 episodes)  It begins Over the last few years, my daily commute consisted of a 10-40 minute walk each way (depending on where we moved to).</description>
    </item>
    
    <item>
      <title>.Net core tests not showing up in VS? Here&#39;s the trick...</title>
      <link>https://csmacnzblog.github.io/post/net-core-tests-not-showing/</link>
      <pubDate>Tue, 01 Nov 2016 01:38:35 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-core-tests-not-showing/</guid>
      <description>I&amp;rsquo;ve been using VS Code. Great tool. But it means my tests are running through a command line runner. Essentially I use dotnet test, which is nice since I am targeting multiple platforms (.Net 4.5, 4.5.2, 4.6 &amp;amp; netcoreapp1.0).
But when I open my test project in Visual Studio, I have 0 tests. Thats zero, none, not a single one.
Turns out, if you want tests to show up in Visual Studio you have to make sure that in your project.</description>
    </item>
    
    <item>
      <title>dotnet &#43; nunit3 &#43; TeamCity success</title>
      <link>https://csmacnzblog.github.io/post/dotnet/</link>
      <pubDate>Tue, 25 Oct 2016 00:54:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnet/</guid>
      <description>The new .Net Core CLI has the ability to use xunit or nunit. Which is great. For running tests locally.
I use TeamCity, so I like to see test results showing up, track testing count over time etc. There is a built in way to import xml reports which supports junit (which is xunit-compatible) and nunit. But choosing nunit means support for the nunit2 xml format. And guess what? The new .</description>
    </item>
    
    <item>
      <title>New Projects - Consolable, ConcurrentConsole &amp; t4tinytypes</title>
      <link>https://csmacnzblog.github.io/post/new-projects-consolable-concurrentconsole-t4tinytypes/</link>
      <pubDate>Sun, 14 Aug 2016 21:51:20 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/new-projects-consolable-concurrentconsole-t4tinytypes/</guid>
      <description>I&amp;rsquo;ve been working on some new projects, so thought I would do a quick elevator pitch for each.
Consolable I was having an issue with environment variables as arguments, and with PowerShell replacing &amp;quot;text&amp;quot; with text (stripping double-quotes) and how these interacted with my command line arguments. Especially when the environment variable was empty, the error messages were just not clear enough.
So I&amp;rsquo;m building yet another CLI parsing library, but with a primary focus on error messaging.</description>
    </item>
    
    <item>
      <title>.Net Core Series - Multi-targeting</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-multi-targeting/</link>
      <pubDate>Tue, 09 Aug 2016 00:33:21 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-multi-targeting/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting &amp;lt;=(We are here) Publishing Portable Applications Self-contained Applications  Last time we learned how to package our libraries as NuGet packages. But it was only targeting netstandard1.6, the new netstandard target framework moniker.
Light reading I recommend you go off and read through some of the architecture documents and NuGet pages to get a feel for the various targets that can or should be used.</description>
    </item>
    
    <item>
      <title>.Net Core Series - NuGet</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-nuget/</link>
      <pubDate>Mon, 01 Aug 2016 08:18:33 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-nuget/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet &amp;lt;=(We are here) Multi-targeting Publishing Portable Applications Self-contained Applications  Let&amp;rsquo;s set aside Application packing for later, and focus our attention on NuGet.
Our Demo library Again we will quickly whip up a library to use:
mkdir mynewpackagecd mynewpackagedotnet new -t Libdotnet restoredotnet build Some quick touch-ups to make it more interesting.</description>
    </item>
    
    <item>
      <title>.Net Core Series - Testing</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-testing/</link>
      <pubDate>Mon, 25 Jul 2016 07:14:36 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-testing/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects Testing &amp;lt;=(We are here) NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  We want to be able to test our application code that we build. Let&amp;rsquo;s get started.
The Setup Like before, we will rattle off a new project.
mkdir testdemocd testdemomkdir mylibcd mylibdotnet new -t Lib Recall that we can use the -t argument switch to generate different project types.</description>
    </item>
    
    <item>
      <title>Experimenting with global.json</title>
      <link>https://csmacnzblog.github.io/post/experimenting-with-global-json/</link>
      <pubDate>Thu, 21 Jul 2016 06:47:17 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/experimenting-with-global-json/</guid>
      <description>While working on my .Net Core Series I noticed that Visual Studio was adding a global.json file to the root of my project, and liked to put src and test in there. I thought I would investigate what it actually does.
I noticed that if all my project folders were next to each other it didn&amp;rsquo;t matter. So here is my experiment, and the results.
global.json The default file I end up with in Visual Studio looks roughly like this:</description>
    </item>
    
    <item>
      <title>.Net Core Series - Using Multiple Projects</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-using-multiple-projects/</link>
      <pubDate>Mon, 18 Jul 2016 06:32:53 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-using-multiple-projects/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box Using Multiple Projects &amp;lt;=(We are here) Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  We know how to create new projects, we know how to build and run our application and we know (roughly) what the content in the project.json file means. But most projects tend to either require multiple projects or are actually libraries.</description>
    </item>
    
    <item>
      <title>.Net Core Series - What&#39;s in the box</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-whats-in-the-box/</link>
      <pubDate>Sat, 09 Jul 2016 02:50:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-whats-in-the-box/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started What&amp;rsquo;s in the box &amp;lt;=(We are here) Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  Last time we created a new application. Once with dotnet CLI and once with Visual Studio.
We will have a look at some of the files and their contents. Since I assume the Program.</description>
    </item>
    
    <item>
      <title>Visual Studio Code with C# and dotnet</title>
      <link>https://csmacnzblog.github.io/post/visual-studio-code-with-csharp-and-dotnet/</link>
      <pubDate>Sun, 03 Jul 2016 04:34:30 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/visual-studio-code-with-csharp-and-dotnet/</guid>
      <description>Getting Started with Visual Studio Code? Me too. Let&amp;rsquo;s see what it takes to get going. This is a bit of a companion piece alongside my .Net Core Series I am writing at the moment. Hopefully as well as .Net Core, I will have a play with writing TypeScript, Rust and maybe C++ inside Visual Studio Code. I might have to focus on the interface in another article as well.</description>
    </item>
    
    <item>
      <title>.Net Core Series - Getting Started</title>
      <link>https://csmacnzblog.github.io/post/dotnetcore-getting-started/</link>
      <pubDate>Thu, 30 Jun 2016 09:25:34 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dotnetcore-getting-started/</guid>
      <description>This is a series on the .Net Core 1.0 bits. Looking for .Net Core 2 Series?
 Getting Started &amp;lt;=(We are here) What&amp;rsquo;s in the box Using Multiple Projects Testing NuGet Multi-targeting Publishing Portable Applications Self-contained Applications  We finally got some finalised bits in a release this week. So here is a bit of a guide to get you started. I will (probably) be only showing instructions from on Windows, but all dotnet CLI instructions should be cross platform.</description>
    </item>
    
    <item>
      <title>Form posts with PowerShell</title>
      <link>https://csmacnzblog.github.io/post/formpost-with-powershell/</link>
      <pubDate>Mon, 27 Jun 2016 03:57:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/formpost-with-powershell/</guid>
      <description>This article is based on an answer found and updated on StackOverflow.
I&amp;rsquo;f you have used PowerShell for much at all, you are probably familiar with Invoke-WebRequest. But did you know you can carry around a session and have it automatically add and update cookies for you?
The Scenario I had an API I wanted to consume, but it was a private one. That is, It was designed and used for a SPA app to consume.</description>
    </item>
    
    <item>
      <title>Retries with Polly</title>
      <link>https://csmacnzblog.github.io/post/retries-with-polly/</link>
      <pubDate>Fri, 24 Jun 2016 02:01:49 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/retries-with-polly/</guid>
      <description>Just a quick results of an investigation of our PrintService v-next logs that keep happening (can&amp;rsquo;t find queue) Why? - Because I was worried that I was using Polly Retries wrong, to know for next time (SPOILERS - I was)
What: We have retries over checking the queue (and other aws commands. We see many errors of WebException: The remote server returned an error: (504) Gateway Timeout happening quite a lot.</description>
    </item>
    
    <item>
      <title>Property Objects</title>
      <link>https://csmacnzblog.github.io/post/property-objects/</link>
      <pubDate>Thu, 23 Jun 2016 21:32:05 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/property-objects/</guid>
      <description>I should blog about my valuetypes for view models.
http://nichesoftware.co.nz/2015/12/20/property-enhancements.html</description>
    </item>
    
    <item>
      <title>using over lambda</title>
      <link>https://csmacnzblog.github.io/post/using-over-lambda/</link>
      <pubDate>Wed, 22 Jun 2016 05:59:37 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/using-over-lambda/</guid>
      <description>Let&amp;rsquo;s talk about these two patterns:
public void GetSomethingDone() { var metaData = &amp;quot;Some Sort of Metadata for timing&amp;quot;; var result = DoTimedWork(metaData, () =&amp;gt; { MyResult resul; //Some other complicated work/method-call happens here return result; }); //either uses or returns result here } public T DoTimedWork(string metaData, Func&amp;lt;T&amp;gt; action) { //Setup code probably here using(var timer = new MetricsTimer(metaData)) { return action(); } }  And another:
public void GetSomethingDone() { var metaData = &amp;quot;Some Sort of Metadata for timing&amp;quot;; MyResult result; Using(DoTimedWork(metaData)) { //Some other complicated work/method-call happens here result = complicatedWorkResultSomehow; }; //either uses or returns result here } public IDisposable DoTimedWork(string metaData) { //Setup code probably here return new MetricsTimer(metaData); }  Let&amp;rsquo;s discuss shall we?</description>
    </item>
    
    <item>
      <title>Test Behaviour, Not Implementation</title>
      <link>https://csmacnzblog.github.io/post/test-behaviour-not-implementation/</link>
      <pubDate>Tue, 21 Jun 2016 21:58:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/test-behaviour-not-implementation/</guid>
      <description>http://googletesting.blogspot.co.uk/2013/08/testing-on-toilet-test-behavior-not.html http://www.barbarianmeetscoding.com/blog/2014/06/15/thoughts-on-unit-testing-and-tdd-test-behavior/ https://teamgaslight.com/blog/testing-behavior-vs-testing-implementation http://stackoverflow.com/questions/856115/should-one-test-internal-implementation-or-only-test-public-behaviour http://stackoverflow.com/questions/4497305/unit-testing-with-mocks-test-behaviour-not-implementation http://jacopretorius.net/2012/01/test-behavior-not-implementation.html http://codebetter.com/iancooper/2011/10/06/avoid-testing-implementation-details-test-behaviours/</description>
    </item>
    
    <item>
      <title>The art of the brick 2016</title>
      <link>https://csmacnzblog.github.io/post/the-art-of-the-brick-2016/</link>
      <pubDate>Mon, 13 Jun 2016 22:03:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/the-art-of-the-brick-2016/</guid>
      <description>In 2008 (8 years ago!) I blogged about the art of the brick. I didn&amp;rsquo;t join twitter until 2010, but if I had this probably wouldn&amp;rsquo;t have been a blog post, really, since I can fit it in a quote right here:
 Check out this guy who makes art out of Lego bricks. Very talented and very creative, a must see. His name is Nathan Sawaya and he is a 33 year old New York artist.</description>
    </item>
    
    <item>
      <title>threadstatic</title>
      <link>https://csmacnzblog.github.io/post/threadstatic/</link>
      <pubDate>Tue, 07 Jun 2016 02:15:56 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/threadstatic/</guid>
      <description>http://stackoverflow.com/questions/18086235/initializing-threadstatic-field-still-causes-nullreferenceexception
 Do not specify initial values for fields marked with ThreadStaticAttribute, because such initialization occurs only once, when the class constructor executes, and therefore affects only one thread.
  The ThreadStatic is initialized in the static constructor - which only executes once. So only the very first thread is assigned &amp;ldquo;the foo string&amp;rdquo; when the static constructor executes. When accessed in all subsequent threads, Foo is left at the uninitalized null value.</description>
    </item>
    
    <item>
      <title>Fork off with your branches</title>
      <link>https://csmacnzblog.github.io/post/fork-off-with-your-branches/</link>
      <pubDate>Sun, 05 Jun 2016 21:32:04 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/fork-off-with-your-branches/</guid>
      <description>The nice thing about git is that branches are cheap and you can create many and varied branches for every little fix, format or feature. The annoying thing about GitHub is that every user creates many many many branches.
One of my pet peeves at the moment is a large number of branches on our upstream repository. That is, the shared common one we all fork from and Pull Request into.</description>
    </item>
    
    <item>
      <title>Manage your hosts entries better</title>
      <link>https://csmacnzblog.github.io/post/manage-your-hosts-entries-better/</link>
      <pubDate>Tue, 31 May 2016 04:25:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/manage-your-hosts-entries-better/</guid>
      <description>If you are working with a lot of sites in IIS then you will be familiar with the hosts file on your computer. %SystemRoot%\System32\drivers\etc\hosts, usually found in C:\Windows\System32\drivers\etc\hosts. This file acts as a DNS mapping table used by your computer. As a developer, you will often want to tinker with this table. For example, you have a site running locally and you want to run it with a URL in your browser.</description>
    </item>
    
    <item>
      <title>You can&#39;t handle the jandal</title>
      <link>https://csmacnzblog.github.io/post/you-cant-handle-the-jandal/</link>
      <pubDate>Thu, 26 May 2016 23:36:57 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/you-cant-handle-the-jandal/</guid>
      <description>Notes: https://bytes.com/topic/c-sharp/answers/490586-exceptions-cannot-caught http://www.abhisheksur.com/2011/01/internals-of-exception-handling.html http://stackoverflow.com/questions/3341534/partly-crashing-application-how-can-i-catch-uncatchable-exceptions http://forums.asp.net/t/1975718.aspx?Exception+not+caught+using+catch+block https://netfxharmonics.com/2006/10/uncatchable-exception
public class JandleException : Exception { [DebuggerHidden] public JandleException() { Environment.FailFast(&amp;quot;You can&#39;t handle the jandal!&amp;quot;, this); } }  public class Program { static void Main(string[] args) { try { doStuff(); } catch { Console.WriteLine(&amp;quot;Exception Caught&amp;quot;); } finally { Console.WriteLine(&amp;quot;Finally was executed&amp;quot;); } Console.ReadKey(); } private static void doStuff() { throw new JandleException(); } }  </description>
    </item>
    
    <item>
      <title>A couple of debugging tips</title>
      <link>https://csmacnzblog.github.io/post/a-couple-of-debugging-tips/</link>
      <pubDate>Mon, 23 May 2016 04:33:09 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/a-couple-of-debugging-tips/</guid>
      <description>I had an idea of something I wanted to post, but a quick google turns up I posted it 6 months ago, so here are some debugging tips.
Console Break So you are writing a console app? Cool. Want to see the output? Of course, you do. But when you run it, the app pops up then disappears really quickly right? No? Have you a break point in the last line?</description>
    </item>
    
    <item>
      <title>On Passion in IT</title>
      <link>https://csmacnzblog.github.io/post/on-passion-in-it/</link>
      <pubDate>Mon, 16 May 2016 04:37:44 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-passion-in-it/</guid>
      <description>Some people have a natural gift to be able to learn. They can pick up any subject and by putting in hard work they can get good at it. Some people have a natural interest in a specific subject, and these people enjoy the process of learning and don’t find the work being put in as ‘hard’, but instead it is fun. They too will get good, or even great at this subject.</description>
    </item>
    
    <item>
      <title>Treat Warnings As Errors with this one weird PowerShell Script...</title>
      <link>https://csmacnzblog.github.io/post/treat-warnings-as-errors-with-this-one-weird-powershell-script/</link>
      <pubDate>Mon, 09 May 2016 08:30:59 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/treat-warnings-as-errors-with-this-one-weird-powershell-script/</guid>
      <description>There is this great feature in Visual Studio that lets you really dial up the quality of your code. It has been there forever it seems, but very few people use it.
The compiler spits out errors, which stop your app compiling. You fix your errors and move on. But the compiler also spits out a lot of warnings too. And many of these are to do with the quality of your code, and possible code errors you have introduced that could cause you issues later on.</description>
    </item>
    
    <item>
      <title>Guess Who&#39;s Back?</title>
      <link>https://csmacnzblog.github.io/post/guess-whos-back/</link>
      <pubDate>Wed, 04 May 2016 08:08:43 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/guess-whos-back/</guid>
      <description>Ok, so not that big a leap, it&amp;rsquo;s just me. Six months later me. Moved to the UK me.
I&amp;rsquo;ve taken the plunge and moved away from Windy Wellington in little old New Zealand to a place in the UK called Milton Keynes. Famous for wide streets, round-a-bouts and concrete cows.
Why Milton Keynes? Because Xero has an office here of course! Aside from being cheaper to live here than in the middle of London, it&amp;rsquo;s also a bit quieter and a bit of a slower pace of life for a bit, with reasonable connections to anywhere but here.</description>
    </item>
    
    <item>
      <title>teamcity &#43; git-lfs works! Yatta!</title>
      <link>https://csmacnzblog.github.io/post/teamcity-git-lfs-works-yatta/</link>
      <pubDate>Tue, 01 Dec 2015 12:51:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/teamcity-git-lfs-works-yatta/</guid>
      <description>git-lfs teamcity getting it to work, use personal access tokens. need valid ssl cert for https github enterprise.</description>
    </item>
    
    <item>
      <title>The new 80/60 rule for testing</title>
      <link>https://csmacnzblog.github.io/post/the-new-8060-rule-for-testing/</link>
      <pubDate>Mon, 30 Nov 2015 06:24:46 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/the-new-8060-rule-for-testing/</guid>
      <description>I was listening to a presentation on testing, and the question on coverage came up. I was asked my opinion, and this interesting thought occurred to me. So I tweeted:

 New Rule: At least 80% coverage on 60% of the app. 70% of the time, it works everytime. Mark Clearwater (me) So what do I mean by this? Well basically, 100% test coverage overall is not a good idea.</description>
    </item>
    
    <item>
      <title>On gitversioning subdirectories</title>
      <link>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</link>
      <pubDate>Sun, 22 Nov 2015 15:05:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-gitversioning-subdirectories/</guid>
      <description>We have lots of NuGet. Every time we build, we publish a new version. but every build does not change the source code of the code in that version. wouldn&amp;rsquo;t it be nice if we could detect that the subdirectory hasn&amp;rsquo;t changed and so has the same version it did last time we built it?
We use gitversion, so we already have a way to get the version for the current commit.</description>
    </item>
    
    <item>
      <title>Code Templates</title>
      <link>https://csmacnzblog.github.io/post/code-templates/</link>
      <pubDate>Wed, 18 Nov 2015 10:27:56 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/code-templates/</guid>
      <description>Blog resharper templates. Unit test example vs visualstudio</description>
    </item>
    
    <item>
      <title>Microsoft Band 2 - The first 24 hours</title>
      <link>https://csmacnzblog.github.io/post/microsoft-band-2-the-first-24-hours/</link>
      <pubDate>Wed, 18 Nov 2015 09:13:57 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/microsoft-band-2-the-first-24-hours/</guid>
      <description>My Microsoft Band finally arrived yesterday morning, so obviously I put it straight on (after a charge of course). Here is a chronicle of first impressions.
Setup Out of the box, setup was really easy. Simply following the instructions on the band and the phone made it simple. I paired it with my Windows Phone (a Lumia 930) and as soon as the connection was made, the two devices started to chat to each other, downloading updates for the band using my phone&amp;rsquo;s internet connection.</description>
    </item>
    
    <item>
      <title>Global Day of Coderetreat 2015. Done.</title>
      <link>https://csmacnzblog.github.io/post/global-day-of-coderetreat-2015-done/</link>
      <pubDate>Sat, 14 Nov 2015 18:35:22 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/global-day-of-coderetreat-2015-done/</guid>
      <description>It was another great year being involved in the Global Day of Coderetreat for 2015. This was my first year hosting, and it was great fun planning the exercises and running the day. With 16 people turning up, we had a nice mix of student developers, junior developers from various different Software Consultancies around Wellington, and a couple of Seasoned Vets of the GCDR who are known faces from the .</description>
    </item>
    
    <item>
      <title>Global Day of Coderetreat 2015 is here</title>
      <link>https://csmacnzblog.github.io/post/global-day-of-code-retreat-2015-is-here/</link>
      <pubDate>Wed, 11 Nov 2015 18:22:41 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/global-day-of-code-retreat-2015-is-here/</guid>
      <description>It&amp;rsquo;s that time of year again for Programmers the world over to gather together and practice their art. Yes, It&amp;rsquo;s the 2015 Global Day of Code Retreat on Saturday 14th November, and once again I have found myself involved. 4 years ago I attended my first GDCR in Wellington and it was great fun. Now, having stepped in to help facilitate last year, I have stepped up to Host it, with the help of a few of my colleagues as Xero.</description>
    </item>
    
    <item>
      <title>On fixing problems in existing solutions</title>
      <link>https://csmacnzblog.github.io/post/on-fixing-problems-in-existing-installations/</link>
      <pubDate>Sun, 08 Nov 2015 07:02:57 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/on-fixing-problems-in-existing-installations/</guid>
      <description>A builder came around the other day to fix the shelf under the sink. We had a leaking tap that over time had been dripping down onto the shelf and the boards had ended up in an awful state. From my perspective, we just simply needed to rip it out and put a new one in.
Luckily, the builder was an expert and explained to me what would have to be done.</description>
    </item>
    
    <item>
      <title>Make me a sandwich</title>
      <link>https://csmacnzblog.github.io/post/make-me-a-sandwich/</link>
      <pubDate>Sun, 11 Oct 2015 15:57:06 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/make-me-a-sandwich/</guid>
      <description>A lesson in powershell.
I typed this:
&amp;gt; iisreset  Which responded with this:
Access denied, you must be an administrator of the remote computer to use this command. Either have your account added to the administrator local group of the remote computer or to the domain administrator global group.  So I typed this:
&amp;gt; sudo iisreset  I was thinking this: 
But got this:
sudo : The term &#39;sudo&#39; is not recognized as the name of a cmdlet, function, script file, or operable program.</description>
    </item>
    
    <item>
      <title>F5 VPN and Windows 10</title>
      <link>https://csmacnzblog.github.io/post/f5-vpn-and-windows-10/</link>
      <pubDate>Thu, 03 Sep 2015 09:24:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/f5-vpn-and-windows-10/</guid>
      <description>I recently had the need to VPN into a network using an F5 Networks VPN. Turns out the provided BIG-IP Edge Client installs ok on Windows 10 but doesn&amp;rsquo;t connect. I kept getting the &amp;ldquo;Network Access Connection Device was not found.&amp;rdquo; error at the last step of connecting.
Turns out that it was adding a &amp;lsquo;device&amp;rsquo; to device manager but not associating a driver to it. Easily fixed as it happens.</description>
    </item>
    
    <item>
      <title>William and Bill - Code comments</title>
      <link>https://csmacnzblog.github.io/post/william-and-bill-code-comments/</link>
      <pubDate>Sun, 23 Aug 2015 07:54:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/william-and-bill-code-comments/</guid>
      <description>scenario 1: williams writes code comments, they get out of sync scenario 2: William writes readable code with no comments, one high level comment, Bill gets in there quickly.</description>
    </item>
    
    <item>
      <title>William and Bill - Writing Tests</title>
      <link>https://csmacnzblog.github.io/post/william-and-bill-writing-tests/</link>
      <pubDate>Sat, 22 Aug 2015 12:50:02 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/william-and-bill-writing-tests/</guid>
      <description>Story of William and Bill
William is just bill 6 months ago.
version 1 - Will writes bad code, no tests, bill has to add feature, pain. version 2 - Will writes bad code, but writes tests around requirements. bill adds feature, safely refactors Wills code.</description>
    </item>
    
    <item>
      <title>Keyboard shortcuts for Windows 10 Power Users - Part 2</title>
      <link>https://csmacnzblog.github.io/post/keyboard-shortcuts-for-windows-10-power-users-2/</link>
      <pubDate>Thu, 20 Aug 2015 07:57:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/keyboard-shortcuts-for-windows-10-power-users-2/</guid>
      <description>When Windows 8 came out, I got really into the new shortcuts and found out some had been there for a while that I never knew about. Windows 10 is out now and I&amp;rsquo;ve learned a few more that have been around just as long that I never knew. Since there are a lot of shortcuts, I&amp;rsquo;ve split this into two parts.
 Part 1: What&amp;rsquo;s New Part 2: Old Classics &amp;lt;=(We are here)  Part 2 Old classics If you are a Windows 7 power user, there is nothing new for you here.</description>
    </item>
    
    <item>
      <title>Resharper Shortcuts</title>
      <link>https://csmacnzblog.github.io/post/resharper-shortcuts/</link>
      <pubDate>Sun, 16 Aug 2015 08:14:28 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/resharper-shortcuts/</guid>
      <description>Shortcut keys are a huge productivity tool. The longer you can keep your fingers on the keyboard typing without reaching for the mouse, the faster you will get things done. Using Resharper with Visual Studio is no different.
The core concepts Choices, Choices&amp;hellip; As with most things in live, you have a choice to make.
To make the most of the productivity boost of shortcuts, use an out of the box set, and make sure it is the same set that everyone on your team uses.</description>
    </item>
    
    <item>
      <title>Keyboard shortcuts for Windows 10 Power Users - Part 1</title>
      <link>https://csmacnzblog.github.io/post/keyboard-shortcuts-for-windows-10-power-users-1/</link>
      <pubDate>Sun, 16 Aug 2015 07:46:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/keyboard-shortcuts-for-windows-10-power-users-1/</guid>
      <description>When Windows 8 came out, I got really into the new shortcuts and found out some had been there for a while that I never knew about. Windows 10 is out now and I&amp;rsquo;ve learned a few more that have been around just as long that I never knew. Since there are a lot of shortcuts, I&amp;rsquo;ve split this into two parts.
 Part 1: What&amp;rsquo;s New &amp;lt;=(We are here) Part 2: Old Classics  Part 1: Whats new?</description>
    </item>
    
    <item>
      <title>Resharper on AppVeyor</title>
      <link>https://csmacnzblog.github.io/post/resharper-on-appveyor/</link>
      <pubDate>Sat, 15 Aug 2015 17:16:08 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/resharper-on-appveyor/</guid>
      <description>JetBrains have some great tools. One I am particularly fond of is Resharper. Resharper is a Code Analysis, Refactoring, formatting and all round productivity boosting tool. It falls into the same camp as CodeRush and JustCode.
If you are using TeamCity, which is the Continuous Integration server from JetBrains, then you will find build tasks available to run ReSharper&amp;rsquo;s duplicate finder and inspection tools across your solution. This is really helpful, and can even do things like high-water marks on error counts, and failing builds on errors.</description>
    </item>
    
    <item>
      <title>Pets vs Cattle</title>
      <link>https://csmacnzblog.github.io/post/pets-vs-cattle/</link>
      <pubDate>Sun, 09 Aug 2015 08:41:48 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/pets-vs-cattle/</guid>
      <description>There is this concept that has been floating around for a while which says you should treat your servers as cattle, not pets. I came across another version of this analogy that I wanted to post, since it doesn&amp;rsquo;t seem to have been recorded anywhere but has been mentioned in presentations. But before I get to that, let us look at what this phrase means, and where it came from.</description>
    </item>
    
    <item>
      <title>Visual Studio 2015 vs Visual Studio 2013</title>
      <link>https://csmacnzblog.github.io/post/visual-studio-2015-vs-visual-studio-2013/</link>
      <pubDate>Wed, 05 Aug 2015 11:13:12 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/visual-studio-2015-vs-visual-studio-2013/</guid>
      <description>I&amp;rsquo;ve been running some numbers over our solution to try and make things more efficient. While I was at it, I figured I would put 2013 head to head with 2015.
The main test I ran was to take a solution open in Visual Studio and make sure it builds. I then ran Clean Solution. Using a stopwatch (so accuracy +- 1-second values) I recorded how long it took to build.</description>
    </item>
    
    <item>
      <title>Windows 10 Animations</title>
      <link>https://csmacnzblog.github.io/post/windows-10-animations/</link>
      <pubDate>Sun, 02 Aug 2015 17:18:45 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/windows-10-animations/</guid>
      <description>You&amp;rsquo;ve upgraded to windows 10 and are really enjoying it. But are you making the most of the visualisations it now provides you?
Since Aero came onto the scene in Vista, Windows has leveraged your graphics card to add heaps of whiz-bang effects to windows. Transparent windows, animating transitions and other such visual effects. With Windows 10 we have new ones, such as the multiple desktops transition, and the new interpretation of the task switcher labeled Task View.</description>
    </item>
    
    <item>
      <title>ExternalAnnotations, or how to not depend on jetbrains.annotations.dll</title>
      <link>https://csmacnzblog.github.io/post/externalannotations-or-how-to-not-depend-on-jetbrains-annotations-dll/</link>
      <pubDate>Sun, 02 Aug 2015 08:37:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/externalannotations-or-how-to-not-depend-on-jetbrains-annotations-dll/</guid>
      <description>There is some great static analysis stuff that ReSharper does for you. Specifically around nullability, purity and usage of your code. From their Code Annotations page in Visual Studio:
 ReSharper Annotations help reduce false positive warnings, explicitly declare purity and nullability in your code, deal with implicit usages of member, support special semantics of APIs in ASP.NET and XAML frameworks and otherwise increase accuracy of ReSharper code inspections.
 Right, what I said.</description>
    </item>
    
    <item>
      <title>Automated Cross-Platform testing of a .Net console App</title>
      <link>https://csmacnzblog.github.io/post/automated-cross-platform-testing-of-a-net-console-app/</link>
      <pubDate>Tue, 28 Jul 2015 11:30:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/automated-cross-platform-testing-of-a-net-console-app/</guid>
      <description>mono vs .net windows vs linux automation console execution</description>
    </item>
    
    <item>
      <title>Using C# 5.0 with Visual Studio 2015</title>
      <link>https://csmacnzblog.github.io/post/using-c5-with-visual-studio-2015/</link>
      <pubDate>Sun, 26 Jul 2015 07:46:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/using-c5-with-visual-studio-2015/</guid>
      <description>Visual Studio 2015 is out and brings us the new C# 6 language features. We also have the new .Net 4.6 Runtime. But what does that mean?
Well, the framework version and language version are two separate concerns. You can practically pick any framework, with any language, and it will work. This means that If you want to use C# 6 features on your .Net 4.0 application, you can. Ok, so some language features require specific framework libraries, like generics, and async, but most features tend to be syntactic sugar.</description>
    </item>
    
    <item>
      <title>MethodImplAttribute and MethodImplOptions</title>
      <link>https://csmacnzblog.github.io/post/methodimplattribute-and-methodimploptions/</link>
      <pubDate>Sun, 19 Jul 2015 17:11:17 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/methodimplattribute-and-methodimploptions/</guid>
      <description>I&amp;rsquo;ve been following some C development going on in the community, and discussion around memory management and optimisations lead me to start thinking about how they might be emulated in a C# application.
Slight Digression Now I know that you have to prioritise Correctness, Performance, Readability, and that C# by design makes things readable and productive sometimes at the sacrifice of performance, but since I am writing helper extensions for readability, it is worth considering their performance losses/gains, and if they could be generally better in any way.</description>
    </item>
    
    <item>
      <title>Another layer of indirection</title>
      <link>https://csmacnzblog.github.io/post/another-layer-of-indirection/</link>
      <pubDate>Wed, 08 Jul 2015 16:21:53 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/another-layer-of-indirection/</guid>
      <description>There is a &amp;lsquo;great&amp;rsquo; quote in Software development about indirection that goes like this:
 Any problem can be solved by adding another layer of indirection. David Wheeler The follow up to this, of course, is to end it with the following:
 &amp;hellip;except for the problem of too many layers of indirection. Kevlin Henney I am here to provide a proof of sorts, that disproves the latter and re-enforces the former.</description>
    </item>
    
    <item>
      <title>The Service Locator base class anti-pattern</title>
      <link>https://csmacnzblog.github.io/post/the-service-locator-base-class-antipattern/</link>
      <pubDate>Sun, 05 Jul 2015 18:04:40 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/the-service-locator-base-class-antipattern/</guid>
      <description>Something I have seen a lot of over the last few years is a lot of service location, particularly in base classes, particularly in Controllers. But not limited to there, it can happen anywhere we see base classes.
Short rant about inheritance The longer I do this, the more I find that base classes are not meant to be overused. I find that if we are pumping base classes full of code, we should probably be breaking them out into smaller classes, and including them in the derived versions that actually use that functionality.</description>
    </item>
    
    <item>
      <title>Windows 10 phantom text fix</title>
      <link>https://csmacnzblog.github.io/post/windows-10-phantom-text-fix/</link>
      <pubDate>Wed, 01 Jul 2015 20:35:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/windows-10-phantom-text-fix/</guid>
      <description>I&amp;rsquo;ve been using the Windows 10 Insider Previews on my Dell Latitude ST2E Tablet for a few months and It has been a bit hit and miss. I&amp;rsquo;ve really enjoyed the experience of previewing what&amp;rsquo;s coming, but it has been quite buggy up until the 10158/10159 builds leading up to the July 29th RTM. But there is one bug that has survived for me that, through wishful thinking I had expected to just go away after a while.</description>
    </item>
    
    <item>
      <title>Html anchors, links, and css</title>
      <link>https://csmacnzblog.github.io/post/anchors-links-and-css/</link>
      <pubDate>Tue, 30 Jun 2015 22:55:42 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/anchors-links-and-css/</guid>
      <description>As part of reskinning my blog, I have had to rethink my menu links and CSS. I discovered something interesting that I hadn&amp;rsquo;t really thought about before. But let&amp;rsquo;s start with a lesson that got me to where I made that realisation.
LVHA I recall a time at uni where I was learning about CSS. The phrase Love, Ha! was etched into my brain to remember the letters LVHA, which stand for the 4 pseudo classes of an anchor (a) tag, which were link, visited, hover, active.</description>
    </item>
    
    <item>
      <title>public, private &amp; new: C# visibility scope explained</title>
      <link>https://csmacnzblog.github.io/post/public-private-new-c-visibility-scope-explained/</link>
      <pubDate>Sun, 28 Jun 2015 10:43:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/public-private-new-c-visibility-scope-explained/</guid>
      <description>I wanted to go over the visibility modifiers in C#. There are a few, it&amp;rsquo;s not as simple as just public or private. Let&amp;rsquo;s go through some scenarios and get our heads around what we can use, when and why.
I couldn&amp;rsquo;t think of a good term to group the concepts of methods, constructors, and classes, so I will refer to these as &amp;lsquo;things&amp;rsquo; for the duration of this post.</description>
    </item>
    
    <item>
      <title>More small classes</title>
      <link>https://csmacnzblog.github.io/post/more-small-classes/</link>
      <pubDate>Sun, 21 Jun 2015 08:49:59 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/more-small-classes/</guid>
      <description>Its a pretty common rule of thumb to avoid monoliths and write more small classes. Think about the solid principles.
 Single responsibility per class. This implies less in it. Smaller. Open for extension closed for modification. Take out the things that will change. Smaller. Liskov substitution principle says substitutability is the way to go. Easier to ensure when your class is smaller. Interface segregation. Smaller interfaces. Dependencies being passed in means less surface area accessible or exposed.</description>
    </item>
    
    <item>
      <title>Performance testing MethodImplOptions.AggresiveInlining</title>
      <link>https://csmacnzblog.github.io/post/performance-testing-methodimploptions-aggresiveinlining/</link>
      <pubDate>Thu, 18 Jun 2015 09:04:44 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/performance-testing-methodimploptions-aggresiveinlining/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ghost blog backups</title>
      <link>https://csmacnzblog.github.io/post/ghost-blog-backups/</link>
      <pubDate>Sun, 14 Jun 2015 17:25:12 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ghost-blog-backups/</guid>
      <description>I&amp;rsquo;ve been using Ghost to run my blog for a few months now. One thing that was not immediately obvious to me was how to backup the content in my blog. So here is a quick recap on how its done.
Its actually pretty easy, although not very discoverable. When you are logged in, you can head to the URL https://[YourBlogDomain]/ghost/debug. This takes you to the following debug page:
From here you can see the Export button, which exports your blog is a Ghost blog custom json format.</description>
    </item>
    
    <item>
      <title>Building a better development team</title>
      <link>https://csmacnzblog.github.io/post/building-a-better-development-team/</link>
      <pubDate>Sun, 07 Jun 2015 20:29:10 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/building-a-better-development-team/</guid>
      <description>Last November I helped out with the Wellington contingent of the Global Day of Coderetreat. It was a great day to explore strategies and techniques to improve your code and expand your knowledge of patterns and practices. This is a great event and I highly recommend looking out for it again later this year. I liked this concept so much, that I started my own series over the Summer (December till January is Summer here is NZ).</description>
    </item>
    
    <item>
      <title>Relocate your library folders from registry</title>
      <link>https://csmacnzblog.github.io/post/relocate-your-library-folders-from-registry/</link>
      <pubDate>Sun, 07 Jun 2015 09:40:37 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/relocate-your-library-folders-from-registry/</guid>
      <description>http://www.sevenforums.com/tutorials/18583-user-folders-restore-default-location.html</description>
    </item>
    
    <item>
      <title>Code Demoing with Visual Studio</title>
      <link>https://csmacnzblog.github.io/post/code-demoing-with-visual-studio/</link>
      <pubDate>Sun, 24 May 2015 08:24:28 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/code-demoing-with-visual-studio/</guid>
      <description>I often find myself in a meeting or presentation, Visual Studio open, showing some code. What is the question I can almost guarantee that someone will ask? Can you please make the code bigger.
Now I have a trick that I find really useful that saves a lot of hassle and works really well. It comes in the form of a Visual Studio extension called Productivity Power Tools 2013. Specifically, the built in presentation feature.</description>
    </item>
    
    <item>
      <title>Caliburn.Micro and Async</title>
      <link>https://csmacnzblog.github.io/post/caliburn-micro-and-async/</link>
      <pubDate>Thu, 21 May 2015 15:58:53 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/caliburn-micro-and-async/</guid>
      <description>When it comes to asynchronous processing for client side applications, async and await are an amazing way to code. You no longer have to worry about thread affinity and UIThread delegation. It just works. But it is also real easy to get it wrong when an exception is thrown, as I found out the hard way.
The symptom is simple. A button click does nothing. Or worse, a button triggers a busy waiting, that waits forever.</description>
    </item>
    
    <item>
      <title>Ports and Adapters - what goes in the engine?</title>
      <link>https://csmacnzblog.github.io/post/ports-and-adapters-what-goes-in-the-engine/</link>
      <pubDate>Thu, 21 May 2015 09:11:35 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ports-and-adapters-what-goes-in-the-engine/</guid>
      <description>I wanted to talk about other patterns/approaches/architechtures that fit inside this architecture
 DDD CQRS TDD/Organic  </description>
    </item>
    
    <item>
      <title>Ports and Adapters - a complete solution</title>
      <link>https://csmacnzblog.github.io/post/ports-and-adapters-a-complete-solution/</link>
      <pubDate>Wed, 20 May 2015 11:08:26 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ports-and-adapters-a-complete-solution/</guid>
      <description>Look at:
 WPF/WinPhone/ios apps public apis (ui services vs system services or a third type just for api?) website/web app services layer CQRS/Crud/Service methods vs presentation concerns (ui services vs system services) testing  add diagrams tie into previous posts.</description>
    </item>
    
    <item>
      <title>.Net web configs and IIS</title>
      <link>https://csmacnzblog.github.io/post/net-web-configs-and-iis/</link>
      <pubDate>Tue, 19 May 2015 16:16:11 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-web-configs-and-iis/</guid>
      <description>defaults, overrides and server config vs web application config
http://blogs.msdn.com/b/chaun/archive/2009/12/04/iis7-error-cannot-add-duplicate-collection-entry-of-type-mimemap-with-unique-key-attribute-fileextension.aspx</description>
    </item>
    
    <item>
      <title>Code Camp Christchurch - An Introduction to git</title>
      <link>https://csmacnzblog.github.io/post/code-camp-christchurch-an-introduction-to-git/</link>
      <pubDate>Fri, 15 May 2015 13:59:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/code-camp-christchurch-an-introduction-to-git/</guid>
      <description>I presented today at Code Camp Christchurch on git. I will try and translate some of the topics into new tutorial posts over the coming weeks, but you can find a rough transcript of the content from my presentation in my post git is not scary.
I refered to some links in my talk, and wanted to make them available here. So on with it then.
The Git Parable This is a nice little story that steps through the process of producing a full featured source control system that resembles git.</description>
    </item>
    
    <item>
      <title>Ports and Adapters, by example</title>
      <link>https://csmacnzblog.github.io/post/ports-and-adapters-by-example/</link>
      <pubDate>Tue, 12 May 2015 21:05:58 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ports-and-adapters-by-example/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git is not scary</title>
      <link>https://csmacnzblog.github.io/post/git-is-not-scary/</link>
      <pubDate>Sun, 10 May 2015 18:14:28 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/git-is-not-scary/</guid>
      <description>It may not be simple, it may not be easy, but git is not scary. Now, I&amp;rsquo;ve been using git for less than a year now, professionally. I had dabbled in git personal projects for the year before that. My primary Source control had mostly been TFS (Team Foundation Server), and I had been exposed to subversion on a major project before too. Full disclosure, I&amp;rsquo;ve never used Visual SourceSafe. Just Sayin&#39;.</description>
    </item>
    
    <item>
      <title>Ports and Adapters</title>
      <link>https://csmacnzblog.github.io/post/ports-and-adapters/</link>
      <pubDate>Sun, 03 May 2015 09:45:09 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ports-and-adapters/</guid>
      <description>It feels like everywhere I turn (in my circles anyway), people are talking about Ports and Adapters, and I thought I would jump on the bandwagon. You may have also heard this architecture called Onion Architecture, or Hexagonal Architecture. All of these are essentially the same idea, under a different name.
Brief History When we started solving our problems with a 3 tier architecture, we were trying to solve the problem of isolating our business logic from our persistence and from our presentation.</description>
    </item>
    
    <item>
      <title>SOLID-ifying your Nuget Packaging</title>
      <link>https://csmacnzblog.github.io/post/solid-ifying-your-nuget-packaging/</link>
      <pubDate>Mon, 27 Apr 2015 07:54:17 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/solid-ifying-your-nuget-packaging/</guid>
      <description>The other day we were talking about problems we (as a room of developers) had been having with NuGet, inter-package dependencies, and were quick to relate them back to DLL Hell. But I had this slight epiphany from another comment, where it was observed that our X.Common package had &amp;lsquo;helper code&amp;rsquo; for database access, base class helpers, mathematical calculations, and domain logic common functions. Not to mention the dependencies it pulls in to allow some of this code to work (libraries, adapters, ORMs, frameworks etc).</description>
    </item>
    
    <item>
      <title>git lol</title>
      <link>https://csmacnzblog.github.io/post/git-lol/</link>
      <pubDate>Wed, 22 Apr 2015 07:33:49 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/git-lol/</guid>
      <description>I saw Scott Chacon use git lol on an introduction to git video, and thought it looked like a neat alias idea. I did some searching and came across this blog post by Franz Bettag, in which he creates an alias for git log called git lol. I&amp;rsquo;m not sure if he came up with it, but it looks like Scott Chacon is the person from whom people seem to learn about it.</description>
    </item>
    
    <item>
      <title>Aliasing your &#39;git status&#39;</title>
      <link>https://csmacnzblog.github.io/post/aliasing-your-git-status/</link>
      <pubDate>Sat, 18 Apr 2015 13:26:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/aliasing-your-git-status/</guid>
      <description>Anyone else have the bad habit of typing in git statsu or git stauts? Or maybe you just end up typing git status all the time at the command line, and wonder if there was a better way. Well, there is.
Aliases Most command-line shells have the concept of aliasing. This means you type one thing, and it represents an alternative way to call another command, maybe with implicit parameters baked in that you use all the time.</description>
    </item>
    
    <item>
      <title>MVVM, &#43; Testing &#43; Ports and Adapters</title>
      <link>https://csmacnzblog.github.io/post/mvvm-testing-ports-and-adapters/</link>
      <pubDate>Mon, 06 Apr 2015 17:21:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/mvvm-testing-ports-and-adapters/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing when your using Ports and Adapters</title>
      <link>https://csmacnzblog.github.io/post/testing-when-your-using-ports-and-adapters/</link>
      <pubDate>Mon, 06 Apr 2015 17:20:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/testing-when-your-using-ports-and-adapters/</guid>
      <description>I touched on Testing in my previous Ports and Adapters post, but when your testing your ports and adapters system, you want to think about how you write your Unit Tests, Developer Tests, and Integration Tests. Ill try and do this with an example Geometry app (contrived to look slightly like a LOB application).</description>
    </item>
    
    <item>
      <title>TeamCity, GitHub and Pull Requests</title>
      <link>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</link>
      <pubDate>Mon, 06 Apr 2015 12:29:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/teamcity-github-and-pull-requests/</guid>
      <description>I&amp;rsquo;ve been having fun setting up TeamCity builds, specifically trying to run a static analysis build that shows it&amp;rsquo;s results on a pull request. This lead me to discover some issues with the built-in TeamCity support.
It is really easy to set up a build task that runs PowerShell as its build step. With this I can arbitrarily run code and get static analysis checking. It is even easy to push the results back to GitHub using the api (see the Statuses api on GitHub for just how easy).</description>
    </item>
    
    <item>
      <title>Console2 Console arrow keys acting wrong - The fix</title>
      <link>https://csmacnzblog.github.io/post/console2-console-arrow-keys-acting-wrong-the-fix/</link>
      <pubDate>Mon, 30 Mar 2015 15:15:54 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/console2-console-arrow-keys-acting-wrong-the-fix/</guid>
      <description>The Introduction I&amp;rsquo;m having fun using all my console windows inside tabs in one application using Console2 (hooray for easily finding a Hanselman blog post on my specific topic for you to read all about it) and it has been going well.
The Issue However, the other day, my whole console window started sliding around when I pressed the arrow keys, instead of moving the type cursor left and right, or moving through the history buffer with up and down.</description>
    </item>
    
    <item>
      <title>Why does my .Net dll have an app.config?</title>
      <link>https://csmacnzblog.github.io/post/why-does-my-net-dll-have-an-app-config/</link>
      <pubDate>Mon, 30 Mar 2015 06:49:15 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/why-does-my-net-dll-have-an-app-config/</guid>
      <description></description>
    </item>
    
    <item>
      <title>.Net .Configs and what they&#39;re for</title>
      <link>https://csmacnzblog.github.io/post/net-configs-and-what-theyre-for/</link>
      <pubDate>Mon, 30 Mar 2015 06:49:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-configs-and-what-theyre-for/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introducing PublishCoverity</title>
      <link>https://csmacnzblog.github.io/post/introducing-publishcoverity/</link>
      <pubDate>Sun, 08 Mar 2015 17:34:21 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/introducing-publishcoverity/</guid>
      <description>As part of my open source development tooling investigation, I came across Coverity Scan Static Analysis. And thanks to Arkfps&#39; post I could automate the process of submitting the results. And now Appveyor includes Coverity on it&amp;rsquo;s images. But I decided to take his work one step further, and so I built a small utility to compress and submit the results.
PublishCoverity is available on NuGet, and has two use cases: Compress and Publish.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 7. Lifecycle Management</title>
      <link>https://csmacnzblog.github.io/post/net-os-7-lifecycle-management/</link>
      <pubDate>Tue, 03 Mar 2015 19:42:16 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-7-lifecycle-management/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 6. Metrics</title>
      <link>https://csmacnzblog.github.io/post/net-os-6-metrics/</link>
      <pubDate>Sun, 01 Mar 2015 18:37:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-6-metrics/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 5. Documentation</title>
      <link>https://csmacnzblog.github.io/post/net-os-5-documentation/</link>
      <pubDate>Sun, 01 Mar 2015 16:56:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-5-documentation/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 4. Publish &amp; Deploy</title>
      <link>https://csmacnzblog.github.io/post/net-os-4-publish-deploy/</link>
      <pubDate>Sat, 28 Feb 2015 21:43:34 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-4-publish-deploy/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 3. Test</title>
      <link>https://csmacnzblog.github.io/post/net-os-3-test/</link>
      <pubDate>Wed, 25 Feb 2015 20:55:52 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-3-test/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 2. Build</title>
      <link>https://csmacnzblog.github.io/post/net-os-2-build/</link>
      <pubDate>Tue, 24 Feb 2015 20:30:15 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-2-build/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>.Net Open Source Series - 1. Source Control</title>
      <link>https://csmacnzblog.github.io/post/net-os-1-source-control/</link>
      <pubDate>Sun, 22 Feb 2015 21:13:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/net-os-1-source-control/</guid>
      <description>This is a series on my findings around building open source software online for free. There are many SAAS (Software As A Service) platforms out there and a lot of these are free to use with your open source projects. But not all of these work with C# and .Net. So this series highlights the tools and products out there that work with .Net in different phases of the software development life cycle.</description>
    </item>
    
    <item>
      <title>Introducing BCLExtensions</title>
      <link>https://csmacnzblog.github.io/post/introducing-bclextensions/</link>
      <pubDate>Sun, 15 Feb 2015 15:25:45 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/introducing-bclextensions/</guid>
      <description>It has been a pipe-dream of mine for a while to have my very own C# extensions library. Well now I do. I&amp;rsquo;ve been chipping away at a library on github for ages (my init commit was 15 Sep 2012!) and it is finally a real thing! I&amp;rsquo;ve got a V1.0.0, a Nuget package, and even 100% coverage. I even have the coverity report running, although it&amp;rsquo;s taken so long that I don&amp;rsquo;t have anything to worry about right now.</description>
    </item>
    
    <item>
      <title>monocov &#43; Travis-CI = WINNING</title>
      <link>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</link>
      <pubDate>Sun, 08 Feb 2015 15:29:13 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/monocov-travis-ci-winning/</guid>
      <description>After much frustration, I now have monocov running on my Travis-CI build, and I&amp;rsquo;m going to share with you how I did it.
TL;DR The coverage results don&amp;rsquo;t seem accurate just yet, but jump to the end to see the full script to get it going on your build.
As I mentioned in a previous post, I am building a coveralls.io publisher for .Net code coverage. This means (to me any way) that I need to support mono coverage as well.</description>
    </item>
    
    <item>
      <title>Visual Studio PowerShell</title>
      <link>https://csmacnzblog.github.io/post/visual-studio-powershell/</link>
      <pubDate>Thu, 29 Jan 2015 17:54:54 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/visual-studio-powershell/</guid>
      <description>I&amp;rsquo;ve been using psake as my build tool and running my builds on Appveyor. Now Appveyor runs with all the visual studio commands available on the path. When you install visual studio, It gives you a special cmd shell shortcut that loads you an environment with all the visual studio stuff available, which is cool. But not for PowerShell.
DISCLAIMER: I originally found this solution on this msdn blog, but tweaked it to work with Visual Studio 2013, and 64bit versions of windows.</description>
    </item>
    
    <item>
      <title>Defining Types of Tests</title>
      <link>https://csmacnzblog.github.io/post/defining-types-of-tests/</link>
      <pubDate>Thu, 29 Jan 2015 15:39:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/defining-types-of-tests/</guid>
      <description>I had a conversation the other day with another Developer at work about testing, types of tests and what parts of the system to test. The gist of this revolved around unit test versus integration test, and how we define them and how the definition guides what we think of when we should use them.</description>
    </item>
    
    <item>
      <title>Introducing Coveralls.net</title>
      <link>https://csmacnzblog.github.io/post/introducing-coveralls-net/</link>
      <pubDate>Sat, 24 Jan 2015 14:33:48 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/introducing-coveralls-net/</guid>
      <description>So I&amp;rsquo;ve built an (almost MVP) code coverage publisher for coveralls.io from C# code, using opencover coverage results. Checkout the github repo and nuget packages if you want to use it. I&amp;rsquo;m even dogfooding it on appveyor as part of my psake build tasks.
So how do you use it? Well luckily I used docopts.net to give you a bit of a command line experience while you use it, but the gist is this:</description>
    </item>
    
    <item>
      <title>Mediaportal: no network, no cards</title>
      <link>https://csmacnzblog.github.io/post/mediaportal-no-network-no-cards/</link>
      <pubDate>Mon, 19 Jan 2015 15:22:27 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/mediaportal-no-network-no-cards/</guid>
      <description>I just moved house, and of course the first thing to do is plug in the media pc running MediaPortal, so that my shows will record. But as you would expect, change brings problems. It doesn&amp;rsquo;t start. The pc boots, everything looks ok, but the TV-Server doesn&amp;rsquo;t seem to be running. When I tried to launch the TV-Server Configuration, pops up an awesome dialog with a stacktrace in it:
Exception: System.</description>
    </item>
    
    <item>
      <title>Automated UI Testing</title>
      <link>https://csmacnzblog.github.io/post/automated-ui-testing/</link>
      <pubDate>Wed, 14 Jan 2015 13:31:46 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/automated-ui-testing/</guid>
      <description>&amp;mdash;NOTES from previous post&amp;mdash;
Automated UI Testing
This is a whole topic in itself, so I will have to post something more in depth about this later, but the punchline is Automated UI Tests abstract functionality from implementation detail. Yes, we couple to design decisions still, but done right UI test can abstract over the design and still focus on the functionality. This makes these tests less fragile and prone to change based on refactoring implementations.</description>
    </item>
    
    <item>
      <title>Semantics vs implementation detail</title>
      <link>https://csmacnzblog.github.io/post/semantics-vs-implementation-detail/</link>
      <pubDate>Sun, 11 Jan 2015 16:36:29 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/semantics-vs-implementation-detail/</guid>
      <description>When we write out classes and variables, we are pretty good at naming them for what they represent. What I mean by this, is that when we declare a customer first name variable, we don&amp;rsquo;t call it firstNameString, or cfnString, and we have also lost the bad habit of firstNameStr or strFirstName. The implementation detail simply doesn&amp;rsquo;t matter. Semantically, it represents the customer&amp;rsquo;s first name, so we use customerFirstName. Or if we are clearly in the context of the customer we can simply use firstName or customer.</description>
    </item>
    
    <item>
      <title>Inversion of Architecture</title>
      <link>https://csmacnzblog.github.io/post/inversion-of-architecture/</link>
      <pubDate>Thu, 08 Jan 2015 12:14:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/inversion-of-architecture/</guid>
      <description>Onion Architecture, layers out. Hexagonal Architecture - Ports and adapters
Needs research.
more notes: https://github.com/csmacnz/QUEBB/blob/master/src/ArchitectureNotes.md</description>
    </item>
    
    <item>
      <title>Thoughts on Testing</title>
      <link>https://csmacnzblog.github.io/post/thoughts-on-testing/</link>
      <pubDate>Sun, 04 Jan 2015 19:57:02 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/thoughts-on-testing/</guid>
      <description>I&amp;rsquo;ve gone through the regular evolution when it comes to writing tests. At first there was no time, didnt bother. This was mostly down to the fact I was building demo apps and samples that got less use than it took to build them, working with senior devs who had made their name making said apps.
The next stage is reluctant acceptance. The team I was put on wrote tests, so I guess I should too.</description>
    </item>
    
    <item>
      <title>CI Services</title>
      <link>https://csmacnzblog.github.io/post/ci-services/</link>
      <pubDate>Mon, 29 Dec 2014 10:35:26 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ci-services/</guid>
      <description>State of play CI with supported platforms
https://snap-ci.com/ https://circleci.com/ https://travis-ci.org/ http://www.appveyor.com/ https://codeship.com/ http://www.shippable.com/ https://www.atlassian.com/software/bamboo (+ hosted available) http://teamcity.codebetter.com/
http://azure.microsoft.com/en-us/documentation/articles/cloud-services-continuous-delivery-use-vso/ (exclusive to visualstudio online)
Self-Hosted: https://about.gitlab.com/gitlab-ci/ https://www.jetbrains.com/teamcity/ http://jenkins-ci.org/ http://hudson-ci.org/ http://cruisecontrol.sourceforge.net/ http://msdn.microsoft.com/en-us/library/hh395023%28v=vs.110%29.aspx (https://web.archive.org/web/20130730154141/http://confluence.public.thoughtworks.org/display/CC/CI+Feature+Matrix)
badges: http://blog.jetbrains.com/teamcity/2012/07/teamcity-build-status-icon/ http://shields.io/ http://githubbadges.herokuapp.com/ https://github.com/badges/badgerbadgerbadger
Docs http://inch-ci.org/ https://readthedocs.org/ http://apiary.io/ https://readme.io/ https://pages.github.com/
Code Quality https://codeclimate.com/ https://www.codacy.com/ https://scan.coverity.com/
Agile/Kanban http://www.issuestats.com/ https://waffle.io/ GitHub issues:	https://img.shields.io/github/issues/badges/shields.svg GitHub forks:	https://img.shields.io/github/forks/badges/shields.svg GitHub stars:	https://img.shields.io/github/stars/badges/shields.svg</description>
    </item>
    
    <item>
      <title>Git Housekeeping</title>
      <link>https://csmacnzblog.github.io/post/git-housekeeping/</link>
      <pubDate>Mon, 29 Dec 2014 09:36:45 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/git-housekeeping/</guid>
      <description>Those who are using Git but still new to the concept will no doubt have realised that files are treated differently to normal source control tools, and that they transition between different known states, according to git. I am going to try and explain these states, and give commands on how to transition between them.
I needed these commands recently because I wanted to reset my changes and hadn&amp;rsquo;t really thought about how these states affect what it is that gets &amp;lsquo;reset&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Travis-ci, C# and PCL</title>
      <link>https://csmacnzblog.github.io/post/travis-ci-c-and-pcl/</link>
      <pubDate>Tue, 23 Dec 2014 10:10:46 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/travis-ci-c-and-pcl/</guid>
      <description>As any good library should do, I&amp;rsquo;m building my BCLExtensions project(extensions for the .net base class library) using PCL (Portable class library, Profile328 to be exact). It works great on my AppVeyor CI builds, which is a great .Net windows build server.
I recently discovered Travis-CI has added beta C# support so I connected it up with my GitHub prooject, which is designed to eventually work with mono anyway, and gave it a go.</description>
    </item>
    
    <item>
      <title>Control Flow Micro-architecture</title>
      <link>https://csmacnzblog.github.io/post/control-flow-micro-architecture/</link>
      <pubDate>Fri, 19 Dec 2014 08:28:58 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/control-flow-micro-architecture/</guid>
      <description> waterfall/chained/cascading bad  dependencies testability   zigzag/stitching/shallow/(control, read, write) good  easily testable less dependencies    </description>
    </item>
    
    <item>
      <title>Hey, I found this thing called Coveralls.io</title>
      <link>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</link>
      <pubDate>Sun, 14 Dec 2014 19:50:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hey-i-found-this-thing-called-coveralls-io/</guid>
      <description>In my pursuit to find a build task runner for my code coverage I stumbled on this whole other side of the internet I didn&amp;rsquo;t know about (from a .Net developer&amp;rsquo;s perspective). I&amp;rsquo;ve been using AppVeyor.com for my open-source CI build, which is a great option for anyone with a project on the Microsoft Stack. The cool thing about this (and other similar services) is that if you have an open source project on GitHub, you can use these services with your project for free!</description>
    </item>
    
    <item>
      <title>Gulp vs .net</title>
      <link>https://csmacnzblog.github.io/post/gulp-vs-net/</link>
      <pubDate>Sun, 07 Dec 2014 17:41:40 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/gulp-vs-net/</guid>
      <description>I wanted to add continuous code coverage to my little extension library project, and so realised i would need to run one of nCover, dotCover or openCover from the command line on my build server. This calls for a task based build automation library!
Because I&amp;rsquo;m started to learn more about this nodejs thing as a .Net developer, I figured I should give one of the build automation projects from there a go, even though my project is a .</description>
    </item>
    
    <item>
      <title>New Zealand Public holidays Calendar</title>
      <link>https://csmacnzblog.github.io/post/new-zealand-public-holidays-calendar/</link>
      <pubDate>Tue, 02 Dec 2014 14:53:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/new-zealand-public-holidays-calendar/</guid>
      <description>Want to see all the New Zealand public holidays on your calendar on your Google Calendar, but don&amp;rsquo;t want to have to enter them yourself, or maintain them?
I found this great page with public holidays and calendars on the MBIE site. They have the New Zealand public holidays here for the current, past and future years for your reference. They also have this great link to an icalendar (ics) url for National public holiday dates, including all regional anniversaries (linked here for your reference) on the NZ public holiday iCalendar feeds page.</description>
    </item>
    
    <item>
      <title>Mockups and Sketches - Overview</title>
      <link>https://csmacnzblog.github.io/post/mockups-and-sketches-overview/</link>
      <pubDate>Wed, 02 May 2012 09:25:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/mockups-and-sketches-overview/</guid>
      <description>This is part of a wireframing series
 Overview First Draft Balsamiq Blend with Sketchflow  This is a companion post to my talk at welliDotNet, Wellington&amp;rsquo;s .Net User Group on Wednesday 4th April 2012. The slides can be downloaded here.
I want to give you a brief introduction to creating designs and mockups for applications from a developers point-of-view, to enlighten other developers on the cool tools available and to inform designers that there are tools out there that can create great UX prototypes for clients, that you don&amp;rsquo;t have to be a developer to use.</description>
    </item>
    
    <item>
      <title>Hosts entries and windows services</title>
      <link>https://csmacnzblog.github.io/post/hosts-entries-and-windows-services/</link>
      <pubDate>Sun, 29 Apr 2012 03:26:04 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/hosts-entries-and-windows-services/</guid>
      <description>This is regarding an issue where the hosts file is being ignored when running a service as local system. Skip to the bottom for the solution or read on if you care what lead to the need for this in the first place.
The Problem Recently I had an issue with my machine and hosts file being ignored. I was using a Windows Server 2008 R2 machine, in a large network environment.</description>
    </item>
    
    <item>
      <title>Mockups and Sketches - First Draft</title>
      <link>https://csmacnzblog.github.io/post/temp-slug-48/</link>
      <pubDate>Sun, 15 Apr 2012 09:42:45 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/temp-slug-48/</guid>
      <description>This is part of a wireframing series
 Overview First Draft Balsamiq Blend with Sketchflow  Lets set the scene: &amp;gt; Bacon Traders is a company who on sell meat atcompetitiveprices in the local shop in their small town. A large part of this has become taking phone orders from nearby towns and the big city down the road. Toaccommodatethose customers who are unable to pick up their order, a delivery service (for a small fee) was started, and has become a popular service to the point where they are regularly delivering to the entire region.</description>
    </item>
    
    <item>
      <title>Mockups and Sketches - Blend with Sketchflow</title>
      <link>https://csmacnzblog.github.io/post/temp-slug-47/</link>
      <pubDate>Sun, 15 Apr 2012 03:13:51 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/temp-slug-47/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mockups and Sketches - Balsamiq</title>
      <link>https://csmacnzblog.github.io/post/temp-slug-46/</link>
      <pubDate>Sun, 15 Apr 2012 03:13:33 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/temp-slug-46/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7 Lessons from Building a WP7 Game in 7 days</title>
      <link>https://csmacnzblog.github.io/post/7-lessons-from-building-a-wp7-game-in-7-days/</link>
      <pubDate>Tue, 05 Jul 2011 18:00:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/7-lessons-from-building-a-wp7-game-in-7-days/</guid>
      <description>This is a companion post for my talk at Wellington&amp;rsquo;s SLAMD user group on 6 July 2011.
Recently I took part in Nigel Parker&amp;rsquo;s &amp;ldquo;Release an App for Windows Phone 7 in 7 Days for a Chance to Win a New HTC 7 Trophy Phone&amp;rdquo; competition, with the intent of winning a Windows Phone 7 device. Although I didn&amp;rsquo;t manage to win the device, I did get a free 1 year subscription to the App Hub, allowing me to develop and submit apps that I build, had fun doing it, and learned a few lessons along the way.</description>
    </item>
    
    <item>
      <title>Bing Maps Control Series - 2: Add a simple map to your application</title>
      <link>https://csmacnzblog.github.io/post/bing-maps-control-series-2-add-a-simple-map-to-your-application/</link>
      <pubDate>Wed, 16 Feb 2011 04:38:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/bing-maps-control-series-2-add-a-simple-map-to-your-application/</guid>
      <description>This is part 2 of a series on using the Silverlight Bing Maps Control. If haven&amp;rsquo;t already, check out part 1.
So Now that you have installed the Bing Maps Silverlight Control, and got yourself a key, you need to add the control to your project. For completeness, lets start by creating a new Silverlight 4 Application Project in Visual Studio 2010, and open up the MainPage.xaml file.
Now before we can add the control, we need a reference to it.</description>
    </item>
    
    <item>
      <title>Bing Maps Control Series - 1: Downloading and Installing the Tools</title>
      <link>https://csmacnzblog.github.io/post/bing-maps-control-series-1-downloading-and-installing-the-tools/</link>
      <pubDate>Sun, 16 Jan 2011 19:29:10 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/bing-maps-control-series-1-downloading-and-installing-the-tools/</guid>
      <description>Over the last month or so I have has the opportunity to develop using the Bing Maps Control for Silverlight, and thought it appropriate to share this experience as well as a bit of a &amp;lsquo;how to&amp;rsquo; on using it. I plan for this to be a bit of a series based on the following items: - Downloading and Installing the Tools.
 Add a Simple map to your application.</description>
    </item>
    
    <item>
      <title>Custom Control Validation in Silverlight</title>
      <link>https://csmacnzblog.github.io/post/custom-control-validation-in-silverlight/</link>
      <pubDate>Wed, 17 Nov 2010 20:52:11 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/custom-control-validation-in-silverlight/</guid>
      <description>So you&amp;rsquo;ve built up your nice new fancy custom control, and some Dependency Properties for your users to bind there data to, what else could you want? How about validation? Turns out that the control base class is all ready set up for this exact scenario. There is only one step required: Create the Visual states. Just add a visualstategroup called ValidationStates and a state for each of Valid, InvalidUnfocused and InvalidFocused corresponding to how you want your control to behave when in each of those states.</description>
    </item>
    
    <item>
      <title>XAML and System.Windows.Markup</title>
      <link>https://csmacnzblog.github.io/post/xaml-and-system-windows-markup/</link>
      <pubDate>Sat, 06 Nov 2010 09:52:17 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/xaml-and-system-windows-markup/</guid>
      <description>On Wednesday I gave a talk on xaml usage outside of the UI. This post is basically a recap of that talk. There are three useful attributes in the System.Windows.Markup namespace that give you some control over how classes can be used in Xaml, and xaml tools like Expression Blend and Visual Studio. This has an impact mostly on human readability and legibility of the xaml, and can benefit anyone who reads and writes raw xaml markup.</description>
    </item>
    
    <item>
      <title>WPF vs SL 1: Data Template Selector - Real World Example 1</title>
      <link>https://csmacnzblog.github.io/post/temp-slug-40/</link>
      <pubDate>Sat, 06 Nov 2010 01:11:00 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/temp-slug-40/</guid>
      <description>As Promised, here is a real world example I have previously used a DataTemplateSelector: styling a ComboBox for two views. By default, when you add objects to a ComboBox, it uses the same DataTemplate for the closed display value and for the dropdown list. But I had a scenario where I wanted to display my objects as a details list in the dropdown, and just the name property when the ComboBox is closed.</description>
    </item>
    
    <item>
      <title>Dialogs From Outside the UI</title>
      <link>https://csmacnzblog.github.io/post/dialogs-from-outside-the-ui/</link>
      <pubDate>Thu, 14 Oct 2010 02:17:28 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/dialogs-from-outside-the-ui/</guid>
      <description>If you are getting the &amp;ldquo;Dialogs must be user-initiated.&amp;rdquo; error in Visual Studio, you are probably calling an OpenFileDialog or SaveFileDialog from the wrong place.
The most common &amp;lsquo;wrong place&amp;rsquo; seems to actually be the debugger. If are stepping through your code and try to step over a dialog.ShowDialog() call, you will most definitely get this error. So before you go rewriting your code, try placing the breakpoint after the call, and see if that fixes your problem.</description>
    </item>
    
    <item>
      <title>Behaviours</title>
      <link>https://csmacnzblog.github.io/post/temp-slug-38/</link>
      <pubDate>Wed, 13 Oct 2010 23:15:31 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/temp-slug-38/</guid>
      <description>using System; using System.Net; using System.Windows; using System.Windows.Controls; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Shapes; using System.Windows.Controls.Primitives; using System.Windows.Interactivity; namespace Behaviors { public class AlwaySelectedBehavior: Behavior&amp;lt;selector&amp;gt; { private int itemCount; protected override void OnAttached() { base.OnAttached(); this.AssociatedObject.ItemContainerGenerator.ItemsChanged += new ItemsChangedEventHandler(ItemContainerGenerator_ItemsChanged); this.AssociatedObject.SelectionChanged += new SelectionChangedEventHandler(AssociatedObject_SelectionChanged); ItemContainerGenerator_ItemsChanged(this, null); } void AssociatedObject_SelectionChanged(object sender, SelectionChangedEventArgs e) { int currentCount = AssociatedObject.Items.Count; if (currentCount &amp;gt; 0 &amp;amp;&amp;amp; AssociatedObject.SelectedIndex == -1) { AssociatedObject.</description>
    </item>
    
    <item>
      <title>Gonna Build Me A Blog... Frontend</title>
      <link>https://csmacnzblog.github.io/post/temp-slug-37/</link>
      <pubDate>Thu, 07 Oct 2010 18:43:11 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/temp-slug-37/</guid>
      <description>So Ive been toying with the idea for a while, mulling it over. And I think I&amp;rsquo;ve finally found a way to &amp;lsquo;easily&amp;rsquo; get my blog using Silverlight for a front end. After much inspiration fromJustin Angel, and a dig around his html source, as well as a good read though some SEO posts, I&amp;rsquo;m feeling pretty good about my idea.basically its this: I have a LAMP web hosting setup, using the WordPress as my blog engine.</description>
    </item>
    
    <item>
      <title>WPF VS Silverlight 1: Data Template Selector</title>
      <link>https://csmacnzblog.github.io/post/wpf-vs-silverlight-1-data-template-selector/</link>
      <pubDate>Wed, 06 Oct 2010 03:44:12 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/wpf-vs-silverlight-1-data-template-selector/</guid>
      <description>Here is my first post on what I will try and turn into a series of WPF/Silverlight differences and how to get around them. First I will begin by talking about DataTemplateSelector.
I suppose before I talk about the DataTemplateSelector class, I should mention a little bit about what a Template is. Unless you are new to WPF and Silverlight Development (and by extension, WP7 development) you will be aware all controls have a Template Property.</description>
    </item>
    
    <item>
      <title>Time for an update</title>
      <link>https://csmacnzblog.github.io/post/time-for-an-update/</link>
      <pubDate>Fri, 10 Sep 2010 08:33:12 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/time-for-an-update/</guid>
      <description>So I really should have posted something sooner, but I&amp;rsquo;ve been so busy with other things. Anyway, Change should soon be coming, I have a whole backlog of things i need to post about, and I&amp;rsquo;ve started using Twitter, which should result in this post being tweeted about due to a new plugin (fingers crossed). So here is my mental note, to myself and perhaps also a promise to the wider public, of what i hope to get done to this site over the next few months (I hope this is realistic enough :-) ).</description>
    </item>
    
    <item>
      <title>Where can I find Silverlight?</title>
      <link>https://csmacnzblog.github.io/post/where-can-i-find-silverlight/</link>
      <pubDate>Mon, 26 Apr 2010 09:23:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/where-can-i-find-silverlight/</guid>
      <description>I had someone ask me the other day where he could go to see silverlight in action, what sites are using silverlight, so I did a bit of searching, and found that it&amp;rsquo;s not that easy to find really. So here is my attempt to create such a list. Feel free to add anything I miss by posting comments.
Bing maps I mentioned Twitter Maps on Bing in an earlier post but Bing maps is actually powered by silverlight, in its most advanced version.</description>
    </item>
    
    <item>
      <title>Microsoft Releases Application Bar Icons for Windows Phone 7</title>
      <link>https://csmacnzblog.github.io/post/microsoft-releases-application-bar-icons-for-windows-phone-7/</link>
      <pubDate>Thu, 08 Apr 2010 05:16:20 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/microsoft-releases-application-bar-icons-for-windows-phone-7/</guid>
      <description>Check out the icons for developers, For Windows Phone 7, lookin pretty sharp.</description>
    </item>
    
    <item>
      <title>Bing Presents: Twitter Maps</title>
      <link>https://csmacnzblog.github.io/post/bing-presents-twitter-maps/</link>
      <pubDate>Wed, 31 Mar 2010 04:41:18 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/bing-presents-twitter-maps/</guid>
      <description>Now I&amp;rsquo;m not personally a tweeter, but since this was written in silverlight and posted on The Silverlight Team Blog, I thought it was worth checking out. Personally, I think it looks cool, and is a great use of GPS. I did notice that my location is full of FourSquare tweets from workmates, which is pretty neat. As I said, not a tweeter, so won&amp;rsquo;t say too much about it lest I make a mistake, but The Map integration is quite something.</description>
    </item>
    
    <item>
      <title>Action Hero Style Software Development</title>
      <link>https://csmacnzblog.github.io/post/action-hero-style-software-development/</link>
      <pubDate>Sun, 28 Mar 2010 21:08:39 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/action-hero-style-software-development/</guid>
      <description>I just read a really awesome post about software development using the analogy of Chuck Norris and Steven Seagal. Definately worth a read and brings forward some good points about software development. Check it out. http://www.intergen.co.nz/blog/chris-klug/dates/2010/3/software-development-action-hero-style/</description>
    </item>
    
    <item>
      <title>Revolt of the Mannequins</title>
      <link>https://csmacnzblog.github.io/post/revolt-of-the-mannequins/</link>
      <pubDate>Sun, 14 Mar 2010 21:50:07 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/revolt-of-the-mannequins/</guid>
      <description>![](http://res.cloudinary.com/csmacnz/image/upload/v1415422754/Revolt_of_the_Mannequins_Jordi_Bover_oazbbk.jpg &amp;ldquo;&amp;ldquo;Revolt of the Mannequins&amp;rdquo; - NZ Festival of the Arts&amp;rdquo;)
Over the last week, Wellington has been taken over by shop front Mannequin displays. For those of you who missed it, it consisted of 10 different stories, 40 different mannequins, and a daily change of position to portray some interesting stories. Some even made it through the window to wander rooftop!
I didn&amp;rsquo;t get a chance to see every day, or even take photos like I would have wanted to, but I did find a collection in flicker for you all to enjoy, If your interested.</description>
    </item>
    
    <item>
      <title>From MythTV to Windows Media Center</title>
      <link>https://csmacnzblog.github.io/post/from-mythtv-to-windows-media-center/</link>
      <pubDate>Sun, 14 Mar 2010 05:54:01 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/from-mythtv-to-windows-media-center/</guid>
      <description>I recently decided to make the leap from Ubuntu and open source MythTV to the professional product, Microsoft&amp;rsquo;s Windows Media Center. Why you may ask? Well to be honest I moved and lost my Freeview reception, then came to the conclusion that without that I no longer had any real use for the machine. But also I have recently become a Windows developer and and using Linux less and less. My Windows partitions on my other machines are getting booted more and more, and with windows 7 out (and getting my hands on a couple of copies) I thought it a good time to change focus and try another media PC software out.</description>
    </item>
    
    <item>
      <title>Delicious Mussels Recipe</title>
      <link>https://csmacnzblog.github.io/post/delicious-mussels-recipe/</link>
      <pubDate>Sat, 13 Mar 2010 23:01:57 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/delicious-mussels-recipe/</guid>
      <description>Yesterday at the supermarket, Mussels just happened to be on special, and after the last meal of Mussels I had cooked for me turned out so great, I thought I would give them a go. First things first, I had no recipe so performed some quick google magic and stubbled upon this great, simple recipe for Creamy Garlic &amp;amp; White Wine Mussels. Prep time: 20 minutes Cook time: 5 minutes Servings: 2 Ingredients: 1 dozen green lip mussels 6 cloves of garlic 1 1/2 cups of white wine (SauvignonBlanc worked well for me) 1 stalk of celery 1 small onion 1 tablespoon butter (but the more the better I found) 1/4 cup of cream (Maybe add a little more if you like a creamier broth, I&amp;rsquo;m keen to try coconut cream next time) **Directions:**Preparing mussels for cooking Scrub mussels well in sink with running cold water.</description>
    </item>
    
    <item>
      <title>Pulseaudio in system-wide mode</title>
      <link>https://csmacnzblog.github.io/post/pulseaudio-in-system-wide-mode/</link>
      <pubDate>Mon, 12 Oct 2009 02:38:01 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/pulseaudio-in-system-wide-mode/</guid>
      <description>I have my machine set up to use MPD (Music Player Daemon to play my music, and use the minion Firefox plug-in MPD client to control it, all well and good, no troubles there. I use Pulseaudio(PA) for sound on my Ubuntu server, and configuring this with MPD is no trouble, just search for MPD and Pulseaudio and the instructions come up several times in the first page. But the problem is that PA defaults to user-session mode, where the user logged in has control over the speakers through PA.</description>
    </item>
    
    <item>
      <title>Playing with Silverlight</title>
      <link>https://csmacnzblog.github.io/post/playing-with-silverlight/</link>
      <pubDate>Mon, 21 Sep 2009 22:54:49 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/playing-with-silverlight/</guid>
      <description>I&amp;rsquo;ve just started to experiment with silverlight, well, silverlight 2 to be exact.Its an interesting combination of C# and xml markup, but i like it none-the-less.So far if made a series of buttons that change elements on the screen, nothing special, but am keen to get stuck into something more substantial. Maybe if i get my traffic simulator working in C++ ill port it over to silverlight? We shall see.</description>
    </item>
    
    <item>
      <title>My First YouTube Post</title>
      <link>https://csmacnzblog.github.io/post/my-first-youtube-post/</link>
      <pubDate>Sun, 15 Feb 2009 22:31:58 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/my-first-youtube-post/</guid>
      <description>Well here is the YouTube movie I promised, 6 weeks work to make, and im really proud of it. This was made using Blender for the animation, and GIMP to prepare the stop motion frames. Be sure to keep posted for the second installment of Fred. :)</description>
    </item>
    
    <item>
      <title>Strange Monitor issues</title>
      <link>https://csmacnzblog.github.io/post/strange-monitor-issues/</link>
      <pubDate>Thu, 12 Feb 2009 22:35:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/strange-monitor-issues/</guid>
      <description>Just a little backstory to put this in context. I have a dual-boot Vista/Ubuntu machine. I updated my hardware and vista needed to re-register, but my internet connection was down. Fine, I&amp;rsquo;ll use Ubuntu till my internets back.
All is well until I finally reboot into Vista and re-active my licence online, download all the latest updates and reboot. All of a sudden my LCD screen no longer works. Fortunately, I have two screens but the LCD no longer detects as UPnP and won&amp;rsquo;t take a resolution higher than 1024x768.</description>
    </item>
    
    <item>
      <title>YouTube</title>
      <link>https://csmacnzblog.github.io/post/youtube/</link>
      <pubDate>Wed, 11 Feb 2009 23:18:26 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/youtube/</guid>
      <description>I am just about ready to start becoming a contributing member of YouTube. For the last six weeks I&amp;rsquo;ve been taking part in a Summer School Paper at my University to develop and make a short 2-5 minute movie. The paper essentially sums itself up as &amp;lsquo;YouTube for credit&amp;rsquo; according to one of the organisers. This has been a great experience and has the end result of me having a movie showing tomorrow and my video published on the course&amp;rsquo;s YouTube channel.</description>
    </item>
    
    <item>
      <title>Global Game Jam 2009</title>
      <link>https://csmacnzblog.github.io/post/global-game-jam-2009/</link>
      <pubDate>Mon, 02 Feb 2009 05:15:08 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/global-game-jam-2009/</guid>
      <description>This weekend I was lucky enough to participate in Global Game Jam 2009 in the Dunedin, New Zealand Team.For those of you who don&amp;rsquo;t know what Game Jam is, it&amp;rsquo;s a 48-hour game building competition run in multiple centers around the world simultaneously.Dunedin entered three teams and successfully made 3 games in the 48 hours allocated, with a total of 10 people participating in Dunedin, and a total of over 1700 participants worldwide.</description>
    </item>
    
    <item>
      <title>Clay-mation coming soon</title>
      <link>https://csmacnzblog.github.io/post/claymation-coming-soon/</link>
      <pubDate>Fri, 16 Jan 2009 11:47:54 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/claymation-coming-soon/</guid>
      <description>So i&amp;rsquo;m making a movie. Yes thats right, i am making a short animated film for a class project with a fellow class mate, that will eventually end up on youtube for every one to enjoy. I don&amp;rsquo;t want to give too much away, but will say this: it contains stop-motion play dough. Wait and see!</description>
    </item>
    
    <item>
      <title>Myth Update</title>
      <link>https://csmacnzblog.github.io/post/myth-update/</link>
      <pubDate>Fri, 16 Jan 2009 11:40:36 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/myth-update/</guid>
      <description>Ive had my mythbox up and running for about a month now, and its working perfectly. Here are a few wee changes i had to make from the default xfce mythbuntu 8.10 I had to make. Mythwelcome I have my mythbox set up to autologin and run with the remote, without a keyboard and mouse. for this reason i needed it to have some way of getting back into mythtv frontend without having to remote login or plug in a keyboard.</description>
    </item>
    
    <item>
      <title>Media PC/Server</title>
      <link>https://csmacnzblog.github.io/post/media-pcserver/</link>
      <pubDate>Sun, 12 Oct 2008 23:56:47 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/media-pcserver/</guid>
      <description>It has come to the end of another university year and I&amp;rsquo;m ready to once again start being a bit more regular with my blog posts.It also means i have more free time to start working on some projects of my own.The plan for this summer is to get a server running, to do samba/nfs file sharing and ldap authentication, as well as hopefully a mythtv server with a dual-tuner digital terrestrial card for watching and recording freeview here in New Zealand.</description>
    </item>
    
    <item>
      <title>Iphone Phenomenon</title>
      <link>https://csmacnzblog.github.io/post/iphone-phenomenon/</link>
      <pubDate>Mon, 07 Jul 2008 04:32:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/iphone-phenomenon/</guid>
      <description>Since June 11, the hype surrounding the new 3G IPhone has slowly grown to mega proportions worldwide as people got excited about its release, announced to hit stores July 11. With less than a week to go until its release, i felt it was time i added my two cents on the matter.
Here in little old New Zealand, so far from the global conglomerates and large corporations and their headquarters, we were all excited to hear that we would be one of the first countries to receive a piece of the IPhone pie.</description>
    </item>
    
    <item>
      <title>IE8, Microsoft are still in the game</title>
      <link>https://csmacnzblog.github.io/post/ie8-microsoft-are-still-in-the-game/</link>
      <pubDate>Sat, 14 Jun 2008 11:38:44 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ie8-microsoft-are-still-in-the-game/</guid>
      <description>It seems that Microsoft have already set their sites on the next generation web browser war, and this time they aim to win. It&amp;rsquo;s predecessor IE7 was released in late 2006, and was a sore dissapointment to some, but was also seen as a step in the right direction by others in the web development community. This all comes down to the battle of the standards, a war that has been going on since the start of the web years ago.</description>
    </item>
    
    <item>
      <title>XBOX 360, a new use for my tversity</title>
      <link>https://csmacnzblog.github.io/post/xbox-360-a-new-use-for-my-tversity/</link>
      <pubDate>Sun, 18 May 2008 04:21:14 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/xbox-360-a-new-use-for-my-tversity/</guid>
      <description>About a month back I finally had enough cash to buy myself an xbox 360. I even managed to get three games with it which was a bonus, since it would be a while before I could afford more. Viva Pinata, Forza Motorsport 2 and Assassin&amp;rsquo;s Creed were the three games I got with it, and within a week I also had a copy of Halo 3, the main reason why anyone would get an xbox over a playstation (right?</description>
    </item>
    
    <item>
      <title>Flatting: &#39;O&#39; week Arrivals</title>
      <link>https://csmacnzblog.github.io/post/flatting-o-week-arrivals/</link>
      <pubDate>Tue, 26 Feb 2008 22:54:55 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/flatting-o-week-arrivals/</guid>
      <description>The flat is finally full of people and things are starting to settle down and level off a bit. It is now a week after &amp;lsquo;O&amp;rsquo; week, the biggest week on the University of Otago&amp;rsquo;s calender where all the students arrive back in dunedin, move into their flats and their Halls of Residence, and the orientation begins. Lectures have now begun and things are quieter, it is hard to tell that only a week ago everything was different.</description>
    </item>
    
    <item>
      <title>Tversity On Linux with vmware</title>
      <link>https://csmacnzblog.github.io/post/tversity-on-linux-with-vmware/</link>
      <pubDate>Tue, 26 Feb 2008 22:26:15 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/tversity-on-linux-with-vmware/</guid>
      <description>My struggles with TVersity have come to an end for the moment, and I&amp;rsquo;m quite happy with that. After struggling for many hours to get it working under wine on my ubuntu machine, I decided to try out vmware running virtual windows xp. it took all of a couple of hours, most of which was a windows installation, and i had TVersity working from virtual xp on my ubuntu box. It works well enough to be able to stream music to my psp without any skipping, and I have even tested it with streaming video to an xbox 360.</description>
    </item>
    
    <item>
      <title>Ubuntu misadventures</title>
      <link>https://csmacnzblog.github.io/post/ubuntu-misadventures/</link>
      <pubDate>Tue, 29 Jan 2008 01:40:09 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/ubuntu-misadventures/</guid>
      <description>It was about three months ago that i made the leap into linux on a almost full time basis. I had been using linux on my laptop with dual boot occasionally and had been using fedora at university (along with mac osx and windows 2000) but decided it was time to make the final leap and make it a full time thing.
Ubuntu was my flavour of choice, as i had heard from a few people that it was very supportive of most hardware and for most people it would just work out of the box.</description>
    </item>
    
    <item>
      <title>The Flatting Experience Continues</title>
      <link>https://csmacnzblog.github.io/post/the-flatting-experience-continues/</link>
      <pubDate>Tue, 22 Jan 2008 02:26:02 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/the-flatting-experience-continues/</guid>
      <description>It&amp;rsquo;s all starting to come together now. With power, phone and internet all connected and up and running, we can finally start living in our own flat. It has taken almost two weeks but finally we have our internet connected, and I can start using my computer more productively. As a Computing student, I really can say that I need the internet for my studies, and i can also claim that playing games helps my course, but of course this is easier to claim when I can do research on the internet.</description>
    </item>
    
    <item>
      <title>I like Gadgets</title>
      <link>https://csmacnzblog.github.io/post/i-like-gadgets/</link>
      <pubDate>Sun, 20 Jan 2008 23:08:10 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/i-like-gadgets/</guid>
      <description>I&amp;rsquo;m always interested in the weird and wacky when it comes to technology and gadgets. Things like fridges with the internet, and RFID car security, and my latest find is an MP4 watch. Yes that&amp;rsquo;s right a wrist watch that plays music and videos, not to mention displays photos, text files and even has a few games.
With a beautiful stainless steel strap, it looks quite snazzy, and sounds impressive too.</description>
    </item>
    
    <item>
      <title>The art of the brick</title>
      <link>https://csmacnzblog.github.io/post/the-art-of-the-brick/</link>
      <pubDate>Thu, 17 Jan 2008 21:45:30 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/the-art-of-the-brick/</guid>
      <description>Check out this guy who makes art out of Lego bricks. Very talented and very creative, a must see. His name is Nathan Sawaya and he is a 33 year old New York artist. I really wish I could be in America to go see his art museum exhibit, the pictures on his website show some amazing sculptures. go check out The Art of the Brick. Well done mate. Thanks Ursi.</description>
    </item>
    
    <item>
      <title>The Flatting Experience</title>
      <link>https://csmacnzblog.github.io/post/the-flatting-experience/</link>
      <pubDate>Thu, 17 Jan 2008 02:47:51 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/the-flatting-experience/</guid>
      <description>We&amp;rsquo;ll I have officially been living in my flat for over a week, my first flat that i have lived in away from home, and so far I&amp;rsquo;ve enjoyed it. OK, so I haven&amp;rsquo;t really spent a great deal of time there, what with working all day and having a social life, but despite that it has been good so far. Maybe i should take a step back for a second.</description>
    </item>
    
    <item>
      <title>TVersity media streaming</title>
      <link>https://csmacnzblog.github.io/post/tversity-media-streaming/</link>
      <pubDate>Wed, 16 Jan 2008 02:52:19 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/tversity-media-streaming/</guid>
      <description>About a year ago I bought myself a psp off of the local auction website TradeMe, New Zealand&amp;rsquo;s answer to eBay, and have since used it mostly for listening to music and not a lot else. Sure I&amp;rsquo;ve used it for gaming, and struggled with using it for the internet, and just recently I&amp;rsquo;ve started watching videos (though due to the hassle of converting them not many), but music has been its main use.</description>
    </item>
    
    <item>
      <title>An ode to blogging</title>
      <link>https://csmacnzblog.github.io/post/an-ode-to-blogging/</link>
      <pubDate>Tue, 15 Jan 2008 04:38:24 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/an-ode-to-blogging/</guid>
      <description>A friend emailed me today, and told me a grand epic that was a day in his life, and my first response to him was &amp;lsquo;that story is blog-worthy, share it with the world why don&amp;rsquo;t you?&amp;rsquo;.
It&amp;rsquo;s become more and more self-evident, that the world is full of linguistically capable, and even exceptional writers, many of whom would never have had a chance to use their gifts and let their unique genius be heard by others.</description>
    </item>
    
    <item>
      <title>Let&#39;s try this again</title>
      <link>https://csmacnzblog.github.io/post/lets-try-this-again/</link>
      <pubDate>Sun, 13 Jan 2008 21:09:26 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/lets-try-this-again/</guid>
      <description>So I was on holiday, and over that time i didn&amp;rsquo;t add a single entry to my blog. I think my new years resolution is to actually sit down and add something to my blog more often. Lets start this off with a little about what im doing.
Well as a Uni Student, I find myself finally moving into a flat. All students should go through the flatting experience, it&amp;rsquo;s character building and teaches you many valuable life skills, or so they say.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://csmacnzblog.github.io/post/first-post/</link>
      <pubDate>Mon, 05 Nov 2007 01:28:32 +0000</pubDate>
      
      <guid>https://csmacnzblog.github.io/post/first-post/</guid>
      <description>Ok, so all blogs start somewhere, and mine starts here with my first blog post. Welcome to everyone who has managed to find this site, it&amp;rsquo;s not that publicly advertised i know.
Firstly I would like to say a bit about myself. So I&amp;rsquo;m a 20 year old University Student at the University of Otago in New Zealand. I&amp;rsquo;m studying computers with quite vigorous passion, and on the side dabble in writing, music and a few other creative endeavors.</description>
    </item>
    
  </channel>
</rss>
